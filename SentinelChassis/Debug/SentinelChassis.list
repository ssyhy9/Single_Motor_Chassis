
SentinelChassis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800cd68  0800cd68  0001cd68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce08  0800ce08  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce08  0800ce08  0001ce08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce10  0800ce10  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce10  0800ce10  0001ce10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce14  0800ce14  0001ce14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800ce18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005380  20000010  0800ce28  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  20005390  0800ce28  00025390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031681  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000067cd  00000000  00000000  000516c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002160  00000000  00000000  00057e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ec0  00000000  00000000  00059ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002994a  00000000  00000000  0005beb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ae65  00000000  00000000  000857fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5486  00000000  00000000  000b065f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00195ae5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a48  00000000  00000000  00195b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cd50 	.word	0x0800cd50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800cd50 	.word	0x0800cd50

080001d0 <__aeabi_dmul>:
 80001d0:	b570      	push	{r4, r5, r6, lr}
 80001d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001de:	bf1d      	ittte	ne
 80001e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e4:	ea94 0f0c 	teqne	r4, ip
 80001e8:	ea95 0f0c 	teqne	r5, ip
 80001ec:	f000 f8de 	bleq	80003ac <__aeabi_dmul+0x1dc>
 80001f0:	442c      	add	r4, r5
 80001f2:	ea81 0603 	eor.w	r6, r1, r3
 80001f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000202:	bf18      	it	ne
 8000204:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000208:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800020c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000210:	d038      	beq.n	8000284 <__aeabi_dmul+0xb4>
 8000212:	fba0 ce02 	umull	ip, lr, r0, r2
 8000216:	f04f 0500 	mov.w	r5, #0
 800021a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000222:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000226:	f04f 0600 	mov.w	r6, #0
 800022a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022e:	f09c 0f00 	teq	ip, #0
 8000232:	bf18      	it	ne
 8000234:	f04e 0e01 	orrne.w	lr, lr, #1
 8000238:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800023c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000240:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000244:	d204      	bcs.n	8000250 <__aeabi_dmul+0x80>
 8000246:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024a:	416d      	adcs	r5, r5
 800024c:	eb46 0606 	adc.w	r6, r6, r6
 8000250:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000254:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000258:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800025c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000260:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000264:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000268:	bf88      	it	hi
 800026a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800026e:	d81e      	bhi.n	80002ae <__aeabi_dmul+0xde>
 8000270:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000274:	bf08      	it	eq
 8000276:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027a:	f150 0000 	adcs.w	r0, r0, #0
 800027e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000288:	ea46 0101 	orr.w	r1, r6, r1
 800028c:	ea40 0002 	orr.w	r0, r0, r2
 8000290:	ea81 0103 	eor.w	r1, r1, r3
 8000294:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000298:	bfc2      	ittt	gt
 800029a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	popgt	{r4, r5, r6, pc}
 80002a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a8:	f04f 0e00 	mov.w	lr, #0
 80002ac:	3c01      	subs	r4, #1
 80002ae:	f300 80ab 	bgt.w	8000408 <__aeabi_dmul+0x238>
 80002b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002b6:	bfde      	ittt	le
 80002b8:	2000      	movle	r0, #0
 80002ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002be:	bd70      	pople	{r4, r5, r6, pc}
 80002c0:	f1c4 0400 	rsb	r4, r4, #0
 80002c4:	3c20      	subs	r4, #32
 80002c6:	da35      	bge.n	8000334 <__aeabi_dmul+0x164>
 80002c8:	340c      	adds	r4, #12
 80002ca:	dc1b      	bgt.n	8000304 <__aeabi_dmul+0x134>
 80002cc:	f104 0414 	add.w	r4, r4, #20
 80002d0:	f1c4 0520 	rsb	r5, r4, #32
 80002d4:	fa00 f305 	lsl.w	r3, r0, r5
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f205 	lsl.w	r2, r1, r5
 80002e0:	ea40 0002 	orr.w	r0, r0, r2
 80002e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f0:	fa21 f604 	lsr.w	r6, r1, r4
 80002f4:	eb42 0106 	adc.w	r1, r2, r6
 80002f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002fc:	bf08      	it	eq
 80002fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f1c4 040c 	rsb	r4, r4, #12
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f304 	lsl.w	r3, r0, r4
 8000310:	fa20 f005 	lsr.w	r0, r0, r5
 8000314:	fa01 f204 	lsl.w	r2, r1, r4
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f205 	lsl.w	r2, r0, r5
 800033c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000340:	fa20 f304 	lsr.w	r3, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea43 0302 	orr.w	r3, r3, r2
 800034c:	fa21 f004 	lsr.w	r0, r1, r4
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000354:	fa21 f204 	lsr.w	r2, r1, r4
 8000358:	ea20 0002 	bic.w	r0, r0, r2
 800035c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f094 0f00 	teq	r4, #0
 8000370:	d10f      	bne.n	8000392 <__aeabi_dmul+0x1c2>
 8000372:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000376:	0040      	lsls	r0, r0, #1
 8000378:	eb41 0101 	adc.w	r1, r1, r1
 800037c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000380:	bf08      	it	eq
 8000382:	3c01      	subeq	r4, #1
 8000384:	d0f7      	beq.n	8000376 <__aeabi_dmul+0x1a6>
 8000386:	ea41 0106 	orr.w	r1, r1, r6
 800038a:	f095 0f00 	teq	r5, #0
 800038e:	bf18      	it	ne
 8000390:	4770      	bxne	lr
 8000392:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	eb43 0303 	adc.w	r3, r3, r3
 800039c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3d01      	subeq	r5, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1c6>
 80003a6:	ea43 0306 	orr.w	r3, r3, r6
 80003aa:	4770      	bx	lr
 80003ac:	ea94 0f0c 	teq	r4, ip
 80003b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b4:	bf18      	it	ne
 80003b6:	ea95 0f0c 	teqne	r5, ip
 80003ba:	d00c      	beq.n	80003d6 <__aeabi_dmul+0x206>
 80003bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c0:	bf18      	it	ne
 80003c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c6:	d1d1      	bne.n	800036c <__aeabi_dmul+0x19c>
 80003c8:	ea81 0103 	eor.w	r1, r1, r3
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003da:	bf06      	itte	eq
 80003dc:	4610      	moveq	r0, r2
 80003de:	4619      	moveq	r1, r3
 80003e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e4:	d019      	beq.n	800041a <__aeabi_dmul+0x24a>
 80003e6:	ea94 0f0c 	teq	r4, ip
 80003ea:	d102      	bne.n	80003f2 <__aeabi_dmul+0x222>
 80003ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f0:	d113      	bne.n	800041a <__aeabi_dmul+0x24a>
 80003f2:	ea95 0f0c 	teq	r5, ip
 80003f6:	d105      	bne.n	8000404 <__aeabi_dmul+0x234>
 80003f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003fc:	bf1c      	itt	ne
 80003fe:	4610      	movne	r0, r2
 8000400:	4619      	movne	r1, r3
 8000402:	d10a      	bne.n	800041a <__aeabi_dmul+0x24a>
 8000404:	ea81 0103 	eor.w	r1, r1, r3
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800040c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000410:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800041e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000422:	bd70      	pop	{r4, r5, r6, pc}

08000424 <__aeabi_drsub>:
 8000424:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000428:	e002      	b.n	8000430 <__adddf3>
 800042a:	bf00      	nop

0800042c <__aeabi_dsub>:
 800042c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000430 <__adddf3>:
 8000430:	b530      	push	{r4, r5, lr}
 8000432:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000436:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	bf1f      	itttt	ne
 8000446:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800044e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000452:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000456:	f000 80e2 	beq.w	800061e <__adddf3+0x1ee>
 800045a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800045e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000462:	bfb8      	it	lt
 8000464:	426d      	neglt	r5, r5
 8000466:	dd0c      	ble.n	8000482 <__adddf3+0x52>
 8000468:	442c      	add	r4, r5
 800046a:	ea80 0202 	eor.w	r2, r0, r2
 800046e:	ea81 0303 	eor.w	r3, r1, r3
 8000472:	ea82 0000 	eor.w	r0, r2, r0
 8000476:	ea83 0101 	eor.w	r1, r3, r1
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	2d36      	cmp	r5, #54	; 0x36
 8000484:	bf88      	it	hi
 8000486:	bd30      	pophi	{r4, r5, pc}
 8000488:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800048c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000490:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000494:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000498:	d002      	beq.n	80004a0 <__adddf3+0x70>
 800049a:	4240      	negs	r0, r0
 800049c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004ac:	d002      	beq.n	80004b4 <__adddf3+0x84>
 80004ae:	4252      	negs	r2, r2
 80004b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b4:	ea94 0f05 	teq	r4, r5
 80004b8:	f000 80a7 	beq.w	800060a <__adddf3+0x1da>
 80004bc:	f1a4 0401 	sub.w	r4, r4, #1
 80004c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c4:	db0d      	blt.n	80004e2 <__adddf3+0xb2>
 80004c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ca:	fa22 f205 	lsr.w	r2, r2, r5
 80004ce:	1880      	adds	r0, r0, r2
 80004d0:	f141 0100 	adc.w	r1, r1, #0
 80004d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d8:	1880      	adds	r0, r0, r2
 80004da:	fa43 f305 	asr.w	r3, r3, r5
 80004de:	4159      	adcs	r1, r3
 80004e0:	e00e      	b.n	8000500 <__adddf3+0xd0>
 80004e2:	f1a5 0520 	sub.w	r5, r5, #32
 80004e6:	f10e 0e20 	add.w	lr, lr, #32
 80004ea:	2a01      	cmp	r2, #1
 80004ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f0:	bf28      	it	cs
 80004f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	18c0      	adds	r0, r0, r3
 80004fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	d507      	bpl.n	8000516 <__adddf3+0xe6>
 8000506:	f04f 0e00 	mov.w	lr, #0
 800050a:	f1dc 0c00 	rsbs	ip, ip, #0
 800050e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000512:	eb6e 0101 	sbc.w	r1, lr, r1
 8000516:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800051a:	d31b      	bcc.n	8000554 <__adddf3+0x124>
 800051c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000520:	d30c      	bcc.n	800053c <__adddf3+0x10c>
 8000522:	0849      	lsrs	r1, r1, #1
 8000524:	ea5f 0030 	movs.w	r0, r0, rrx
 8000528:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800052c:	f104 0401 	add.w	r4, r4, #1
 8000530:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000534:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000538:	f080 809a 	bcs.w	8000670 <__adddf3+0x240>
 800053c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000540:	bf08      	it	eq
 8000542:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000546:	f150 0000 	adcs.w	r0, r0, #0
 800054a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800054e:	ea41 0105 	orr.w	r1, r1, r5
 8000552:	bd30      	pop	{r4, r5, pc}
 8000554:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000558:	4140      	adcs	r0, r0
 800055a:	eb41 0101 	adc.w	r1, r1, r1
 800055e:	3c01      	subs	r4, #1
 8000560:	bf28      	it	cs
 8000562:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000566:	d2e9      	bcs.n	800053c <__adddf3+0x10c>
 8000568:	f091 0f00 	teq	r1, #0
 800056c:	bf04      	itt	eq
 800056e:	4601      	moveq	r1, r0
 8000570:	2000      	moveq	r0, #0
 8000572:	fab1 f381 	clz	r3, r1
 8000576:	bf08      	it	eq
 8000578:	3320      	addeq	r3, #32
 800057a:	f1a3 030b 	sub.w	r3, r3, #11
 800057e:	f1b3 0220 	subs.w	r2, r3, #32
 8000582:	da0c      	bge.n	800059e <__adddf3+0x16e>
 8000584:	320c      	adds	r2, #12
 8000586:	dd08      	ble.n	800059a <__adddf3+0x16a>
 8000588:	f102 0c14 	add.w	ip, r2, #20
 800058c:	f1c2 020c 	rsb	r2, r2, #12
 8000590:	fa01 f00c 	lsl.w	r0, r1, ip
 8000594:	fa21 f102 	lsr.w	r1, r1, r2
 8000598:	e00c      	b.n	80005b4 <__adddf3+0x184>
 800059a:	f102 0214 	add.w	r2, r2, #20
 800059e:	bfd8      	it	le
 80005a0:	f1c2 0c20 	rsble	ip, r2, #32
 80005a4:	fa01 f102 	lsl.w	r1, r1, r2
 80005a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ac:	bfdc      	itt	le
 80005ae:	ea41 010c 	orrle.w	r1, r1, ip
 80005b2:	4090      	lslle	r0, r2
 80005b4:	1ae4      	subs	r4, r4, r3
 80005b6:	bfa2      	ittt	ge
 80005b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005bc:	4329      	orrge	r1, r5
 80005be:	bd30      	popge	{r4, r5, pc}
 80005c0:	ea6f 0404 	mvn.w	r4, r4
 80005c4:	3c1f      	subs	r4, #31
 80005c6:	da1c      	bge.n	8000602 <__adddf3+0x1d2>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc0e      	bgt.n	80005ea <__adddf3+0x1ba>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0220 	rsb	r2, r4, #32
 80005d4:	fa20 f004 	lsr.w	r0, r0, r4
 80005d8:	fa01 f302 	lsl.w	r3, r1, r2
 80005dc:	ea40 0003 	orr.w	r0, r0, r3
 80005e0:	fa21 f304 	lsr.w	r3, r1, r4
 80005e4:	ea45 0103 	orr.w	r1, r5, r3
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	f1c4 040c 	rsb	r4, r4, #12
 80005ee:	f1c4 0220 	rsb	r2, r4, #32
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 f304 	lsl.w	r3, r1, r4
 80005fa:	ea40 0003 	orr.w	r0, r0, r3
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	fa21 f004 	lsr.w	r0, r1, r4
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f094 0f00 	teq	r4, #0
 800060e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000612:	bf06      	itte	eq
 8000614:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000618:	3401      	addeq	r4, #1
 800061a:	3d01      	subne	r5, #1
 800061c:	e74e      	b.n	80004bc <__adddf3+0x8c>
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf18      	it	ne
 8000624:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000628:	d029      	beq.n	800067e <__adddf3+0x24e>
 800062a:	ea94 0f05 	teq	r4, r5
 800062e:	bf08      	it	eq
 8000630:	ea90 0f02 	teqeq	r0, r2
 8000634:	d005      	beq.n	8000642 <__adddf3+0x212>
 8000636:	ea54 0c00 	orrs.w	ip, r4, r0
 800063a:	bf04      	itt	eq
 800063c:	4619      	moveq	r1, r3
 800063e:	4610      	moveq	r0, r2
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf1e      	ittt	ne
 8000648:	2100      	movne	r1, #0
 800064a:	2000      	movne	r0, #0
 800064c:	bd30      	popne	{r4, r5, pc}
 800064e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000652:	d105      	bne.n	8000660 <__adddf3+0x230>
 8000654:	0040      	lsls	r0, r0, #1
 8000656:	4149      	adcs	r1, r1
 8000658:	bf28      	it	cs
 800065a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800065e:	bd30      	pop	{r4, r5, pc}
 8000660:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000664:	bf3c      	itt	cc
 8000666:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800066a:	bd30      	popcc	{r4, r5, pc}
 800066c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000670:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000674:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf1a      	itte	ne
 8000684:	4619      	movne	r1, r3
 8000686:	4610      	movne	r0, r2
 8000688:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800068c:	bf1c      	itt	ne
 800068e:	460b      	movne	r3, r1
 8000690:	4602      	movne	r2, r0
 8000692:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000696:	bf06      	itte	eq
 8000698:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800069c:	ea91 0f03 	teqeq	r1, r3
 80006a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	bf00      	nop

080006a8 <__aeabi_ui2d>:
 80006a8:	f090 0f00 	teq	r0, #0
 80006ac:	bf04      	itt	eq
 80006ae:	2100      	moveq	r1, #0
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006bc:	f04f 0500 	mov.w	r5, #0
 80006c0:	f04f 0100 	mov.w	r1, #0
 80006c4:	e750      	b.n	8000568 <__adddf3+0x138>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	f04f 0100 	mov.w	r1, #0
 80006e8:	e73e      	b.n	8000568 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_f2d>:
 80006ec:	0042      	lsls	r2, r0, #1
 80006ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fa:	bf1f      	itttt	ne
 80006fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000700:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000704:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000708:	4770      	bxne	lr
 800070a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800070e:	bf08      	it	eq
 8000710:	4770      	bxeq	lr
 8000712:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000716:	bf04      	itt	eq
 8000718:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800071c:	4770      	bxeq	lr
 800071e:	b530      	push	{r4, r5, lr}
 8000720:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	e71c      	b.n	8000568 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_ul2d>:
 8000730:	ea50 0201 	orrs.w	r2, r0, r1
 8000734:	bf08      	it	eq
 8000736:	4770      	bxeq	lr
 8000738:	b530      	push	{r4, r5, lr}
 800073a:	f04f 0500 	mov.w	r5, #0
 800073e:	e00a      	b.n	8000756 <__aeabi_l2d+0x16>

08000740 <__aeabi_l2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800074e:	d502      	bpl.n	8000756 <__aeabi_l2d+0x16>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800075a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000762:	f43f aed8 	beq.w	8000516 <__adddf3+0xe6>
 8000766:	f04f 0203 	mov.w	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800077e:	f1c2 0320 	rsb	r3, r2, #32
 8000782:	fa00 fc03 	lsl.w	ip, r0, r3
 8000786:	fa20 f002 	lsr.w	r0, r0, r2
 800078a:	fa01 fe03 	lsl.w	lr, r1, r3
 800078e:	ea40 000e 	orr.w	r0, r0, lr
 8000792:	fa21 f102 	lsr.w	r1, r1, r2
 8000796:	4414      	add	r4, r2
 8000798:	e6bd      	b.n	8000516 <__adddf3+0xe6>
 800079a:	bf00      	nop

0800079c <__aeabi_d2iz>:
 800079c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007a4:	d215      	bcs.n	80007d2 <__aeabi_d2iz+0x36>
 80007a6:	d511      	bpl.n	80007cc <__aeabi_d2iz+0x30>
 80007a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b0:	d912      	bls.n	80007d8 <__aeabi_d2iz+0x3c>
 80007b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007c2:	fa23 f002 	lsr.w	r0, r3, r2
 80007c6:	bf18      	it	ne
 80007c8:	4240      	negne	r0, r0
 80007ca:	4770      	bx	lr
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	4770      	bx	lr
 80007d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d6:	d105      	bne.n	80007e4 <__aeabi_d2iz+0x48>
 80007d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80007dc:	bf08      	it	eq
 80007de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80007e2:	4770      	bx	lr
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop

080007ec <__aeabi_uldivmod>:
 80007ec:	b953      	cbnz	r3, 8000804 <__aeabi_uldivmod+0x18>
 80007ee:	b94a      	cbnz	r2, 8000804 <__aeabi_uldivmod+0x18>
 80007f0:	2900      	cmp	r1, #0
 80007f2:	bf08      	it	eq
 80007f4:	2800      	cmpeq	r0, #0
 80007f6:	bf1c      	itt	ne
 80007f8:	f04f 31ff 	movne.w	r1, #4294967295
 80007fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000800:	f000 b96e 	b.w	8000ae0 <__aeabi_idiv0>
 8000804:	f1ad 0c08 	sub.w	ip, sp, #8
 8000808:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800080c:	f000 f806 	bl	800081c <__udivmoddi4>
 8000810:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000814:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000818:	b004      	add	sp, #16
 800081a:	4770      	bx	lr

0800081c <__udivmoddi4>:
 800081c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000820:	9d08      	ldr	r5, [sp, #32]
 8000822:	4604      	mov	r4, r0
 8000824:	468c      	mov	ip, r1
 8000826:	2b00      	cmp	r3, #0
 8000828:	f040 8083 	bne.w	8000932 <__udivmoddi4+0x116>
 800082c:	428a      	cmp	r2, r1
 800082e:	4617      	mov	r7, r2
 8000830:	d947      	bls.n	80008c2 <__udivmoddi4+0xa6>
 8000832:	fab2 f282 	clz	r2, r2
 8000836:	b142      	cbz	r2, 800084a <__udivmoddi4+0x2e>
 8000838:	f1c2 0020 	rsb	r0, r2, #32
 800083c:	fa24 f000 	lsr.w	r0, r4, r0
 8000840:	4091      	lsls	r1, r2
 8000842:	4097      	lsls	r7, r2
 8000844:	ea40 0c01 	orr.w	ip, r0, r1
 8000848:	4094      	lsls	r4, r2
 800084a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800084e:	0c23      	lsrs	r3, r4, #16
 8000850:	fbbc f6f8 	udiv	r6, ip, r8
 8000854:	fa1f fe87 	uxth.w	lr, r7
 8000858:	fb08 c116 	mls	r1, r8, r6, ip
 800085c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000860:	fb06 f10e 	mul.w	r1, r6, lr
 8000864:	4299      	cmp	r1, r3
 8000866:	d909      	bls.n	800087c <__udivmoddi4+0x60>
 8000868:	18fb      	adds	r3, r7, r3
 800086a:	f106 30ff 	add.w	r0, r6, #4294967295
 800086e:	f080 8119 	bcs.w	8000aa4 <__udivmoddi4+0x288>
 8000872:	4299      	cmp	r1, r3
 8000874:	f240 8116 	bls.w	8000aa4 <__udivmoddi4+0x288>
 8000878:	3e02      	subs	r6, #2
 800087a:	443b      	add	r3, r7
 800087c:	1a5b      	subs	r3, r3, r1
 800087e:	b2a4      	uxth	r4, r4
 8000880:	fbb3 f0f8 	udiv	r0, r3, r8
 8000884:	fb08 3310 	mls	r3, r8, r0, r3
 8000888:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800088c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000890:	45a6      	cmp	lr, r4
 8000892:	d909      	bls.n	80008a8 <__udivmoddi4+0x8c>
 8000894:	193c      	adds	r4, r7, r4
 8000896:	f100 33ff 	add.w	r3, r0, #4294967295
 800089a:	f080 8105 	bcs.w	8000aa8 <__udivmoddi4+0x28c>
 800089e:	45a6      	cmp	lr, r4
 80008a0:	f240 8102 	bls.w	8000aa8 <__udivmoddi4+0x28c>
 80008a4:	3802      	subs	r0, #2
 80008a6:	443c      	add	r4, r7
 80008a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008ac:	eba4 040e 	sub.w	r4, r4, lr
 80008b0:	2600      	movs	r6, #0
 80008b2:	b11d      	cbz	r5, 80008bc <__udivmoddi4+0xa0>
 80008b4:	40d4      	lsrs	r4, r2
 80008b6:	2300      	movs	r3, #0
 80008b8:	e9c5 4300 	strd	r4, r3, [r5]
 80008bc:	4631      	mov	r1, r6
 80008be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c2:	b902      	cbnz	r2, 80008c6 <__udivmoddi4+0xaa>
 80008c4:	deff      	udf	#255	; 0xff
 80008c6:	fab2 f282 	clz	r2, r2
 80008ca:	2a00      	cmp	r2, #0
 80008cc:	d150      	bne.n	8000970 <__udivmoddi4+0x154>
 80008ce:	1bcb      	subs	r3, r1, r7
 80008d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008d4:	fa1f f887 	uxth.w	r8, r7
 80008d8:	2601      	movs	r6, #1
 80008da:	fbb3 fcfe 	udiv	ip, r3, lr
 80008de:	0c21      	lsrs	r1, r4, #16
 80008e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80008e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e8:	fb08 f30c 	mul.w	r3, r8, ip
 80008ec:	428b      	cmp	r3, r1
 80008ee:	d907      	bls.n	8000900 <__udivmoddi4+0xe4>
 80008f0:	1879      	adds	r1, r7, r1
 80008f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80008f6:	d202      	bcs.n	80008fe <__udivmoddi4+0xe2>
 80008f8:	428b      	cmp	r3, r1
 80008fa:	f200 80e9 	bhi.w	8000ad0 <__udivmoddi4+0x2b4>
 80008fe:	4684      	mov	ip, r0
 8000900:	1ac9      	subs	r1, r1, r3
 8000902:	b2a3      	uxth	r3, r4
 8000904:	fbb1 f0fe 	udiv	r0, r1, lr
 8000908:	fb0e 1110 	mls	r1, lr, r0, r1
 800090c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000910:	fb08 f800 	mul.w	r8, r8, r0
 8000914:	45a0      	cmp	r8, r4
 8000916:	d907      	bls.n	8000928 <__udivmoddi4+0x10c>
 8000918:	193c      	adds	r4, r7, r4
 800091a:	f100 33ff 	add.w	r3, r0, #4294967295
 800091e:	d202      	bcs.n	8000926 <__udivmoddi4+0x10a>
 8000920:	45a0      	cmp	r8, r4
 8000922:	f200 80d9 	bhi.w	8000ad8 <__udivmoddi4+0x2bc>
 8000926:	4618      	mov	r0, r3
 8000928:	eba4 0408 	sub.w	r4, r4, r8
 800092c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000930:	e7bf      	b.n	80008b2 <__udivmoddi4+0x96>
 8000932:	428b      	cmp	r3, r1
 8000934:	d909      	bls.n	800094a <__udivmoddi4+0x12e>
 8000936:	2d00      	cmp	r5, #0
 8000938:	f000 80b1 	beq.w	8000a9e <__udivmoddi4+0x282>
 800093c:	2600      	movs	r6, #0
 800093e:	e9c5 0100 	strd	r0, r1, [r5]
 8000942:	4630      	mov	r0, r6
 8000944:	4631      	mov	r1, r6
 8000946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094a:	fab3 f683 	clz	r6, r3
 800094e:	2e00      	cmp	r6, #0
 8000950:	d14a      	bne.n	80009e8 <__udivmoddi4+0x1cc>
 8000952:	428b      	cmp	r3, r1
 8000954:	d302      	bcc.n	800095c <__udivmoddi4+0x140>
 8000956:	4282      	cmp	r2, r0
 8000958:	f200 80b8 	bhi.w	8000acc <__udivmoddi4+0x2b0>
 800095c:	1a84      	subs	r4, r0, r2
 800095e:	eb61 0103 	sbc.w	r1, r1, r3
 8000962:	2001      	movs	r0, #1
 8000964:	468c      	mov	ip, r1
 8000966:	2d00      	cmp	r5, #0
 8000968:	d0a8      	beq.n	80008bc <__udivmoddi4+0xa0>
 800096a:	e9c5 4c00 	strd	r4, ip, [r5]
 800096e:	e7a5      	b.n	80008bc <__udivmoddi4+0xa0>
 8000970:	f1c2 0320 	rsb	r3, r2, #32
 8000974:	fa20 f603 	lsr.w	r6, r0, r3
 8000978:	4097      	lsls	r7, r2
 800097a:	fa01 f002 	lsl.w	r0, r1, r2
 800097e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000982:	40d9      	lsrs	r1, r3
 8000984:	4330      	orrs	r0, r6
 8000986:	0c03      	lsrs	r3, r0, #16
 8000988:	fbb1 f6fe 	udiv	r6, r1, lr
 800098c:	fa1f f887 	uxth.w	r8, r7
 8000990:	fb0e 1116 	mls	r1, lr, r6, r1
 8000994:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000998:	fb06 f108 	mul.w	r1, r6, r8
 800099c:	4299      	cmp	r1, r3
 800099e:	fa04 f402 	lsl.w	r4, r4, r2
 80009a2:	d909      	bls.n	80009b8 <__udivmoddi4+0x19c>
 80009a4:	18fb      	adds	r3, r7, r3
 80009a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80009aa:	f080 808d 	bcs.w	8000ac8 <__udivmoddi4+0x2ac>
 80009ae:	4299      	cmp	r1, r3
 80009b0:	f240 808a 	bls.w	8000ac8 <__udivmoddi4+0x2ac>
 80009b4:	3e02      	subs	r6, #2
 80009b6:	443b      	add	r3, r7
 80009b8:	1a5b      	subs	r3, r3, r1
 80009ba:	b281      	uxth	r1, r0
 80009bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80009c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80009c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009c8:	fb00 f308 	mul.w	r3, r0, r8
 80009cc:	428b      	cmp	r3, r1
 80009ce:	d907      	bls.n	80009e0 <__udivmoddi4+0x1c4>
 80009d0:	1879      	adds	r1, r7, r1
 80009d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80009d6:	d273      	bcs.n	8000ac0 <__udivmoddi4+0x2a4>
 80009d8:	428b      	cmp	r3, r1
 80009da:	d971      	bls.n	8000ac0 <__udivmoddi4+0x2a4>
 80009dc:	3802      	subs	r0, #2
 80009de:	4439      	add	r1, r7
 80009e0:	1acb      	subs	r3, r1, r3
 80009e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80009e6:	e778      	b.n	80008da <__udivmoddi4+0xbe>
 80009e8:	f1c6 0c20 	rsb	ip, r6, #32
 80009ec:	fa03 f406 	lsl.w	r4, r3, r6
 80009f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80009f4:	431c      	orrs	r4, r3
 80009f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80009fa:	fa01 f306 	lsl.w	r3, r1, r6
 80009fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a06:	431f      	orrs	r7, r3
 8000a08:	0c3b      	lsrs	r3, r7, #16
 8000a0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a0e:	fa1f f884 	uxth.w	r8, r4
 8000a12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000a1e:	458a      	cmp	sl, r1
 8000a20:	fa02 f206 	lsl.w	r2, r2, r6
 8000a24:	fa00 f306 	lsl.w	r3, r0, r6
 8000a28:	d908      	bls.n	8000a3c <__udivmoddi4+0x220>
 8000a2a:	1861      	adds	r1, r4, r1
 8000a2c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a30:	d248      	bcs.n	8000ac4 <__udivmoddi4+0x2a8>
 8000a32:	458a      	cmp	sl, r1
 8000a34:	d946      	bls.n	8000ac4 <__udivmoddi4+0x2a8>
 8000a36:	f1a9 0902 	sub.w	r9, r9, #2
 8000a3a:	4421      	add	r1, r4
 8000a3c:	eba1 010a 	sub.w	r1, r1, sl
 8000a40:	b2bf      	uxth	r7, r7
 8000a42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000a4e:	fb00 f808 	mul.w	r8, r0, r8
 8000a52:	45b8      	cmp	r8, r7
 8000a54:	d907      	bls.n	8000a66 <__udivmoddi4+0x24a>
 8000a56:	19e7      	adds	r7, r4, r7
 8000a58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a5c:	d22e      	bcs.n	8000abc <__udivmoddi4+0x2a0>
 8000a5e:	45b8      	cmp	r8, r7
 8000a60:	d92c      	bls.n	8000abc <__udivmoddi4+0x2a0>
 8000a62:	3802      	subs	r0, #2
 8000a64:	4427      	add	r7, r4
 8000a66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a6a:	eba7 0708 	sub.w	r7, r7, r8
 8000a6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000a72:	454f      	cmp	r7, r9
 8000a74:	46c6      	mov	lr, r8
 8000a76:	4649      	mov	r1, r9
 8000a78:	d31a      	bcc.n	8000ab0 <__udivmoddi4+0x294>
 8000a7a:	d017      	beq.n	8000aac <__udivmoddi4+0x290>
 8000a7c:	b15d      	cbz	r5, 8000a96 <__udivmoddi4+0x27a>
 8000a7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000a82:	eb67 0701 	sbc.w	r7, r7, r1
 8000a86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a8a:	40f2      	lsrs	r2, r6
 8000a8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000a90:	40f7      	lsrs	r7, r6
 8000a92:	e9c5 2700 	strd	r2, r7, [r5]
 8000a96:	2600      	movs	r6, #0
 8000a98:	4631      	mov	r1, r6
 8000a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9e:	462e      	mov	r6, r5
 8000aa0:	4628      	mov	r0, r5
 8000aa2:	e70b      	b.n	80008bc <__udivmoddi4+0xa0>
 8000aa4:	4606      	mov	r6, r0
 8000aa6:	e6e9      	b.n	800087c <__udivmoddi4+0x60>
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	e6fd      	b.n	80008a8 <__udivmoddi4+0x8c>
 8000aac:	4543      	cmp	r3, r8
 8000aae:	d2e5      	bcs.n	8000a7c <__udivmoddi4+0x260>
 8000ab0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ab4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ab8:	3801      	subs	r0, #1
 8000aba:	e7df      	b.n	8000a7c <__udivmoddi4+0x260>
 8000abc:	4608      	mov	r0, r1
 8000abe:	e7d2      	b.n	8000a66 <__udivmoddi4+0x24a>
 8000ac0:	4660      	mov	r0, ip
 8000ac2:	e78d      	b.n	80009e0 <__udivmoddi4+0x1c4>
 8000ac4:	4681      	mov	r9, r0
 8000ac6:	e7b9      	b.n	8000a3c <__udivmoddi4+0x220>
 8000ac8:	4666      	mov	r6, ip
 8000aca:	e775      	b.n	80009b8 <__udivmoddi4+0x19c>
 8000acc:	4630      	mov	r0, r6
 8000ace:	e74a      	b.n	8000966 <__udivmoddi4+0x14a>
 8000ad0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ad4:	4439      	add	r1, r7
 8000ad6:	e713      	b.n	8000900 <__udivmoddi4+0xe4>
 8000ad8:	3802      	subs	r0, #2
 8000ada:	443c      	add	r4, r7
 8000adc:	e724      	b.n	8000928 <__udivmoddi4+0x10c>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_idiv0>:
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * @brief:        Send Data to the APP layer to do data processing when receiving data from CAN port
 * @param[in]:    hcan: The CAN port that have data transmitted in
 * @param[out]:   rx_data: The data received from HAL layer, to be transmitted to the APP layer
 * @retvel:       None
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08c      	sub	sp, #48	; 0x30
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	uint8_t rx_data[8];

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data); //Get Data From HAL Layer
 8000aec:	f107 030c 	add.w	r3, r7, #12
 8000af0:	f107 0214 	add.w	r2, r7, #20
 8000af4:	2100      	movs	r1, #0
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f002 fb9f 	bl	800323a <HAL_CAN_GetRxMessage>

    get_motor_measure(&Motor_Message, rx_data);
 8000afc:	7b3b      	ldrb	r3, [r7, #12]
 8000afe:	021b      	lsls	r3, r3, #8
 8000b00:	b21a      	sxth	r2, r3
 8000b02:	7b7b      	ldrb	r3, [r7, #13]
 8000b04:	b21b      	sxth	r3, r3
 8000b06:	4313      	orrs	r3, r2
 8000b08:	b21b      	sxth	r3, r3
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000b0e:	801a      	strh	r2, [r3, #0]
 8000b10:	7bbb      	ldrb	r3, [r7, #14]
 8000b12:	021b      	lsls	r3, r3, #8
 8000b14:	b21a      	sxth	r2, r3
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
 8000b18:	b21b      	sxth	r3, r3
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	b21a      	sxth	r2, r3
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000b20:	805a      	strh	r2, [r3, #2]
 8000b22:	7c3b      	ldrb	r3, [r7, #16]
 8000b24:	021b      	lsls	r3, r3, #8
 8000b26:	b21a      	sxth	r2, r3
 8000b28:	7c7b      	ldrb	r3, [r7, #17]
 8000b2a:	b21b      	sxth	r3, r3
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	b21a      	sxth	r2, r3
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000b32:	809a      	strh	r2, [r3, #4]
 8000b34:	7cba      	ldrb	r2, [r7, #18]
 8000b36:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000b38:	719a      	strb	r2, [r3, #6]
}
 8000b3a:	bf00      	nop
 8000b3c:	3730      	adds	r7, #48	; 0x30
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200049a8 	.word	0x200049a8

08000b48 <APP_Send_Msg_to_Motor>:


void APP_Send_Msg_to_Motor(uint16_t speed) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	; 0x30
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80fb      	strh	r3, [r7, #6]
	uint32_t send_mail_box;
	CAN_TxHeaderTypeDef TxHeader;
	uint8_t DATA[8] = { 0 };
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]

	TxHeader.StdId = CAN_CHASSIS_ID;
 8000b5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b5e:	617b      	str	r3, [r7, #20]
	TxHeader.IDE = CAN_ID_STD;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
	TxHeader.RTR = CAN_RTR_DATA;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
	TxHeader.DLC = 0x08;
 8000b68:	2308      	movs	r3, #8
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
	DATA[0] = speed >> 8;
 8000b6c:	88fb      	ldrh	r3, [r7, #6]
 8000b6e:	0a1b      	lsrs	r3, r3, #8
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	733b      	strb	r3, [r7, #12]
	DATA[1] = speed;
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	737b      	strb	r3, [r7, #13]

	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, DATA, &send_mail_box);
 8000b7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b80:	f107 020c 	add.w	r2, r7, #12
 8000b84:	f107 0114 	add.w	r1, r7, #20
 8000b88:	4803      	ldr	r0, [pc, #12]	; (8000b98 <APP_Send_Msg_to_Motor+0x50>)
 8000b8a:	f002 fa7b 	bl	8003084 <HAL_CAN_AddTxMessage>
}
 8000b8e:	bf00      	nop
 8000b90:	3730      	adds	r7, #48	; 0x30
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20004a70 	.word	0x20004a70

08000b9c <get_side_board_data_point>:
  * @brief          return the side board data point
  * @param[in]      none
  * @retval         side board data point
  */
const motor_measure_t *get_side_board_data_point(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
    return &Motor_Message;
 8000ba0:	4b02      	ldr	r3, [pc, #8]	; (8000bac <get_side_board_data_point+0x10>)
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	200049a8 	.word	0x200049a8

08000bb0 <chassis_task>:
  *					->send all current command through CAN
  * @param[in]      pvParameters: null
  * @retval         none
  */
void chassis_task(void *pvParameters)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
    //wait for a period initially
    vTaskDelay(CHASSIS_TASK_INIT_TIME);
 8000bb8:	f240 1065 	movw	r0, #357	; 0x165
 8000bbc:	f00a f99c 	bl	800aef8 <vTaskDelay>

    //chassis initialization
    chassis_init(&motor_system);
 8000bc0:	4809      	ldr	r0, [pc, #36]	; (8000be8 <chassis_task+0x38>)
 8000bc2:	f000 f813 	bl	8000bec <chassis_init>

    while (1)
    {

        //it was included in "chassis_set_control", temporarily added for testing
        chassis_rc_to_control_vector(&motor_system);
 8000bc6:	4808      	ldr	r0, [pc, #32]	; (8000be8 <chassis_task+0x38>)
 8000bc8:	f000 f84c 	bl	8000c64 <chassis_rc_to_control_vector>

        //chassis control pid calculate
        chassis_control_loop(&motor_system);
 8000bcc:	4806      	ldr	r0, [pc, #24]	; (8000be8 <chassis_task+0x38>)
 8000bce:	f000 f917 	bl	8000e00 <chassis_control_loop>

        //send command current to motors via CAN1
        APP_Send_Msg_to_Motor(motor_system.give_current);
 8000bd2:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <chassis_task+0x38>)
 8000bd4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ffb4 	bl	8000b48 <APP_Send_Msg_to_Motor>
       // APP_Send_Msg_to_Motor(1000);

        //OS delay
        vTaskDelay(CHASSIS_CONTROL_TIME_MS);
 8000be0:	2002      	movs	r0, #2
 8000be2:	f00a f989 	bl	800aef8 <vTaskDelay>
        chassis_rc_to_control_vector(&motor_system);
 8000be6:	e7ee      	b.n	8000bc6 <chassis_task+0x16>
 8000be8:	200049b0 	.word	0x200049b0

08000bec <chassis_init>:
  *                 ->2006 chassis motor data pointer initialization
  * @param[out]     chassis_move_init: "chassis_move" pointer
  * @retval         none
  */
static void chassis_init(chassis_motor_t *chassis_move_init)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
    if (chassis_move_init == NULL)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d018      	beq.n	8000c2c <chassis_init+0x40>

    //chassis m3508 motor speed PID
    const static float32_t m3508_speed_pid[3] = {M3508_MOTOR_SPEED_PID_KP, M3508_MOTOR_SPEED_PID_KI, M3508_MOTOR_SPEED_PID_KD};
    
    //get RC data pointer
    chassis_move_init->chassis_RC = get_remote_control_point();
 8000bfa:	f000 f94d 	bl	8000e98 <get_remote_control_point>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	61da      	str	r2, [r3, #28]

	//get CAN data pointer
	chassis_move_init->wheel_measure = get_side_board_data_point();
 8000c04:	f7ff ffca 	bl	8000b9c <get_side_board_data_point>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	601a      	str	r2, [r3, #0]

	//initialize m3508 speed PID
	PID_init(&chassis_move_init->m3508_speed_pid, PID_POSITION, m3508_speed_pid, M3508_MOTOR_SPEED_PID_MAX_OUT, M3508_MOTOR_SPEED_PID_MAX_IOUT);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3330      	adds	r3, #48	; 0x30
 8000c12:	eddf 0a08 	vldr	s1, [pc, #32]	; 8000c34 <chassis_init+0x48>
 8000c16:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8000c38 <chassis_init+0x4c>
 8000c1a:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <chassis_init+0x50>)
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 fc28 	bl	8001474 <PID_init>

    //update data
    chassis_feedback_update(chassis_move_init);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f000 f80b 	bl	8000c40 <chassis_feedback_update>
 8000c2a:	e000      	b.n	8000c2e <chassis_init+0x42>
        return;
 8000c2c:	bf00      	nop

}
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	44fa0000 	.word	0x44fa0000
 8000c38:	467a0000 	.word	0x467a0000
 8000c3c:	0800cd94 	.word	0x0800cd94

08000c40 <chassis_feedback_update>:
  *                 such as rc data, euler angle, self-rotation speed, motor speed and robot speed
  * @param[out]     chassis_move_update: "chassis_move" pointer
  * @retval         none
  */
static void chassis_feedback_update(chassis_motor_t *chassis_move_update)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
    if (chassis_move_update == NULL)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d005      	beq.n	8000c5a <chassis_feedback_update+0x1a>
    {
        return;
    }

    //update the values return from remote controller
    chassis_move_update->chassis_RC = get_remote_control_point();
 8000c4e:	f000 f923 	bl	8000e98 <get_remote_control_point>
 8000c52:	4602      	mov	r2, r0
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	61da      	str	r2, [r3, #28]
 8000c58:	e000      	b.n	8000c5c <chassis_feedback_update+0x1c>
        return;
 8000c5a:	bf00      	nop
}
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <chassis_rc_to_control_vector>:
  * @param[out]     vy_set: horizontal speed set-point
  * @param[out]     chassis_move_rc_to_vector: "chassis_move" pointer
  * @retval         none
  */
void chassis_rc_to_control_vector(chassis_motor_t *chassis_move_rc_to_vector)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
    if (chassis_move_rc_to_vector == NULL)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f000 80bb 	beq.w	8000dea <chassis_rc_to_control_vector+0x186>
    
    int16_t x_channel;			//original data return from remote controller's channel 1
    int16_t y_channel;			//original data return from remote controller's channel 0
    int16_t wz_channel;

    chassis_feedback_update(chassis_move_rc_to_vector);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ffe3 	bl	8000c40 <chassis_feedback_update>

	//original data return from remote controller's channel 4

    //update the values get from remote controller
    //pay attention to the sign of "y" here
    x_channel = chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_X_CHANNEL];
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	789a      	ldrb	r2, [r3, #2]
 8000c80:	78db      	ldrb	r3, [r3, #3]
 8000c82:	021b      	lsls	r3, r3, #8
 8000c84:	4313      	orrs	r3, r2
 8000c86:	041b      	lsls	r3, r3, #16
 8000c88:	141b      	asrs	r3, r3, #16
 8000c8a:	81fb      	strh	r3, [r7, #14]
    y_channel = -chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_Y_CHANNEL];
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	69db      	ldr	r3, [r3, #28]
 8000c90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c94:	b21b      	sxth	r3, r3
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	425b      	negs	r3, r3
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	81bb      	strh	r3, [r7, #12]
    wz_channel = chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_WZ_CHANNEL];
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	7a1a      	ldrb	r2, [r3, #8]
 8000ca4:	7a5b      	ldrb	r3, [r3, #9]
 8000ca6:	021b      	lsls	r3, r3, #8
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	041b      	lsls	r3, r3, #16
 8000cac:	141b      	asrs	r3, r3, #16
 8000cae:	817b      	strh	r3, [r7, #10]

    //dead zone limit, because some remote control need be calibrated
    //the value of joy stick is not zero in middle place
    rc_deadband_limit(chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_X_CHANNEL], x_channel, CHASSIS_RC_DEADLINE);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	69db      	ldr	r3, [r3, #28]
 8000cb4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cb8:	b21b      	sxth	r3, r3
 8000cba:	2b0a      	cmp	r3, #10
 8000cbc:	dc07      	bgt.n	8000cce <chassis_rc_to_control_vector+0x6a>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cc6:	b21b      	sxth	r3, r3
 8000cc8:	f113 0f0a 	cmn.w	r3, #10
 8000ccc:	da09      	bge.n	8000ce2 <chassis_rc_to_control_vector+0x7e>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	789a      	ldrb	r2, [r3, #2]
 8000cd4:	78db      	ldrb	r3, [r3, #3]
 8000cd6:	021b      	lsls	r3, r3, #8
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	041b      	lsls	r3, r3, #16
 8000cdc:	141b      	asrs	r3, r3, #16
 8000cde:	81fb      	strh	r3, [r7, #14]
 8000ce0:	e001      	b.n	8000ce6 <chassis_rc_to_control_vector+0x82>
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	81fb      	strh	r3, [r7, #14]
    rc_deadband_limit(chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_Y_CHANNEL], y_channel, CHASSIS_RC_DEADLINE);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cee:	b21b      	sxth	r3, r3
 8000cf0:	2b0a      	cmp	r3, #10
 8000cf2:	dc07      	bgt.n	8000d04 <chassis_rc_to_control_vector+0xa0>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	69db      	ldr	r3, [r3, #28]
 8000cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cfc:	b21b      	sxth	r3, r3
 8000cfe:	f113 0f0a 	cmn.w	r3, #10
 8000d02:	da09      	bge.n	8000d18 <chassis_rc_to_control_vector+0xb4>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69db      	ldr	r3, [r3, #28]
 8000d08:	781a      	ldrb	r2, [r3, #0]
 8000d0a:	785b      	ldrb	r3, [r3, #1]
 8000d0c:	021b      	lsls	r3, r3, #8
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	041b      	lsls	r3, r3, #16
 8000d12:	141b      	asrs	r3, r3, #16
 8000d14:	81bb      	strh	r3, [r7, #12]
 8000d16:	e001      	b.n	8000d1c <chassis_rc_to_control_vector+0xb8>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	81bb      	strh	r3, [r7, #12]
    rc_deadband_limit(chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_WZ_CHANNEL], wz_channel, CHASSIS_RC_DEADLINE);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69db      	ldr	r3, [r3, #28]
 8000d20:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d24:	b21b      	sxth	r3, r3
 8000d26:	2b0a      	cmp	r3, #10
 8000d28:	dc07      	bgt.n	8000d3a <chassis_rc_to_control_vector+0xd6>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d32:	b21b      	sxth	r3, r3
 8000d34:	f113 0f0a 	cmn.w	r3, #10
 8000d38:	da09      	bge.n	8000d4e <chassis_rc_to_control_vector+0xea>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	7a1a      	ldrb	r2, [r3, #8]
 8000d40:	7a5b      	ldrb	r3, [r3, #9]
 8000d42:	021b      	lsls	r3, r3, #8
 8000d44:	4313      	orrs	r3, r2
 8000d46:	041b      	lsls	r3, r3, #16
 8000d48:	141b      	asrs	r3, r3, #16
 8000d4a:	817b      	strh	r3, [r7, #10]
 8000d4c:	e001      	b.n	8000d52 <chassis_rc_to_control_vector+0xee>
 8000d4e:	2300      	movs	r3, #0
 8000d50:	817b      	strh	r3, [r7, #10]

    chassis_move_rc_to_vector->x_channel_origin = x_channel;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	89fa      	ldrh	r2, [r7, #14]
 8000d56:	841a      	strh	r2, [r3, #32]
    chassis_move_rc_to_vector->y_channel_origin = y_channel;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	89ba      	ldrh	r2, [r7, #12]
 8000d5c:	845a      	strh	r2, [r3, #34]	; 0x22
    chassis_move_rc_to_vector->wz_channel_origin = wz_channel;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	897a      	ldrh	r2, [r7, #10]
 8000d62:	849a      	strh	r2, [r3, #36]	; 0x24
    chassis_move_rc_to_vector->x_set = x_channel * CHASSIS_X_RC_SEN;
 8000d64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d68:	ee07 3a90 	vmov	s15, r3
 8000d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d70:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000df4 <chassis_rc_to_control_vector+0x190>
 8000d74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    chassis_move_rc_to_vector->y_set = y_channel * CHASSIS_Y_RC_SEN;
 8000d7e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d82:	ee07 3a90 	vmov	s15, r3
 8000d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d8a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000df8 <chassis_rc_to_control_vector+0x194>
 8000d8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d96:	ee17 3a90 	vmov	r3, s15
 8000d9a:	b21a      	sxth	r2, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	859a      	strh	r2, [r3, #44]	; 0x2c
    chassis_move_rc_to_vector->wz_set = wz_channel * CHASSIS_WZ_RC_SEN;
 8000da0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000da4:	ee07 3a90 	vmov	s15, r3
 8000da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dac:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000df8 <chassis_rc_to_control_vector+0x194>
 8000db0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000db4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000db8:	ee17 3a90 	vmov	r3, s15
 8000dbc:	b21a      	sxth	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	85da      	strh	r2, [r3, #46]	; 0x2e

    chassis_move_rc_to_vector->speed = M3508_MOTOR_RPM_TO_VECTOR * chassis_move_rc_to_vector->wheel_measure->speed_rpm;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000dca:	ee07 3a90 	vmov	s15, r3
 8000dce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dd2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000dfc <chassis_rc_to_control_vector+0x198>
 8000dd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	edc3 7a01 	vstr	s15, [r3, #4]

    chassis_move_rc_to_vector->speed_set = chassis_move_rc_to_vector->x_set;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	e000      	b.n	8000dec <chassis_rc_to_control_vector+0x188>
        return;
 8000dea:	bf00      	nop
}
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	3bc49ba6 	.word	0x3bc49ba6
 8000df8:	3ba3d70a 	.word	0x3ba3d70a
 8000dfc:	39da010a 	.word	0x39da010a

08000e00 <chassis_control_loop>:
  *                 motor current, and motor currents will be sent to motors
  * @param[out]     chassis_move_control_loop: "chassis_move" pointer
  * @retval         none
  */
static void chassis_control_loop(chassis_motor_t *chassis_move_control_loop)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	//limit the maximum speed of m3508
//	if (chassis_move_control_loop->speed > MAX_WHEEL_SPEED){
//		chassis_move_control_loop->speed_set = MAX_WHEEL_SPEED;
//	}
	chassis_move_control_loop->current = chassis_move_control_loop->wheel_measure->given_current;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e10:	ee07 3a90 	vmov	s15, r3
 8000e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	edc3 7a03 	vstr	s15, [r3, #12]

	//speed-closed-loop of spd_motor
	chassis_move_control_loop->give_current = 1.5 * (int16_t)PID_calc(&chassis_move_control_loop->m3508_speed_pid, \
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	ed93 7a02 	vldr	s14, [r3, #8]
 8000e30:	eef0 0a47 	vmov.f32	s1, s14
 8000e34:	eeb0 0a67 	vmov.f32	s0, s15
 8000e38:	4610      	mov	r0, r2
 8000e3a:	f000 fb70 	bl	800151e <PID_calc>
 8000e3e:	eef0 7a40 	vmov.f32	s15, s0
 8000e42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e46:	ee17 3a90 	vmov	r3, s15
 8000e4a:	b21b      	sxth	r3, r3
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fc3b 	bl	80006c8 <__aeabi_i2d>
 8000e52:	f04f 0200 	mov.w	r2, #0
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <chassis_control_loop+0x78>)
 8000e58:	f7ff f9ba 	bl	80001d0 <__aeabi_dmul>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4610      	mov	r0, r2
 8000e62:	4619      	mov	r1, r3
 8000e64:	f7ff fc9a 	bl	800079c <__aeabi_d2iz>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	b21a      	sxth	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	835a      	strh	r2, [r3, #26]
			chassis_move_control_loop->speed, chassis_move_control_loop->speed_set);
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	3ff80000 	.word	0x3ff80000

08000e7c <remote_control_init>:
  * @brief          遥控器初始化
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
    RC_Init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 8000e80:	2224      	movs	r2, #36	; 0x24
 8000e82:	4903      	ldr	r1, [pc, #12]	; (8000e90 <remote_control_init+0x14>)
 8000e84:	4803      	ldr	r0, [pc, #12]	; (8000e94 <remote_control_init+0x18>)
 8000e86:	f000 fa33 	bl	80012f0 <RC_Init>
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000050 	.word	0x20000050
 8000e94:	2000002c 	.word	0x2000002c

08000e98 <get_remote_control_point>:
  * @brief          获取遥控器数据指针
  * @param[in]      none
  * @retval         遥控器数据指针
  */
const RC_ctrl_t *get_remote_control_point(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 8000e9c:	4b02      	ldr	r3, [pc, #8]	; (8000ea8 <get_remote_control_point+0x10>)
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	20004a28 	.word	0x20004a28

08000eac <USART3_IRQHandler>:
    RC_restart(SBUS_RX_BUF_NUM);
}

//串口中断
void USART3_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
    if(huart3.Instance->SR & UART_FLAG_RXNE)//接收到数据
 8000eb2:	4b47      	ldr	r3, [pc, #284]	; (8000fd0 <USART3_IRQHandler+0x124>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 0320 	and.w	r3, r3, #32
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d00b      	beq.n	8000ed8 <USART3_IRQHandler+0x2c>
    {
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	4b42      	ldr	r3, [pc, #264]	; (8000fd0 <USART3_IRQHandler+0x124>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	4b40      	ldr	r3, [pc, #256]	; (8000fd0 <USART3_IRQHandler+0x124>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
                sbus_to_usart1(sbus_rx_buf[1]);
            }
        }
    }

}
 8000ed6:	e076      	b.n	8000fc6 <USART3_IRQHandler+0x11a>
    else if(USART3->SR & UART_FLAG_IDLE)
 8000ed8:	4b3e      	ldr	r3, [pc, #248]	; (8000fd4 <USART3_IRQHandler+0x128>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f003 0310 	and.w	r3, r3, #16
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d070      	beq.n	8000fc6 <USART3_IRQHandler+0x11a>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	4b39      	ldr	r3, [pc, #228]	; (8000fd0 <USART3_IRQHandler+0x124>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	4b37      	ldr	r3, [pc, #220]	; (8000fd0 <USART3_IRQHandler+0x124>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart3_rx.Instance->CR & DMA_SxCR_CT) == RESET)
 8000efa:	4b37      	ldr	r3, [pc, #220]	; (8000fd8 <USART3_IRQHandler+0x12c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d130      	bne.n	8000f6a <USART3_IRQHandler+0xbe>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8000f08:	4b33      	ldr	r3, [pc, #204]	; (8000fd8 <USART3_IRQHandler+0x12c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	4b32      	ldr	r3, [pc, #200]	; (8000fd8 <USART3_IRQHandler+0x12c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f022 0201 	bic.w	r2, r2, #1
 8000f16:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8000f18:	4b2f      	ldr	r3, [pc, #188]	; (8000fd8 <USART3_IRQHandler+0x12c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	4b2d      	ldr	r3, [pc, #180]	; (8000fdc <USART3_IRQHandler+0x130>)
 8000f28:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8000f2a:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <USART3_IRQHandler+0x12c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2224      	movs	r2, #36	; 0x24
 8000f30:	605a      	str	r2, [r3, #4]
            hdma_usart3_rx.Instance->CR |= DMA_SxCR_CT;
 8000f32:	4b29      	ldr	r3, [pc, #164]	; (8000fd8 <USART3_IRQHandler+0x12c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b27      	ldr	r3, [pc, #156]	; (8000fd8 <USART3_IRQHandler+0x12c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000f40:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8000f42:	4b25      	ldr	r3, [pc, #148]	; (8000fd8 <USART3_IRQHandler+0x12c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <USART3_IRQHandler+0x12c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f042 0201 	orr.w	r2, r2, #1
 8000f50:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 8000f52:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <USART3_IRQHandler+0x130>)
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	2b12      	cmp	r3, #18
 8000f58:	d135      	bne.n	8000fc6 <USART3_IRQHandler+0x11a>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 8000f5a:	4921      	ldr	r1, [pc, #132]	; (8000fe0 <USART3_IRQHandler+0x134>)
 8000f5c:	4821      	ldr	r0, [pc, #132]	; (8000fe4 <USART3_IRQHandler+0x138>)
 8000f5e:	f000 f847 	bl	8000ff0 <sbus_to_rc>
                sbus_to_usart1(sbus_rx_buf[0]);
 8000f62:	4820      	ldr	r0, [pc, #128]	; (8000fe4 <USART3_IRQHandler+0x138>)
 8000f64:	f000 f952 	bl	800120c <sbus_to_usart1>
}
 8000f68:	e02d      	b.n	8000fc6 <USART3_IRQHandler+0x11a>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <USART3_IRQHandler+0x12c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <USART3_IRQHandler+0x12c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f022 0201 	bic.w	r2, r2, #1
 8000f78:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <USART3_IRQHandler+0x12c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <USART3_IRQHandler+0x130>)
 8000f8a:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <USART3_IRQHandler+0x12c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2224      	movs	r2, #36	; 0x24
 8000f92:	605a      	str	r2, [r3, #4]
            DMA1_Stream1->CR &= ~(DMA_SxCR_CT);
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <USART3_IRQHandler+0x13c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a13      	ldr	r2, [pc, #76]	; (8000fe8 <USART3_IRQHandler+0x13c>)
 8000f9a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000f9e:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <USART3_IRQHandler+0x12c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <USART3_IRQHandler+0x12c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f042 0201 	orr.w	r2, r2, #1
 8000fae:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <USART3_IRQHandler+0x130>)
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	2b12      	cmp	r3, #18
 8000fb6:	d106      	bne.n	8000fc6 <USART3_IRQHandler+0x11a>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 8000fb8:	4909      	ldr	r1, [pc, #36]	; (8000fe0 <USART3_IRQHandler+0x134>)
 8000fba:	480c      	ldr	r0, [pc, #48]	; (8000fec <USART3_IRQHandler+0x140>)
 8000fbc:	f000 f818 	bl	8000ff0 <sbus_to_rc>
                sbus_to_usart1(sbus_rx_buf[1]);
 8000fc0:	480a      	ldr	r0, [pc, #40]	; (8000fec <USART3_IRQHandler+0x140>)
 8000fc2:	f000 f923 	bl	800120c <sbus_to_usart1>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20004db8 	.word	0x20004db8
 8000fd4:	40004800 	.word	0x40004800
 8000fd8:	20004d58 	.word	0x20004d58
 8000fdc:	20000074 	.word	0x20000074
 8000fe0:	20004a28 	.word	0x20004a28
 8000fe4:	2000002c 	.word	0x2000002c
 8000fe8:	40026028 	.word	0x40026028
 8000fec:	20000050 	.word	0x20000050

08000ff0 <sbus_to_rc>:
  * @param[in]      sbus_buf: 原生数据指针
  * @param[out]     rc_ctrl: 遥控器数据指
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f000 80ff 	beq.w	8001200 <sbus_to_rc+0x210>
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	f000 80fb 	beq.w	8001200 <sbus_to_rc+0x210>
    {
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	b2db      	uxtb	r3, r3
 8001010:	b21a      	sxth	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3301      	adds	r3, #1
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	b21b      	sxth	r3, r3
 800101e:	4313      	orrs	r3, r2
 8001020:	b21b      	sxth	r3, r3
 8001022:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001026:	b21a      	sxth	r2, r3
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3301      	adds	r3, #1
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	08db      	lsrs	r3, r3, #3
 8001036:	b2db      	uxtb	r3, r3
 8001038:	b21a      	sxth	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3302      	adds	r3, #2
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	015b      	lsls	r3, r3, #5
 8001044:	b21b      	sxth	r3, r3
 8001046:	4313      	orrs	r3, r2
 8001048:	b21b      	sxth	r3, r3
 800104a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800104e:	b21a      	sxth	r2, r3
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3302      	adds	r3, #2
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	099b      	lsrs	r3, r3, #6
 800105e:	b2db      	uxtb	r3, r3
 8001060:	b21a      	sxth	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3303      	adds	r3, #3
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	b21b      	sxth	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3304      	adds	r3, #4
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	b2db      	uxtb	r3, r3
 800107a:	029b      	lsls	r3, r3, #10
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 800107c:	b21b      	sxth	r3, r3
 800107e:	4313      	orrs	r3, r2
 8001080:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8001082:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001086:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3304      	adds	r3, #4
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	085b      	lsrs	r3, r3, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	b21a      	sxth	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3305      	adds	r3, #5
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	01db      	lsls	r3, r3, #7
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  //!< Switch left
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3305      	adds	r3, #5
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	091b      	lsrs	r3, r3, #4
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3305      	adds	r3, #5
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	091b      	lsrs	r3, r3, #4
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	109b      	asrs	r3, r3, #2
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3306      	adds	r3, #6
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	b21a      	sxth	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3307      	adds	r3, #7
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	4313      	orrs	r3, r2
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3308      	adds	r3, #8
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	b21a      	sxth	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3309      	adds	r3, #9
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	b21b      	sxth	r3, r3
 8001118:	4313      	orrs	r3, r2
 800111a:	b21a      	sxth	r2, r3
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	330a      	adds	r3, #10
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	b21a      	sxth	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	330b      	adds	r3, #11
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	b21b      	sxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	b21a      	sxth	r2, r3
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Press ?
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	7b1b      	ldrb	r3, [r3, #12]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Press ?
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	7b5b      	ldrb	r3, [r3, #13]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	330e      	adds	r3, #14
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	b21a      	sxth	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	330f      	adds	r3, #15
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	b2db      	uxtb	r3, r3
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	b21b      	sxth	r3, r3
 8001168:	4313      	orrs	r3, r2
 800116a:	b21b      	sxth	r3, r3
 800116c:	b29a      	uxth	r2, r3
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //NULL
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3310      	adds	r3, #16
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	b21a      	sxth	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3311      	adds	r3, #17
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	b21b      	sxth	r3, r3
 8001188:	4313      	orrs	r3, r2
 800118a:	b21a      	sxth	r2, r3
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001196:	b21b      	sxth	r3, r3
 8001198:	b29b      	uxth	r3, r3
 800119a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800119e:	b29b      	uxth	r3, r3
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011c2:	b21b      	sxth	r3, r3
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	b21a      	sxth	r2, r3
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80011d8:	b21b      	sxth	r3, r3
 80011da:	b29b      	uxth	r3, r3
 80011dc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80011ee:	b21b      	sxth	r3, r3
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	811a      	strh	r2, [r3, #8]
 80011fe:	e000      	b.n	8001202 <sbus_to_rc+0x212>
        return;
 8001200:	bf00      	nop
}
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <sbus_to_usart1>:
  * @brief          通过usart1发送sbus数据,在usart3_IRQHandle调用
  * @param[in]      sbus: sbus数据, 18字节
  * @retval         none
  */
void sbus_to_usart1(uint8_t *sbus)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
    static uint8_t usart_tx_buf[20];
    static uint8_t i =0;
    usart_tx_buf[0] = 0xA6;
 8001214:	4b16      	ldr	r3, [pc, #88]	; (8001270 <sbus_to_usart1+0x64>)
 8001216:	22a6      	movs	r2, #166	; 0xa6
 8001218:	701a      	strb	r2, [r3, #0]
    memcpy(usart_tx_buf + 1, sbus, 18);
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <sbus_to_usart1+0x68>)
 800121c:	2212      	movs	r2, #18
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	4618      	mov	r0, r3
 8001222:	f00b fd7f 	bl	800cd24 <memcpy>
    for(i = 0, usart_tx_buf[19] = 0; i < 19; i++)
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <sbus_to_usart1+0x6c>)
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
 800122c:	4b10      	ldr	r3, [pc, #64]	; (8001270 <sbus_to_usart1+0x64>)
 800122e:	2200      	movs	r2, #0
 8001230:	74da      	strb	r2, [r3, #19]
 8001232:	e010      	b.n	8001256 <sbus_to_usart1+0x4a>
    {
        usart_tx_buf[19] += usart_tx_buf[i];
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <sbus_to_usart1+0x64>)
 8001236:	7cda      	ldrb	r2, [r3, #19]
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <sbus_to_usart1+0x6c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <sbus_to_usart1+0x64>)
 8001240:	5c5b      	ldrb	r3, [r3, r1]
 8001242:	4413      	add	r3, r2
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <sbus_to_usart1+0x64>)
 8001248:	74da      	strb	r2, [r3, #19]
    for(i = 0, usart_tx_buf[19] = 0; i < 19; i++)
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <sbus_to_usart1+0x6c>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	3301      	adds	r3, #1
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <sbus_to_usart1+0x6c>)
 8001254:	701a      	strb	r2, [r3, #0]
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <sbus_to_usart1+0x6c>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b12      	cmp	r3, #18
 800125c:	d9ea      	bls.n	8001234 <sbus_to_usart1+0x28>
    }
    usart1_tx_dma_enable(usart_tx_buf, 20);
 800125e:	2114      	movs	r1, #20
 8001260:	4803      	ldr	r0, [pc, #12]	; (8001270 <sbus_to_usart1+0x64>)
 8001262:	f000 f8a1 	bl	80013a8 <usart1_tx_dma_enable>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000078 	.word	0x20000078
 8001274:	20000079 	.word	0x20000079
 8001278:	2000008c 	.word	0x2000008c

0800127c <can_filter_init>:
  * @brief		initialize CAN1 and CAN2 (to active receiving)
  * @param		none
  * @retval		none
  */
void can_filter_init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 8001282:	2301      	movs	r3, #1
 8001284:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 800128a:	2301      	movs	r3, #1
 800128c:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 800128e:	2300      	movs	r3, #0
 8001290:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 80012a6:	463b      	mov	r3, r7
 80012a8:	4619      	mov	r1, r3
 80012aa:	480f      	ldr	r0, [pc, #60]	; (80012e8 <can_filter_init+0x6c>)
 80012ac:	f001 fdc6 	bl	8002e3c <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 80012b0:	480d      	ldr	r0, [pc, #52]	; (80012e8 <can_filter_init+0x6c>)
 80012b2:	f001 fea3 	bl	8002ffc <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80012b6:	2102      	movs	r1, #2
 80012b8:	480b      	ldr	r0, [pc, #44]	; (80012e8 <can_filter_init+0x6c>)
 80012ba:	f002 f8d0 	bl	800345e <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 14;
 80012be:	230e      	movs	r3, #14
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
    can_filter_st.FilterBank = 14;
 80012c2:	230e      	movs	r3, #14
 80012c4:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 80012c6:	463b      	mov	r3, r7
 80012c8:	4619      	mov	r1, r3
 80012ca:	4808      	ldr	r0, [pc, #32]	; (80012ec <can_filter_init+0x70>)
 80012cc:	f001 fdb6 	bl	8002e3c <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 80012d0:	4806      	ldr	r0, [pc, #24]	; (80012ec <can_filter_init+0x70>)
 80012d2:	f001 fe93 	bl	8002ffc <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80012d6:	2102      	movs	r1, #2
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <can_filter_init+0x70>)
 80012da:	f002 f8c0 	bl	800345e <HAL_CAN_ActivateNotification>
}
 80012de:	bf00      	nop
 80012e0:	3728      	adds	r7, #40	; 0x28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20004a70 	.word	0x20004a70
 80012ec:	20004a48 	.word	0x20004a48

080012f0 <RC_Init>:
  * @param[in]      rx2_buf: memory buffer 2
  * @param[in]      dma_buf_num: data length
  * @retval         none
  */
void RC_Init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	4613      	mov	r3, r2
 80012fc:	80fb      	strh	r3, [r7, #6]

    //enable the DMA transfer for the receiver request
    SET_BIT(huart3.Instance->CR3, USART_CR3_DMAR);
 80012fe:	4b27      	ldr	r3, [pc, #156]	; (800139c <RC_Init+0xac>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	695a      	ldr	r2, [r3, #20]
 8001304:	4b25      	ldr	r3, [pc, #148]	; (800139c <RC_Init+0xac>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800130c:	615a      	str	r2, [r3, #20]

    //enable idle interrupt
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 800130e:	4b23      	ldr	r3, [pc, #140]	; (800139c <RC_Init+0xac>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68da      	ldr	r2, [r3, #12]
 8001314:	4b21      	ldr	r3, [pc, #132]	; (800139c <RC_Init+0xac>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f042 0210 	orr.w	r2, r2, #16
 800131c:	60da      	str	r2, [r3, #12]

    //disable DMA
    __HAL_DMA_DISABLE(&hdma_usart3_rx);
 800131e:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <RC_Init+0xb0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <RC_Init+0xb0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0201 	bic.w	r2, r2, #1
 800132c:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN)
 800132e:	e007      	b.n	8001340 <RC_Init+0x50>
    {
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8001330:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <RC_Init+0xb0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <RC_Init+0xb0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0201 	bic.w	r2, r2, #1
 800133e:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN)
 8001340:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <RC_Init+0xb0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <RC_Init+0x40>
    }

    hdma_usart3_rx.Instance->PAR = (uint32_t) & (USART3->DR);
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <RC_Init+0xb0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <RC_Init+0xb4>)
 8001354:	609a      	str	r2, [r3, #8]
    //memory buffer 1
    hdma_usart3_rx.Instance->M0AR = (uint32_t)(rx1_buf);
 8001356:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <RC_Init+0xb0>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	60da      	str	r2, [r3, #12]
    //memory buffer 2
    hdma_usart3_rx.Instance->M1AR = (uint32_t)(rx2_buf);
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <RC_Init+0xb0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	611a      	str	r2, [r3, #16]
    //data length
    hdma_usart3_rx.Instance->NDTR = dma_buf_num;
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <RC_Init+0xb0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	88fa      	ldrh	r2, [r7, #6]
 800136c:	605a      	str	r2, [r3, #4]
    //enable double memory buffer
    SET_BIT(hdma_usart3_rx.Instance->CR, DMA_SxCR_DBM);
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <RC_Init+0xb0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <RC_Init+0xb0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800137c:	601a      	str	r2, [r3, #0]

    //enable DMA
    __HAL_DMA_ENABLE(&hdma_usart3_rx);
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <RC_Init+0xb0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <RC_Init+0xb0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f042 0201 	orr.w	r2, r2, #1
 800138c:	601a      	str	r2, [r3, #0]
}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20004db8 	.word	0x20004db8
 80013a0:	20004d58 	.word	0x20004d58
 80013a4:	40004804 	.word	0x40004804

080013a8 <usart1_tx_dma_enable>:
    hdma_usart1_tx.Instance->NDTR = 0;


}
void usart1_tx_dma_enable(uint8_t *data, uint16_t len)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	460b      	mov	r3, r1
 80013b2:	807b      	strh	r3, [r7, #2]
    //disable DMA
    //ʧЧDMA
    __HAL_DMA_DISABLE(&hdma_usart1_tx);
 80013b4:	4b29      	ldr	r3, [pc, #164]	; (800145c <usart1_tx_dma_enable+0xb4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	4b28      	ldr	r3, [pc, #160]	; (800145c <usart1_tx_dma_enable+0xb4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 0201 	bic.w	r2, r2, #1
 80013c2:	601a      	str	r2, [r3, #0]

    while(hdma_usart1_tx.Instance->CR & DMA_SxCR_EN)
 80013c4:	e007      	b.n	80013d6 <usart1_tx_dma_enable+0x2e>
    {
        __HAL_DMA_DISABLE(&hdma_usart1_tx);
 80013c6:	4b25      	ldr	r3, [pc, #148]	; (800145c <usart1_tx_dma_enable+0xb4>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b23      	ldr	r3, [pc, #140]	; (800145c <usart1_tx_dma_enable+0xb4>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 0201 	bic.w	r2, r2, #1
 80013d4:	601a      	str	r2, [r3, #0]
    while(hdma_usart1_tx.Instance->CR & DMA_SxCR_EN)
 80013d6:	4b21      	ldr	r3, [pc, #132]	; (800145c <usart1_tx_dma_enable+0xb4>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1f0      	bne.n	80013c6 <usart1_tx_dma_enable+0x1e>
    }

    __HAL_DMA_CLEAR_FLAG(&hdma_usart1_tx, DMA_HISR_TCIF7);
 80013e4:	4b1d      	ldr	r3, [pc, #116]	; (800145c <usart1_tx_dma_enable+0xb4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <usart1_tx_dma_enable+0xb8>)
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d904      	bls.n	80013fa <usart1_tx_dma_enable+0x52>
 80013f0:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <usart1_tx_dma_enable+0xbc>)
 80013f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013f6:	60da      	str	r2, [r3, #12]
 80013f8:	e019      	b.n	800142e <usart1_tx_dma_enable+0x86>
 80013fa:	4b18      	ldr	r3, [pc, #96]	; (800145c <usart1_tx_dma_enable+0xb4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <usart1_tx_dma_enable+0xc0>)
 8001402:	429a      	cmp	r2, r3
 8001404:	d904      	bls.n	8001410 <usart1_tx_dma_enable+0x68>
 8001406:	4a17      	ldr	r2, [pc, #92]	; (8001464 <usart1_tx_dma_enable+0xbc>)
 8001408:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800140c:	6093      	str	r3, [r2, #8]
 800140e:	e00e      	b.n	800142e <usart1_tx_dma_enable+0x86>
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <usart1_tx_dma_enable+0xb4>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	461a      	mov	r2, r3
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <usart1_tx_dma_enable+0xc4>)
 8001418:	429a      	cmp	r2, r3
 800141a:	d904      	bls.n	8001426 <usart1_tx_dma_enable+0x7e>
 800141c:	4a14      	ldr	r2, [pc, #80]	; (8001470 <usart1_tx_dma_enable+0xc8>)
 800141e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001422:	60d3      	str	r3, [r2, #12]
 8001424:	e003      	b.n	800142e <usart1_tx_dma_enable+0x86>
 8001426:	4a12      	ldr	r2, [pc, #72]	; (8001470 <usart1_tx_dma_enable+0xc8>)
 8001428:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800142c:	6093      	str	r3, [r2, #8]

    hdma_usart1_tx.Instance->M0AR = (uint32_t)(data);
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <usart1_tx_dma_enable+0xb4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	60da      	str	r2, [r3, #12]
    __HAL_DMA_SET_COUNTER(&hdma_usart1_tx, len);
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <usart1_tx_dma_enable+0xb4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	887a      	ldrh	r2, [r7, #2]
 800143c:	605a      	str	r2, [r3, #4]

    __HAL_DMA_ENABLE(&hdma_usart1_tx);
 800143e:	4b07      	ldr	r3, [pc, #28]	; (800145c <usart1_tx_dma_enable+0xb4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <usart1_tx_dma_enable+0xb4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f042 0201 	orr.w	r2, r2, #1
 800144c:	601a      	str	r2, [r3, #0]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20004dfc 	.word	0x20004dfc
 8001460:	40026458 	.word	0x40026458
 8001464:	40026400 	.word	0x40026400
 8001468:	400260b8 	.word	0x400260b8
 800146c:	40026058 	.word	0x40026058
 8001470:	40026000 	.word	0x40026000

08001474 <PID_init>:
  * @param[in]      max_out: pid max output
  * @param[in]      max_iout: pid max integration output
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float32_t PID[3], float32_t max_out, float32_t max_iout)
{
 8001474:	b480      	push	{r7}
 8001476:	b087      	sub	sp, #28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6178      	str	r0, [r7, #20]
 800147c:	460b      	mov	r3, r1
 800147e:	60fa      	str	r2, [r7, #12]
 8001480:	ed87 0a02 	vstr	s0, [r7, #8]
 8001484:	edc7 0a01 	vstr	s1, [r7, #4]
 8001488:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d040      	beq.n	8001512 <PID_init+0x9e>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d03d      	beq.n	8001512 <PID_init+0x9e>
    {
        return;
    }
    pid->mode = mode;
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	7cfa      	ldrb	r2, [r7, #19]
 800149a:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	639a      	str	r2, [r3, #56]	; 0x38
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	635a      	str	r2, [r3, #52]	; 0x34
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	631a      	str	r2, [r3, #48]	; 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	621a      	str	r2, [r3, #32]
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	6a1a      	ldr	r2, [r3, #32]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	629a      	str	r2, [r3, #40]	; 0x28
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	625a      	str	r2, [r3, #36]	; 0x24
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	645a      	str	r2, [r3, #68]	; 0x44
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	641a      	str	r2, [r3, #64]	; 0x40
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001510:	e000      	b.n	8001514 <PID_init+0xa0>
        return;
 8001512:	bf00      	nop
}
 8001514:	371c      	adds	r7, #28
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <PID_calc>:
  * @param[in]      ref: feedback data 
  * @param[in]      set: setting value
  * @retval         pid output
  */
float32_t PID_calc(pid_type_def *pid, float32_t ref, float32_t set)
{
 800151e:	b480      	push	{r7}
 8001520:	b085      	sub	sp, #20
 8001522:	af00      	add	r7, sp, #0
 8001524:	60f8      	str	r0, [r7, #12]
 8001526:	ed87 0a02 	vstr	s0, [r7, #8]
 800152a:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d102      	bne.n	800153a <PID_calc+0x1c>
    {
        return 0.0f;
 8001534:	f04f 0300 	mov.w	r3, #0
 8001538:	e130      	b.n	800179c <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	645a      	str	r2, [r3, #68]	; 0x44
    pid->error[1] = pid->error[0];
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	641a      	str	r2, [r3, #64]	; 0x40
    pid->set = set;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 8001556:	ed97 7a01 	vldr	s14, [r7, #4]
 800155a:	edd7 7a02 	vldr	s15, [r7, #8]
 800155e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    if (pid->mode == PID_POSITION)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	f040 8095 	bne.w	800169c <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	ed93 7a01 	vldr	s14, [r3, #4]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800157e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        pid->Iout += pid->Ki * pid->error[0];
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	edd3 6a02 	vldr	s13, [r3, #8]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800159a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800159e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	639a      	str	r2, [r3, #56]	; 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	635a      	str	r2, [r3, #52]	; 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80015c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	ed93 7a03 	vldr	s14, [r3, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80015da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80015f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f8:	dd04      	ble.n	8001604 <PID_calc+0xe6>
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	695a      	ldr	r2, [r3, #20]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	629a      	str	r2, [r3, #40]	; 0x28
 8001602:	e014      	b.n	800162e <PID_calc+0x110>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001610:	eef1 7a67 	vneg.f32	s15, s15
 8001614:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161c:	d507      	bpl.n	800162e <PID_calc+0x110>
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	edd3 7a05 	vldr	s15, [r3, #20]
 8001624:	eef1 7a67 	vneg.f32	s15, s15
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800163a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	ed93 7a08 	vldr	s14, [r3, #32]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	edd3 7a04 	vldr	s15, [r3, #16]
 800165a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800165e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001662:	dd04      	ble.n	800166e <PID_calc+0x150>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	691a      	ldr	r2, [r3, #16]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	621a      	str	r2, [r3, #32]
 800166c:	e094      	b.n	8001798 <PID_calc+0x27a>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	ed93 7a08 	vldr	s14, [r3, #32]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	edd3 7a04 	vldr	s15, [r3, #16]
 800167a:	eef1 7a67 	vneg.f32	s15, s15
 800167e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001686:	f140 8087 	bpl.w	8001798 <PID_calc+0x27a>
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001690:	eef1 7a67 	vneg.f32	s15, s15
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	edc3 7a08 	vstr	s15, [r3, #32]
 800169a:	e07d      	b.n	8001798 <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d179      	bne.n	8001798 <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	ed93 7a01 	vldr	s14, [r3, #4]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80016b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        pid->Iout = pid->Ki * pid->error[0];
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	ed93 7a02 	vldr	s14, [r3, #8]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80016d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	639a      	str	r2, [r3, #56]	; 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	635a      	str	r2, [r3, #52]	; 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80016f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001704:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	ed93 7a03 	vldr	s14, [r3, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800171a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	ed93 7a08 	vldr	s14, [r3, #32]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001736:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001740:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001744:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	ed93 7a08 	vldr	s14, [r3, #32]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	edd3 7a04 	vldr	s15, [r3, #16]
 800175a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800175e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001762:	dd04      	ble.n	800176e <PID_calc+0x250>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	691a      	ldr	r2, [r3, #16]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	621a      	str	r2, [r3, #32]
 800176c:	e014      	b.n	8001798 <PID_calc+0x27a>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	ed93 7a08 	vldr	s14, [r3, #32]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	edd3 7a04 	vldr	s15, [r3, #16]
 800177a:	eef1 7a67 	vneg.f32	s15, s15
 800177e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001786:	d507      	bpl.n	8001798 <PID_calc+0x27a>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	edd3 7a04 	vldr	s15, [r3, #16]
 800178e:	eef1 7a67 	vneg.f32	s15, s15
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	ee07 3a90 	vmov	s15, r3
}
 80017a0:	eeb0 0a67 	vmov.f32	s0, s15
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80017b4:	4b17      	ldr	r3, [pc, #92]	; (8001814 <MX_CAN1_Init+0x64>)
 80017b6:	4a18      	ldr	r2, [pc, #96]	; (8001818 <MX_CAN1_Init+0x68>)
 80017b8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80017ba:	4b16      	ldr	r3, [pc, #88]	; (8001814 <MX_CAN1_Init+0x64>)
 80017bc:	2203      	movs	r2, #3
 80017be:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80017c0:	4b14      	ldr	r3, [pc, #80]	; (8001814 <MX_CAN1_Init+0x64>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <MX_CAN1_Init+0x64>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <MX_CAN1_Init+0x64>)
 80017ce:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80017d2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <MX_CAN1_Init+0x64>)
 80017d6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017da:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80017dc:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <MX_CAN1_Init+0x64>)
 80017de:	2200      	movs	r2, #0
 80017e0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <MX_CAN1_Init+0x64>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <MX_CAN1_Init+0x64>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <MX_CAN1_Init+0x64>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <MX_CAN1_Init+0x64>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <MX_CAN1_Init+0x64>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001800:	4804      	ldr	r0, [pc, #16]	; (8001814 <MX_CAN1_Init+0x64>)
 8001802:	f001 fa1f 	bl	8002c44 <HAL_CAN_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800180c:	f000 fada 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20004a70 	.word	0x20004a70
 8001818:	40006400 	.word	0x40006400

0800181c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001820:	4b17      	ldr	r3, [pc, #92]	; (8001880 <MX_CAN2_Init+0x64>)
 8001822:	4a18      	ldr	r2, [pc, #96]	; (8001884 <MX_CAN2_Init+0x68>)
 8001824:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8001826:	4b16      	ldr	r3, [pc, #88]	; (8001880 <MX_CAN2_Init+0x64>)
 8001828:	2203      	movs	r2, #3
 800182a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <MX_CAN2_Init+0x64>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <MX_CAN2_Init+0x64>)
 8001834:	2200      	movs	r2, #0
 8001836:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <MX_CAN2_Init+0x64>)
 800183a:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800183e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <MX_CAN2_Init+0x64>)
 8001842:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001846:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001848:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <MX_CAN2_Init+0x64>)
 800184a:	2200      	movs	r2, #0
 800184c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800184e:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <MX_CAN2_Init+0x64>)
 8001850:	2200      	movs	r2, #0
 8001852:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001854:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <MX_CAN2_Init+0x64>)
 8001856:	2200      	movs	r2, #0
 8001858:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <MX_CAN2_Init+0x64>)
 800185c:	2200      	movs	r2, #0
 800185e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001860:	4b07      	ldr	r3, [pc, #28]	; (8001880 <MX_CAN2_Init+0x64>)
 8001862:	2200      	movs	r2, #0
 8001864:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001866:	4b06      	ldr	r3, [pc, #24]	; (8001880 <MX_CAN2_Init+0x64>)
 8001868:	2200      	movs	r2, #0
 800186a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800186c:	4804      	ldr	r0, [pc, #16]	; (8001880 <MX_CAN2_Init+0x64>)
 800186e:	f001 f9e9 	bl	8002c44 <HAL_CAN_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001878:	f000 faa4 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20004a48 	.word	0x20004a48
 8001884:	40006800 	.word	0x40006800

08001888 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08c      	sub	sp, #48	; 0x30
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 031c 	add.w	r3, r7, #28
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a52      	ldr	r2, [pc, #328]	; (80019f0 <HAL_CAN_MspInit+0x168>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d145      	bne.n	8001936 <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80018aa:	4b52      	ldr	r3, [pc, #328]	; (80019f4 <HAL_CAN_MspInit+0x16c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	3301      	adds	r3, #1
 80018b0:	4a50      	ldr	r2, [pc, #320]	; (80019f4 <HAL_CAN_MspInit+0x16c>)
 80018b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80018b4:	4b4f      	ldr	r3, [pc, #316]	; (80019f4 <HAL_CAN_MspInit+0x16c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d10d      	bne.n	80018d8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80018bc:	2300      	movs	r3, #0
 80018be:	61bb      	str	r3, [r7, #24]
 80018c0:	4b4d      	ldr	r3, [pc, #308]	; (80019f8 <HAL_CAN_MspInit+0x170>)
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	4a4c      	ldr	r2, [pc, #304]	; (80019f8 <HAL_CAN_MspInit+0x170>)
 80018c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018ca:	6413      	str	r3, [r2, #64]	; 0x40
 80018cc:	4b4a      	ldr	r3, [pc, #296]	; (80019f8 <HAL_CAN_MspInit+0x170>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d4:	61bb      	str	r3, [r7, #24]
 80018d6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	4b46      	ldr	r3, [pc, #280]	; (80019f8 <HAL_CAN_MspInit+0x170>)
 80018de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e0:	4a45      	ldr	r2, [pc, #276]	; (80019f8 <HAL_CAN_MspInit+0x170>)
 80018e2:	f043 0308 	orr.w	r3, r3, #8
 80018e6:	6313      	str	r3, [r2, #48]	; 0x30
 80018e8:	4b43      	ldr	r3, [pc, #268]	; (80019f8 <HAL_CAN_MspInit+0x170>)
 80018ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018f4:	2303      	movs	r3, #3
 80018f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001900:	2303      	movs	r3, #3
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001904:	2309      	movs	r3, #9
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001908:	f107 031c 	add.w	r3, r7, #28
 800190c:	4619      	mov	r1, r3
 800190e:	483b      	ldr	r0, [pc, #236]	; (80019fc <HAL_CAN_MspInit+0x174>)
 8001910:	f002 fc58 	bl	80041c4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001914:	2200      	movs	r2, #0
 8001916:	2105      	movs	r1, #5
 8001918:	2013      	movs	r0, #19
 800191a:	f002 f8ad 	bl	8003a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800191e:	2013      	movs	r0, #19
 8001920:	f002 f8c6 	bl	8003ab0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001924:	2200      	movs	r2, #0
 8001926:	2105      	movs	r1, #5
 8001928:	2014      	movs	r0, #20
 800192a:	f002 f8a5 	bl	8003a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800192e:	2014      	movs	r0, #20
 8001930:	f002 f8be 	bl	8003ab0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001934:	e058      	b.n	80019e8 <HAL_CAN_MspInit+0x160>
  else if(canHandle->Instance==CAN2)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a31      	ldr	r2, [pc, #196]	; (8001a00 <HAL_CAN_MspInit+0x178>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d153      	bne.n	80019e8 <HAL_CAN_MspInit+0x160>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001940:	2300      	movs	r3, #0
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	4b2c      	ldr	r3, [pc, #176]	; (80019f8 <HAL_CAN_MspInit+0x170>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	4a2b      	ldr	r2, [pc, #172]	; (80019f8 <HAL_CAN_MspInit+0x170>)
 800194a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800194e:	6413      	str	r3, [r2, #64]	; 0x40
 8001950:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <HAL_CAN_MspInit+0x170>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800195c:	4b25      	ldr	r3, [pc, #148]	; (80019f4 <HAL_CAN_MspInit+0x16c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	3301      	adds	r3, #1
 8001962:	4a24      	ldr	r2, [pc, #144]	; (80019f4 <HAL_CAN_MspInit+0x16c>)
 8001964:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001966:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <HAL_CAN_MspInit+0x16c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d10d      	bne.n	800198a <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <HAL_CAN_MspInit+0x170>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	4a20      	ldr	r2, [pc, #128]	; (80019f8 <HAL_CAN_MspInit+0x170>)
 8001978:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800197c:	6413      	str	r3, [r2, #64]	; 0x40
 800197e:	4b1e      	ldr	r3, [pc, #120]	; (80019f8 <HAL_CAN_MspInit+0x170>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <HAL_CAN_MspInit+0x170>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a19      	ldr	r2, [pc, #100]	; (80019f8 <HAL_CAN_MspInit+0x170>)
 8001994:	f043 0302 	orr.w	r3, r3, #2
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <HAL_CAN_MspInit+0x170>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_13;
 80019a6:	f242 0320 	movw	r3, #8224	; 0x2020
 80019aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b4:	2303      	movs	r3, #3
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80019b8:	2309      	movs	r3, #9
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019bc:	f107 031c 	add.w	r3, r7, #28
 80019c0:	4619      	mov	r1, r3
 80019c2:	4810      	ldr	r0, [pc, #64]	; (8001a04 <HAL_CAN_MspInit+0x17c>)
 80019c4:	f002 fbfe 	bl	80041c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 80019c8:	2200      	movs	r2, #0
 80019ca:	2105      	movs	r1, #5
 80019cc:	203f      	movs	r0, #63	; 0x3f
 80019ce:	f002 f853 	bl	8003a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 80019d2:	203f      	movs	r0, #63	; 0x3f
 80019d4:	f002 f86c 	bl	8003ab0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 80019d8:	2200      	movs	r2, #0
 80019da:	2105      	movs	r1, #5
 80019dc:	2040      	movs	r0, #64	; 0x40
 80019de:	f002 f84b 	bl	8003a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80019e2:	2040      	movs	r0, #64	; 0x40
 80019e4:	f002 f864 	bl	8003ab0 <HAL_NVIC_EnableIRQ>
}
 80019e8:	bf00      	nop
 80019ea:	3730      	adds	r7, #48	; 0x30
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40006400 	.word	0x40006400
 80019f4:	20000090 	.word	0x20000090
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40020c00 	.word	0x40020c00
 8001a00:	40006800 	.word	0x40006800
 8001a04:	40020400 	.word	0x40020400

08001a08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <MX_DMA_Init+0xa8>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a26      	ldr	r2, [pc, #152]	; (8001ab0 <MX_DMA_Init+0xa8>)
 8001a18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <MX_DMA_Init+0xa8>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	603b      	str	r3, [r7, #0]
 8001a2e:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <MX_DMA_Init+0xa8>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a1f      	ldr	r2, [pc, #124]	; (8001ab0 <MX_DMA_Init+0xa8>)
 8001a34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <MX_DMA_Init+0xa8>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2105      	movs	r1, #5
 8001a4a:	200c      	movs	r0, #12
 8001a4c:	f002 f814 	bl	8003a78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001a50:	200c      	movs	r0, #12
 8001a52:	f002 f82d 	bl	8003ab0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2105      	movs	r1, #5
 8001a5a:	2039      	movs	r0, #57	; 0x39
 8001a5c:	f002 f80c 	bl	8003a78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001a60:	2039      	movs	r0, #57	; 0x39
 8001a62:	f002 f825 	bl	8003ab0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2105      	movs	r1, #5
 8001a6a:	203a      	movs	r0, #58	; 0x3a
 8001a6c:	f002 f804 	bl	8003a78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a70:	203a      	movs	r0, #58	; 0x3a
 8001a72:	f002 f81d 	bl	8003ab0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2105      	movs	r1, #5
 8001a7a:	203b      	movs	r0, #59	; 0x3b
 8001a7c:	f001 fffc 	bl	8003a78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001a80:	203b      	movs	r0, #59	; 0x3b
 8001a82:	f002 f815 	bl	8003ab0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2105      	movs	r1, #5
 8001a8a:	2045      	movs	r0, #69	; 0x45
 8001a8c:	f001 fff4 	bl	8003a78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001a90:	2045      	movs	r0, #69	; 0x45
 8001a92:	f002 f80d 	bl	8003ab0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2105      	movs	r1, #5
 8001a9a:	2046      	movs	r0, #70	; 0x46
 8001a9c:	f001 ffec 	bl	8003a78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001aa0:	2046      	movs	r0, #70	; 0x46
 8001aa2:	f002 f805 	bl	8003ab0 <HAL_NVIC_EnableIRQ>

}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800

08001ab4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ChassisTask */
  ChassisTaskHandle = osThreadNew(chassis_task, NULL, &ChassisTask_attributes);
 8001ab8:	4a08      	ldr	r2, [pc, #32]	; (8001adc <MX_FREERTOS_Init+0x28>)
 8001aba:	2100      	movs	r1, #0
 8001abc:	4808      	ldr	r0, [pc, #32]	; (8001ae0 <MX_FREERTOS_Init+0x2c>)
 8001abe:	f008 f9f7 	bl	8009eb0 <osThreadNew>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4a07      	ldr	r2, [pc, #28]	; (8001ae4 <MX_FREERTOS_Init+0x30>)
 8001ac6:	6013      	str	r3, [r2, #0]

  /* creation of IMUTask */
  IMUTaskHandle = osThreadNew(INS_task1, NULL, &IMUTask_attributes);
 8001ac8:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <MX_FREERTOS_Init+0x34>)
 8001aca:	2100      	movs	r1, #0
 8001acc:	4807      	ldr	r0, [pc, #28]	; (8001aec <MX_FREERTOS_Init+0x38>)
 8001ace:	f008 f9ef 	bl	8009eb0 <osThreadNew>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4a06      	ldr	r2, [pc, #24]	; (8001af0 <MX_FREERTOS_Init+0x3c>)
 8001ad6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	0800cda0 	.word	0x0800cda0
 8001ae0:	08000bb1 	.word	0x08000bb1
 8001ae4:	20004a9c 	.word	0x20004a9c
 8001ae8:	0800cdc4 	.word	0x0800cdc4
 8001aec:	08001af5 	.word	0x08001af5
 8001af0:	20004a98 	.word	0x20004a98

08001af4 <INS_task1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_INS_task1 */
__weak void INS_task1(void *argument)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN INS_task1 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001afc:	2001      	movs	r0, #1
 8001afe:	f008 fa69 	bl	8009fd4 <osDelay>
 8001b02:	e7fb      	b.n	8001afc <INS_task1+0x8>

08001b04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08c      	sub	sp, #48	; 0x30
 8001b08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0a:	f107 031c 	add.w	r3, r7, #28
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
 8001b18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
 8001b1e:	4b46      	ldr	r3, [pc, #280]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a45      	ldr	r2, [pc, #276]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b43      	ldr	r3, [pc, #268]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	61bb      	str	r3, [r7, #24]
 8001b34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	4b3f      	ldr	r3, [pc, #252]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a3e      	ldr	r2, [pc, #248]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b3c      	ldr	r3, [pc, #240]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	4b38      	ldr	r3, [pc, #224]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a37      	ldr	r2, [pc, #220]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b35      	ldr	r3, [pc, #212]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	4b31      	ldr	r3, [pc, #196]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a30      	ldr	r2, [pc, #192]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001b78:	f043 0308 	orr.w	r3, r3, #8
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b2e      	ldr	r3, [pc, #184]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	4b2a      	ldr	r3, [pc, #168]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a29      	ldr	r2, [pc, #164]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001b94:	f043 0304 	orr.w	r3, r3, #4
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	4b23      	ldr	r3, [pc, #140]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a22      	ldr	r2, [pc, #136]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b20      	ldr	r3, [pc, #128]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bc8:	481c      	ldr	r0, [pc, #112]	; (8001c3c <MX_GPIO_Init+0x138>)
 8001bca:	f002 fc97 	bl	80044fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bd4:	481a      	ldr	r0, [pc, #104]	; (8001c40 <MX_GPIO_Init+0x13c>)
 8001bd6:	f002 fc91 	bl	80044fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be0:	2301      	movs	r3, #1
 8001be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be8:	2300      	movs	r3, #0
 8001bea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bec:	f107 031c 	add.w	r3, r7, #28
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4812      	ldr	r0, [pc, #72]	; (8001c3c <MX_GPIO_Init+0x138>)
 8001bf4:	f002 fae6 	bl	80041c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	2300      	movs	r3, #0
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	4619      	mov	r1, r3
 8001c10:	480b      	ldr	r0, [pc, #44]	; (8001c40 <MX_GPIO_Init+0x13c>)
 8001c12:	f002 fad7 	bl	80041c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c24:	f107 031c 	add.w	r3, r7, #28
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4806      	ldr	r0, [pc, #24]	; (8001c44 <MX_GPIO_Init+0x140>)
 8001c2c:	f002 faca 	bl	80041c4 <HAL_GPIO_Init>

}
 8001c30:	bf00      	nop
 8001c32:	3730      	adds	r7, #48	; 0x30
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40020400 	.word	0x40020400
 8001c40:	40020000 	.word	0x40020000
 8001c44:	40020800 	.word	0x40020800

08001c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c4c:	f000 ffb8 	bl	8002bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c50:	f000 f824 	bl	8001c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c54:	f7ff ff56 	bl	8001b04 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c58:	f7ff fed6 	bl	8001a08 <MX_DMA_Init>
  MX_CAN1_Init();
 8001c5c:	f7ff fda8 	bl	80017b0 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001c60:	f7ff fddc 	bl	800181c <MX_CAN2_Init>
  MX_RTC_Init();
 8001c64:	f000 f8b4 	bl	8001dd0 <MX_RTC_Init>
  MX_TIM4_Init();
 8001c68:	f000 fb2c 	bl	80022c4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001c6c:	f000 fbac 	bl	80023c8 <MX_TIM5_Init>
  MX_TIM12_Init();
 8001c70:	f000 fc1a 	bl	80024a8 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001c74:	f000 fd5e 	bl	8002734 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001c78:	f000 fd86 	bl	8002788 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001c7c:	f000 f8e4 	bl	8001e48 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 8001c80:	f000 fdac 	bl	80027dc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  can_filter_init();
 8001c84:	f7ff fafa 	bl	800127c <can_filter_init>
  remote_control_init();
 8001c88:	f7ff f8f8 	bl	8000e7c <remote_control_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001c8c:	f008 f8c6 	bl	8009e1c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001c90:	f7ff ff10 	bl	8001ab4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001c94:	f008 f8e6 	bl	8009e64 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c98:	e7fe      	b.n	8001c98 <main+0x50>
	...

08001c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b098      	sub	sp, #96	; 0x60
 8001ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ca2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ca6:	2230      	movs	r2, #48	; 0x30
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4618      	mov	r0, r3
 8001cac:	f00b f848 	bl	800cd40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb0:	f107 031c 	add.w	r3, r7, #28
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cc0:	f107 030c 	add.w	r3, r7, #12
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	4b31      	ldr	r3, [pc, #196]	; (8001d98 <SystemClock_Config+0xfc>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	4a30      	ldr	r2, [pc, #192]	; (8001d98 <SystemClock_Config+0xfc>)
 8001cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cde:	4b2e      	ldr	r3, [pc, #184]	; (8001d98 <SystemClock_Config+0xfc>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	4b2b      	ldr	r3, [pc, #172]	; (8001d9c <SystemClock_Config+0x100>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a2a      	ldr	r2, [pc, #168]	; (8001d9c <SystemClock_Config+0x100>)
 8001cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	4b28      	ldr	r3, [pc, #160]	; (8001d9c <SystemClock_Config+0x100>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001d06:	2309      	movs	r3, #9
 8001d08:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001d10:	2301      	movs	r3, #1
 8001d12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d14:	2302      	movs	r3, #2
 8001d16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001d1e:	2306      	movs	r3, #6
 8001d20:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d22:	23a8      	movs	r3, #168	; 0xa8
 8001d24:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d26:	2302      	movs	r3, #2
 8001d28:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d2a:	2307      	movs	r3, #7
 8001d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d32:	4618      	mov	r0, r3
 8001d34:	f003 fb74 	bl	8005420 <HAL_RCC_OscConfig>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001d3e:	f000 f841 	bl	8001dc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d42:	230f      	movs	r3, #15
 8001d44:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d46:	2302      	movs	r3, #2
 8001d48:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d4e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d58:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	2105      	movs	r1, #5
 8001d60:	4618      	mov	r0, r3
 8001d62:	f003 fdd5 	bl	8005910 <HAL_RCC_ClockConfig>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001d6c:	f000 f82a 	bl	8001dc4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d70:	2302      	movs	r3, #2
 8001d72:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d78:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d7a:	f107 030c 	add.w	r3, r7, #12
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f003 ffc8 	bl	8005d14 <HAL_RCCEx_PeriphCLKConfig>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001d8a:	f000 f81b 	bl	8001dc4 <Error_Handler>
  }
}
 8001d8e:	bf00      	nop
 8001d90:	3760      	adds	r7, #96	; 0x60
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40007000 	.word	0x40007000

08001da0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a04      	ldr	r2, [pc, #16]	; (8001dc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d101      	bne.n	8001db6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001db2:	f000 ff27 	bl	8002c04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40000400 	.word	0x40000400

08001dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc8:	b672      	cpsid	i
}
 8001dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <Error_Handler+0x8>
	...

08001dd0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001dd4:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <MX_RTC_Init+0x44>)
 8001dd6:	4a10      	ldr	r2, [pc, #64]	; (8001e18 <MX_RTC_Init+0x48>)
 8001dd8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <MX_RTC_Init+0x44>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 124;
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <MX_RTC_Init+0x44>)
 8001de2:	227c      	movs	r2, #124	; 0x7c
 8001de4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 3199;
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <MX_RTC_Init+0x44>)
 8001de8:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001dec:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001dee:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <MX_RTC_Init+0x44>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001df4:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <MX_RTC_Init+0x44>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <MX_RTC_Init+0x44>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e00:	4804      	ldr	r0, [pc, #16]	; (8001e14 <MX_RTC_Init+0x44>)
 8001e02:	f004 f869 	bl	8005ed8 <HAL_RTC_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8001e0c:	f7ff ffda 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20004aa0 	.word	0x20004aa0
 8001e18:	40002800 	.word	0x40002800

08001e1c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a05      	ldr	r2, [pc, #20]	; (8001e40 <HAL_RTC_MspInit+0x24>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d102      	bne.n	8001e34 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e2e:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <HAL_RTC_MspInit+0x28>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	40002800 	.word	0x40002800
 8001e44:	42470e3c 	.word	0x42470e3c

08001e48 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001e4c:	4b17      	ldr	r3, [pc, #92]	; (8001eac <MX_SPI1_Init+0x64>)
 8001e4e:	4a18      	ldr	r2, [pc, #96]	; (8001eb0 <MX_SPI1_Init+0x68>)
 8001e50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e52:	4b16      	ldr	r3, [pc, #88]	; (8001eac <MX_SPI1_Init+0x64>)
 8001e54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e5a:	4b14      	ldr	r3, [pc, #80]	; (8001eac <MX_SPI1_Init+0x64>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e60:	4b12      	ldr	r3, [pc, #72]	; (8001eac <MX_SPI1_Init+0x64>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e66:	4b11      	ldr	r3, [pc, #68]	; (8001eac <MX_SPI1_Init+0x64>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <MX_SPI1_Init+0x64>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e72:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <MX_SPI1_Init+0x64>)
 8001e74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <MX_SPI1_Init+0x64>)
 8001e7c:	2230      	movs	r2, #48	; 0x30
 8001e7e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e80:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <MX_SPI1_Init+0x64>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <MX_SPI1_Init+0x64>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e8c:	4b07      	ldr	r3, [pc, #28]	; (8001eac <MX_SPI1_Init+0x64>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <MX_SPI1_Init+0x64>)
 8001e94:	220a      	movs	r2, #10
 8001e96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e98:	4804      	ldr	r0, [pc, #16]	; (8001eac <MX_SPI1_Init+0x64>)
 8001e9a:	f004 f902 	bl	80060a2 <HAL_SPI_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ea4:	f7ff ff8e 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20004ac0 	.word	0x20004ac0
 8001eb0:	40013000 	.word	0x40013000

08001eb4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08a      	sub	sp, #40	; 0x28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a57      	ldr	r2, [pc, #348]	; (8002030 <HAL_SPI_MspInit+0x17c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	f040 80a8 	bne.w	8002028 <HAL_SPI_MspInit+0x174>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ed8:	2300      	movs	r3, #0
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	4b55      	ldr	r3, [pc, #340]	; (8002034 <HAL_SPI_MspInit+0x180>)
 8001ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee0:	4a54      	ldr	r2, [pc, #336]	; (8002034 <HAL_SPI_MspInit+0x180>)
 8001ee2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ee6:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee8:	4b52      	ldr	r3, [pc, #328]	; (8002034 <HAL_SPI_MspInit+0x180>)
 8001eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	4b4e      	ldr	r3, [pc, #312]	; (8002034 <HAL_SPI_MspInit+0x180>)
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	4a4d      	ldr	r2, [pc, #308]	; (8002034 <HAL_SPI_MspInit+0x180>)
 8001efe:	f043 0302 	orr.w	r3, r3, #2
 8001f02:	6313      	str	r3, [r2, #48]	; 0x30
 8001f04:	4b4b      	ldr	r3, [pc, #300]	; (8002034 <HAL_SPI_MspInit+0x180>)
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f10:	2300      	movs	r3, #0
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	4b47      	ldr	r3, [pc, #284]	; (8002034 <HAL_SPI_MspInit+0x180>)
 8001f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f18:	4a46      	ldr	r2, [pc, #280]	; (8002034 <HAL_SPI_MspInit+0x180>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f20:	4b44      	ldr	r3, [pc, #272]	; (8002034 <HAL_SPI_MspInit+0x180>)
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8001f2c:	2318      	movs	r3, #24
 8001f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2302      	movs	r3, #2
 8001f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f3c:	2305      	movs	r3, #5
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	4619      	mov	r1, r3
 8001f46:	483c      	ldr	r0, [pc, #240]	; (8002038 <HAL_SPI_MspInit+0x184>)
 8001f48:	f002 f93c 	bl	80041c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f50:	2302      	movs	r3, #2
 8001f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f5c:	2305      	movs	r3, #5
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	4619      	mov	r1, r3
 8001f66:	4835      	ldr	r0, [pc, #212]	; (800203c <HAL_SPI_MspInit+0x188>)
 8001f68:	f002 f92c 	bl	80041c4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8001f6c:	4b34      	ldr	r3, [pc, #208]	; (8002040 <HAL_SPI_MspInit+0x18c>)
 8001f6e:	4a35      	ldr	r2, [pc, #212]	; (8002044 <HAL_SPI_MspInit+0x190>)
 8001f70:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001f72:	4b33      	ldr	r3, [pc, #204]	; (8002040 <HAL_SPI_MspInit+0x18c>)
 8001f74:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001f78:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f7a:	4b31      	ldr	r3, [pc, #196]	; (8002040 <HAL_SPI_MspInit+0x18c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f80:	4b2f      	ldr	r3, [pc, #188]	; (8002040 <HAL_SPI_MspInit+0x18c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f86:	4b2e      	ldr	r3, [pc, #184]	; (8002040 <HAL_SPI_MspInit+0x18c>)
 8001f88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f8c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f8e:	4b2c      	ldr	r3, [pc, #176]	; (8002040 <HAL_SPI_MspInit+0x18c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f94:	4b2a      	ldr	r3, [pc, #168]	; (8002040 <HAL_SPI_MspInit+0x18c>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001f9a:	4b29      	ldr	r3, [pc, #164]	; (8002040 <HAL_SPI_MspInit+0x18c>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001fa0:	4b27      	ldr	r3, [pc, #156]	; (8002040 <HAL_SPI_MspInit+0x18c>)
 8001fa2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001fa6:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fa8:	4b25      	ldr	r3, [pc, #148]	; (8002040 <HAL_SPI_MspInit+0x18c>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001fae:	4824      	ldr	r0, [pc, #144]	; (8002040 <HAL_SPI_MspInit+0x18c>)
 8001fb0:	f001 fd8c 	bl	8003acc <HAL_DMA_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 8001fba:	f7ff ff03 	bl	8001dc4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a1f      	ldr	r2, [pc, #124]	; (8002040 <HAL_SPI_MspInit+0x18c>)
 8001fc2:	64da      	str	r2, [r3, #76]	; 0x4c
 8001fc4:	4a1e      	ldr	r2, [pc, #120]	; (8002040 <HAL_SPI_MspInit+0x18c>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001fca:	4b1f      	ldr	r3, [pc, #124]	; (8002048 <HAL_SPI_MspInit+0x194>)
 8001fcc:	4a1f      	ldr	r2, [pc, #124]	; (800204c <HAL_SPI_MspInit+0x198>)
 8001fce:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001fd0:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <HAL_SPI_MspInit+0x194>)
 8001fd2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001fd6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fd8:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <HAL_SPI_MspInit+0x194>)
 8001fda:	2240      	movs	r2, #64	; 0x40
 8001fdc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fde:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <HAL_SPI_MspInit+0x194>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fe4:	4b18      	ldr	r3, [pc, #96]	; (8002048 <HAL_SPI_MspInit+0x194>)
 8001fe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fea:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fec:	4b16      	ldr	r3, [pc, #88]	; (8002048 <HAL_SPI_MspInit+0x194>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <HAL_SPI_MspInit+0x194>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001ff8:	4b13      	ldr	r3, [pc, #76]	; (8002048 <HAL_SPI_MspInit+0x194>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001ffe:	4b12      	ldr	r3, [pc, #72]	; (8002048 <HAL_SPI_MspInit+0x194>)
 8002000:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002004:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <HAL_SPI_MspInit+0x194>)
 8002008:	2200      	movs	r2, #0
 800200a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800200c:	480e      	ldr	r0, [pc, #56]	; (8002048 <HAL_SPI_MspInit+0x194>)
 800200e:	f001 fd5d 	bl	8003acc <HAL_DMA_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <HAL_SPI_MspInit+0x168>
    {
      Error_Handler();
 8002018:	f7ff fed4 	bl	8001dc4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <HAL_SPI_MspInit+0x194>)
 8002020:	649a      	str	r2, [r3, #72]	; 0x48
 8002022:	4a09      	ldr	r2, [pc, #36]	; (8002048 <HAL_SPI_MspInit+0x194>)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002028:	bf00      	nop
 800202a:	3728      	adds	r7, #40	; 0x28
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40013000 	.word	0x40013000
 8002034:	40023800 	.word	0x40023800
 8002038:	40020400 	.word	0x40020400
 800203c:	40020000 	.word	0x40020000
 8002040:	20004b18 	.word	0x20004b18
 8002044:	40026440 	.word	0x40026440
 8002048:	20004b78 	.word	0x20004b78
 800204c:	40026458 	.word	0x40026458

08002050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <HAL_MspInit+0x54>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	4a11      	ldr	r2, [pc, #68]	; (80020a4 <HAL_MspInit+0x54>)
 8002060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002064:	6453      	str	r3, [r2, #68]	; 0x44
 8002066:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <HAL_MspInit+0x54>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206e:	607b      	str	r3, [r7, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	603b      	str	r3, [r7, #0]
 8002076:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_MspInit+0x54>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <HAL_MspInit+0x54>)
 800207c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002080:	6413      	str	r3, [r2, #64]	; 0x40
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <HAL_MspInit+0x54>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208a:	603b      	str	r3, [r7, #0]
 800208c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800208e:	2200      	movs	r2, #0
 8002090:	210f      	movs	r1, #15
 8002092:	f06f 0001 	mvn.w	r0, #1
 8002096:	f001 fcef 	bl	8003a78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40023800 	.word	0x40023800

080020a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08c      	sub	sp, #48	; 0x30
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 80020b8:	2200      	movs	r2, #0
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	201d      	movs	r0, #29
 80020be:	f001 fcdb 	bl	8003a78 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020c2:	201d      	movs	r0, #29
 80020c4:	f001 fcf4 	bl	8003ab0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	4b1f      	ldr	r3, [pc, #124]	; (800214c <HAL_InitTick+0xa4>)
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	4a1e      	ldr	r2, [pc, #120]	; (800214c <HAL_InitTick+0xa4>)
 80020d2:	f043 0302 	orr.w	r3, r3, #2
 80020d6:	6413      	str	r3, [r2, #64]	; 0x40
 80020d8:	4b1c      	ldr	r3, [pc, #112]	; (800214c <HAL_InitTick+0xa4>)
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020e4:	f107 0210 	add.w	r2, r7, #16
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	4611      	mov	r1, r2
 80020ee:	4618      	mov	r0, r3
 80020f0:	f003 fdde 	bl	8005cb0 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80020f4:	f003 fdb4 	bl	8005c60 <HAL_RCC_GetPCLK1Freq>
 80020f8:	4603      	mov	r3, r0
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002100:	4a13      	ldr	r2, [pc, #76]	; (8002150 <HAL_InitTick+0xa8>)
 8002102:	fba2 2303 	umull	r2, r3, r2, r3
 8002106:	0c9b      	lsrs	r3, r3, #18
 8002108:	3b01      	subs	r3, #1
 800210a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <HAL_InitTick+0xac>)
 800210e:	4a12      	ldr	r2, [pc, #72]	; (8002158 <HAL_InitTick+0xb0>)
 8002110:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002112:	4b10      	ldr	r3, [pc, #64]	; (8002154 <HAL_InitTick+0xac>)
 8002114:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002118:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800211a:	4a0e      	ldr	r2, [pc, #56]	; (8002154 <HAL_InitTick+0xac>)
 800211c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <HAL_InitTick+0xac>)
 8002122:	2200      	movs	r2, #0
 8002124:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002126:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <HAL_InitTick+0xac>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 800212c:	4809      	ldr	r0, [pc, #36]	; (8002154 <HAL_InitTick+0xac>)
 800212e:	f004 f841 	bl	80061b4 <HAL_TIM_Base_Init>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d104      	bne.n	8002142 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8002138:	4806      	ldr	r0, [pc, #24]	; (8002154 <HAL_InitTick+0xac>)
 800213a:	f004 f88b 	bl	8006254 <HAL_TIM_Base_Start_IT>
 800213e:	4603      	mov	r3, r0
 8002140:	e000      	b.n	8002144 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
}
 8002144:	4618      	mov	r0, r3
 8002146:	3730      	adds	r7, #48	; 0x30
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40023800 	.word	0x40023800
 8002150:	431bde83 	.word	0x431bde83
 8002154:	20004bd8 	.word	0x20004bd8
 8002158:	40000400 	.word	0x40000400

0800215c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002160:	e7fe      	b.n	8002160 <NMI_Handler+0x4>

08002162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002166:	e7fe      	b.n	8002166 <HardFault_Handler+0x4>

08002168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800216c:	e7fe      	b.n	800216c <MemManage_Handler+0x4>

0800216e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002172:	e7fe      	b.n	8002172 <BusFault_Handler+0x4>

08002174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <UsageFault_Handler+0x4>

0800217a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800218c:	4802      	ldr	r0, [pc, #8]	; (8002198 <DMA1_Stream1_IRQHandler+0x10>)
 800218e:	f001 fddd 	bl	8003d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20004d58 	.word	0x20004d58

0800219c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80021a0:	4802      	ldr	r0, [pc, #8]	; (80021ac <CAN1_TX_IRQHandler+0x10>)
 80021a2:	f001 f982 	bl	80034aa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20004a70 	.word	0x20004a70

080021b0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80021b4:	4802      	ldr	r0, [pc, #8]	; (80021c0 <CAN1_RX0_IRQHandler+0x10>)
 80021b6:	f001 f978 	bl	80034aa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20004a70 	.word	0x20004a70

080021c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021c8:	4802      	ldr	r0, [pc, #8]	; (80021d4 <TIM3_IRQHandler+0x10>)
 80021ca:	f004 f902 	bl	80063d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20004bd8 	.word	0x20004bd8

080021d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
////
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <USART1_IRQHandler+0x10>)
 80021de:	f004 ff7b 	bl	80070d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
////
  /* USER CODE END USART1_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20004ebc 	.word	0x20004ebc

080021ec <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80021f0:	4802      	ldr	r0, [pc, #8]	; (80021fc <DMA2_Stream1_IRQHandler+0x10>)
 80021f2:	f001 fdab 	bl	8003d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20004cf8 	.word	0x20004cf8

08002200 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <DMA2_Stream2_IRQHandler+0x10>)
 8002206:	f001 fda1 	bl	8003d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20004b18 	.word	0x20004b18

08002214 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <DMA2_Stream3_IRQHandler+0x10>)
 800221a:	f001 fd97 	bl	8003d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20004b78 	.word	0x20004b78

08002228 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800222c:	4802      	ldr	r0, [pc, #8]	; (8002238 <CAN2_TX_IRQHandler+0x10>)
 800222e:	f001 f93c 	bl	80034aa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20004a48 	.word	0x20004a48

0800223c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002240:	4802      	ldr	r0, [pc, #8]	; (800224c <CAN2_RX0_IRQHandler+0x10>)
 8002242:	f001 f932 	bl	80034aa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20004a48 	.word	0x20004a48

08002250 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002254:	4802      	ldr	r0, [pc, #8]	; (8002260 <OTG_FS_IRQHandler+0x10>)
 8002256:	f002 f96a 	bl	800452e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20004f88 	.word	0x20004f88

08002264 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002268:	4802      	ldr	r0, [pc, #8]	; (8002274 <DMA2_Stream6_IRQHandler+0x10>)
 800226a:	f001 fd6f 	bl	8003d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20004e5c 	.word	0x20004e5c

08002278 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800227c:	4802      	ldr	r0, [pc, #8]	; (8002288 <DMA2_Stream7_IRQHandler+0x10>)
 800227e:	f001 fd65 	bl	8003d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20004dfc 	.word	0x20004dfc

0800228c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002290:	4802      	ldr	r0, [pc, #8]	; (800229c <USART6_IRQHandler+0x10>)
 8002292:	f004 ff21 	bl	80070d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20004f00 	.word	0x20004f00

080022a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <SystemInit+0x20>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022aa:	4a05      	ldr	r2, [pc, #20]	; (80022c0 <SystemInit+0x20>)
 80022ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <MX_TIM4_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim12;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08e      	sub	sp, #56	; 0x38
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	605a      	str	r2, [r3, #4]
 80022d4:	609a      	str	r2, [r3, #8]
 80022d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d8:	f107 0320 	add.w	r3, r7, #32
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022e2:	1d3b      	adds	r3, r7, #4
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	611a      	str	r2, [r3, #16]
 80022f0:	615a      	str	r2, [r3, #20]
 80022f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022f4:	4b32      	ldr	r3, [pc, #200]	; (80023c0 <MX_TIM4_Init+0xfc>)
 80022f6:	4a33      	ldr	r2, [pc, #204]	; (80023c4 <MX_TIM4_Init+0x100>)
 80022f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80022fa:	4b31      	ldr	r3, [pc, #196]	; (80023c0 <MX_TIM4_Init+0xfc>)
 80022fc:	2253      	movs	r2, #83	; 0x53
 80022fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002300:	4b2f      	ldr	r3, [pc, #188]	; (80023c0 <MX_TIM4_Init+0xfc>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8002306:	4b2e      	ldr	r3, [pc, #184]	; (80023c0 <MX_TIM4_Init+0xfc>)
 8002308:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800230c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800230e:	4b2c      	ldr	r3, [pc, #176]	; (80023c0 <MX_TIM4_Init+0xfc>)
 8002310:	2200      	movs	r2, #0
 8002312:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002314:	4b2a      	ldr	r3, [pc, #168]	; (80023c0 <MX_TIM4_Init+0xfc>)
 8002316:	2200      	movs	r2, #0
 8002318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800231a:	4829      	ldr	r0, [pc, #164]	; (80023c0 <MX_TIM4_Init+0xfc>)
 800231c:	f003 ff4a 	bl	80061b4 <HAL_TIM_Base_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002326:	f7ff fd4d 	bl	8001dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800232a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800232e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002330:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002334:	4619      	mov	r1, r3
 8002336:	4822      	ldr	r0, [pc, #136]	; (80023c0 <MX_TIM4_Init+0xfc>)
 8002338:	f004 fa16 	bl	8006768 <HAL_TIM_ConfigClockSource>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002342:	f7ff fd3f 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002346:	481e      	ldr	r0, [pc, #120]	; (80023c0 <MX_TIM4_Init+0xfc>)
 8002348:	f003 fff4 	bl	8006334 <HAL_TIM_PWM_Init>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002352:	f7ff fd37 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002356:	2300      	movs	r3, #0
 8002358:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800235a:	2300      	movs	r3, #0
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800235e:	f107 0320 	add.w	r3, r7, #32
 8002362:	4619      	mov	r1, r3
 8002364:	4816      	ldr	r0, [pc, #88]	; (80023c0 <MX_TIM4_Init+0xfc>)
 8002366:	f004 fdd9 	bl	8006f1c <HAL_TIMEx_MasterConfigSynchronization>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002370:	f7ff fd28 	bl	8001dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002374:	2360      	movs	r3, #96	; 0x60
 8002376:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800237c:	2300      	movs	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002384:	1d3b      	adds	r3, r7, #4
 8002386:	2200      	movs	r2, #0
 8002388:	4619      	mov	r1, r3
 800238a:	480d      	ldr	r0, [pc, #52]	; (80023c0 <MX_TIM4_Init+0xfc>)
 800238c:	f004 f92a 	bl	80065e4 <HAL_TIM_PWM_ConfigChannel>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002396:	f7ff fd15 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800239a:	1d3b      	adds	r3, r7, #4
 800239c:	2204      	movs	r2, #4
 800239e:	4619      	mov	r1, r3
 80023a0:	4807      	ldr	r0, [pc, #28]	; (80023c0 <MX_TIM4_Init+0xfc>)
 80023a2:	f004 f91f 	bl	80065e4 <HAL_TIM_PWM_ConfigChannel>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80023ac:	f7ff fd0a 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80023b0:	4803      	ldr	r0, [pc, #12]	; (80023c0 <MX_TIM4_Init+0xfc>)
 80023b2:	f000 f937 	bl	8002624 <HAL_TIM_MspPostInit>

}
 80023b6:	bf00      	nop
 80023b8:	3738      	adds	r7, #56	; 0x38
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20004c20 	.word	0x20004c20
 80023c4:	40000800 	.word	0x40000800

080023c8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08a      	sub	sp, #40	; 0x28
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023ce:	f107 0320 	add.w	r3, r7, #32
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023d8:	1d3b      	adds	r3, r7, #4
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	605a      	str	r2, [r3, #4]
 80023e0:	609a      	str	r2, [r3, #8]
 80023e2:	60da      	str	r2, [r3, #12]
 80023e4:	611a      	str	r2, [r3, #16]
 80023e6:	615a      	str	r2, [r3, #20]
 80023e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80023ea:	4b2d      	ldr	r3, [pc, #180]	; (80024a0 <MX_TIM5_Init+0xd8>)
 80023ec:	4a2d      	ldr	r2, [pc, #180]	; (80024a4 <MX_TIM5_Init+0xdc>)
 80023ee:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80023f0:	4b2b      	ldr	r3, [pc, #172]	; (80024a0 <MX_TIM5_Init+0xd8>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023f6:	4b2a      	ldr	r3, [pc, #168]	; (80024a0 <MX_TIM5_Init+0xd8>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80023fc:	4b28      	ldr	r3, [pc, #160]	; (80024a0 <MX_TIM5_Init+0xd8>)
 80023fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002402:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002404:	4b26      	ldr	r3, [pc, #152]	; (80024a0 <MX_TIM5_Init+0xd8>)
 8002406:	2200      	movs	r2, #0
 8002408:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800240a:	4b25      	ldr	r3, [pc, #148]	; (80024a0 <MX_TIM5_Init+0xd8>)
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002410:	4823      	ldr	r0, [pc, #140]	; (80024a0 <MX_TIM5_Init+0xd8>)
 8002412:	f003 ff8f 	bl	8006334 <HAL_TIM_PWM_Init>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 800241c:	f7ff fcd2 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002420:	2300      	movs	r3, #0
 8002422:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002424:	2300      	movs	r3, #0
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002428:	f107 0320 	add.w	r3, r7, #32
 800242c:	4619      	mov	r1, r3
 800242e:	481c      	ldr	r0, [pc, #112]	; (80024a0 <MX_TIM5_Init+0xd8>)
 8002430:	f004 fd74 	bl	8006f1c <HAL_TIMEx_MasterConfigSynchronization>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800243a:	f7ff fcc3 	bl	8001dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800243e:	2360      	movs	r3, #96	; 0x60
 8002440:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800244e:	1d3b      	adds	r3, r7, #4
 8002450:	2200      	movs	r2, #0
 8002452:	4619      	mov	r1, r3
 8002454:	4812      	ldr	r0, [pc, #72]	; (80024a0 <MX_TIM5_Init+0xd8>)
 8002456:	f004 f8c5 	bl	80065e4 <HAL_TIM_PWM_ConfigChannel>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002460:	f7ff fcb0 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002464:	1d3b      	adds	r3, r7, #4
 8002466:	2204      	movs	r2, #4
 8002468:	4619      	mov	r1, r3
 800246a:	480d      	ldr	r0, [pc, #52]	; (80024a0 <MX_TIM5_Init+0xd8>)
 800246c:	f004 f8ba 	bl	80065e4 <HAL_TIM_PWM_ConfigChannel>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002476:	f7ff fca5 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800247a:	1d3b      	adds	r3, r7, #4
 800247c:	2208      	movs	r2, #8
 800247e:	4619      	mov	r1, r3
 8002480:	4807      	ldr	r0, [pc, #28]	; (80024a0 <MX_TIM5_Init+0xd8>)
 8002482:	f004 f8af 	bl	80065e4 <HAL_TIM_PWM_ConfigChannel>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 800248c:	f7ff fc9a 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002490:	4803      	ldr	r0, [pc, #12]	; (80024a0 <MX_TIM5_Init+0xd8>)
 8002492:	f000 f8c7 	bl	8002624 <HAL_TIM_MspPostInit>

}
 8002496:	bf00      	nop
 8002498:	3728      	adds	r7, #40	; 0x28
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20004c68 	.word	0x20004c68
 80024a4:	40000c00 	.word	0x40000c00

080024a8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08c      	sub	sp, #48	; 0x30
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ae:	f107 0320 	add.w	r3, r7, #32
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
 80024b8:	609a      	str	r2, [r3, #8]
 80024ba:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024bc:	1d3b      	adds	r3, r7, #4
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	605a      	str	r2, [r3, #4]
 80024c4:	609a      	str	r2, [r3, #8]
 80024c6:	60da      	str	r2, [r3, #12]
 80024c8:	611a      	str	r2, [r3, #16]
 80024ca:	615a      	str	r2, [r3, #20]
 80024cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80024ce:	4b26      	ldr	r3, [pc, #152]	; (8002568 <MX_TIM12_Init+0xc0>)
 80024d0:	4a26      	ldr	r2, [pc, #152]	; (800256c <MX_TIM12_Init+0xc4>)
 80024d2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1281;
 80024d4:	4b24      	ldr	r3, [pc, #144]	; (8002568 <MX_TIM12_Init+0xc0>)
 80024d6:	f240 5201 	movw	r2, #1281	; 0x501
 80024da:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024dc:	4b22      	ldr	r3, [pc, #136]	; (8002568 <MX_TIM12_Init+0xc0>)
 80024de:	2200      	movs	r2, #0
 80024e0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 31111;
 80024e2:	4b21      	ldr	r3, [pc, #132]	; (8002568 <MX_TIM12_Init+0xc0>)
 80024e4:	f647 1287 	movw	r2, #31111	; 0x7987
 80024e8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ea:	4b1f      	ldr	r3, [pc, #124]	; (8002568 <MX_TIM12_Init+0xc0>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024f0:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <MX_TIM12_Init+0xc0>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80024f6:	481c      	ldr	r0, [pc, #112]	; (8002568 <MX_TIM12_Init+0xc0>)
 80024f8:	f003 fe5c 	bl	80061b4 <HAL_TIM_Base_Init>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 8002502:	f7ff fc5f 	bl	8001dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002506:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800250a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800250c:	f107 0320 	add.w	r3, r7, #32
 8002510:	4619      	mov	r1, r3
 8002512:	4815      	ldr	r0, [pc, #84]	; (8002568 <MX_TIM12_Init+0xc0>)
 8002514:	f004 f928 	bl	8006768 <HAL_TIM_ConfigClockSource>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 800251e:	f7ff fc51 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002522:	4811      	ldr	r0, [pc, #68]	; (8002568 <MX_TIM12_Init+0xc0>)
 8002524:	f003 ff06 	bl	8006334 <HAL_TIM_PWM_Init>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 800252e:	f7ff fc49 	bl	8001dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002532:	2360      	movs	r3, #96	; 0x60
 8002534:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	2200      	movs	r2, #0
 8002546:	4619      	mov	r1, r3
 8002548:	4807      	ldr	r0, [pc, #28]	; (8002568 <MX_TIM12_Init+0xc0>)
 800254a:	f004 f84b 	bl	80065e4 <HAL_TIM_PWM_ConfigChannel>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8002554:	f7ff fc36 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002558:	4803      	ldr	r0, [pc, #12]	; (8002568 <MX_TIM12_Init+0xc0>)
 800255a:	f000 f863 	bl	8002624 <HAL_TIM_MspPostInit>

}
 800255e:	bf00      	nop
 8002560:	3730      	adds	r7, #48	; 0x30
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20004cb0 	.word	0x20004cb0
 800256c:	40001800 	.word	0x40001800

08002570 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a15      	ldr	r2, [pc, #84]	; (80025d4 <HAL_TIM_Base_MspInit+0x64>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d10e      	bne.n	80025a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	4b14      	ldr	r3, [pc, #80]	; (80025d8 <HAL_TIM_Base_MspInit+0x68>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	4a13      	ldr	r2, [pc, #76]	; (80025d8 <HAL_TIM_Base_MspInit+0x68>)
 800258c:	f043 0304 	orr.w	r3, r3, #4
 8002590:	6413      	str	r3, [r2, #64]	; 0x40
 8002592:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <HAL_TIM_Base_MspInit+0x68>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800259e:	e012      	b.n	80025c6 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM12)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a0d      	ldr	r2, [pc, #52]	; (80025dc <HAL_TIM_Base_MspInit+0x6c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d10d      	bne.n	80025c6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	60bb      	str	r3, [r7, #8]
 80025ae:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <HAL_TIM_Base_MspInit+0x68>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	4a09      	ldr	r2, [pc, #36]	; (80025d8 <HAL_TIM_Base_MspInit+0x68>)
 80025b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025b8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ba:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <HAL_TIM_Base_MspInit+0x68>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	68bb      	ldr	r3, [r7, #8]
}
 80025c6:	bf00      	nop
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40000800 	.word	0x40000800
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40001800 	.word	0x40001800

080025e0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a0b      	ldr	r2, [pc, #44]	; (800261c <HAL_TIM_PWM_MspInit+0x3c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d10d      	bne.n	800260e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <HAL_TIM_PWM_MspInit+0x40>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	4a09      	ldr	r2, [pc, #36]	; (8002620 <HAL_TIM_PWM_MspInit+0x40>)
 80025fc:	f043 0308 	orr.w	r3, r3, #8
 8002600:	6413      	str	r3, [r2, #64]	; 0x40
 8002602:	4b07      	ldr	r3, [pc, #28]	; (8002620 <HAL_TIM_PWM_MspInit+0x40>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800260e:	bf00      	nop
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40000c00 	.word	0x40000c00
 8002620:	40023800 	.word	0x40023800

08002624 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	; 0x28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a36      	ldr	r2, [pc, #216]	; (800271c <HAL_TIM_MspPostInit+0xf8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d11e      	bne.n	8002684 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	4b35      	ldr	r3, [pc, #212]	; (8002720 <HAL_TIM_MspPostInit+0xfc>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4a34      	ldr	r2, [pc, #208]	; (8002720 <HAL_TIM_MspPostInit+0xfc>)
 8002650:	f043 0302 	orr.w	r3, r3, #2
 8002654:	6313      	str	r3, [r2, #48]	; 0x30
 8002656:	4b32      	ldr	r3, [pc, #200]	; (8002720 <HAL_TIM_MspPostInit+0xfc>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002662:	23c0      	movs	r3, #192	; 0xc0
 8002664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002666:	2302      	movs	r3, #2
 8002668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266e:	2300      	movs	r3, #0
 8002670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002672:	2302      	movs	r3, #2
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002676:	f107 0314 	add.w	r3, r7, #20
 800267a:	4619      	mov	r1, r3
 800267c:	4829      	ldr	r0, [pc, #164]	; (8002724 <HAL_TIM_MspPostInit+0x100>)
 800267e:	f001 fda1 	bl	80041c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002682:	e047      	b.n	8002714 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM5)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a27      	ldr	r2, [pc, #156]	; (8002728 <HAL_TIM_MspPostInit+0x104>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d11f      	bne.n	80026ce <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	4b23      	ldr	r3, [pc, #140]	; (8002720 <HAL_TIM_MspPostInit+0xfc>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	4a22      	ldr	r2, [pc, #136]	; (8002720 <HAL_TIM_MspPostInit+0xfc>)
 8002698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800269c:	6313      	str	r3, [r2, #48]	; 0x30
 800269e:	4b20      	ldr	r3, [pc, #128]	; (8002720 <HAL_TIM_MspPostInit+0xfc>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 80026aa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80026ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b0:	2302      	movs	r3, #2
 80026b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b8:	2300      	movs	r3, #0
 80026ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80026bc:	2302      	movs	r3, #2
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	4619      	mov	r1, r3
 80026c6:	4819      	ldr	r0, [pc, #100]	; (800272c <HAL_TIM_MspPostInit+0x108>)
 80026c8:	f001 fd7c 	bl	80041c4 <HAL_GPIO_Init>
}
 80026cc:	e022      	b.n	8002714 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM12)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a17      	ldr	r2, [pc, #92]	; (8002730 <HAL_TIM_MspPostInit+0x10c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d11d      	bne.n	8002714 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80026d8:	2300      	movs	r3, #0
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	4b10      	ldr	r3, [pc, #64]	; (8002720 <HAL_TIM_MspPostInit+0xfc>)
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	4a0f      	ldr	r2, [pc, #60]	; (8002720 <HAL_TIM_MspPostInit+0xfc>)
 80026e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026e6:	6313      	str	r3, [r2, #48]	; 0x30
 80026e8:	4b0d      	ldr	r3, [pc, #52]	; (8002720 <HAL_TIM_MspPostInit+0xfc>)
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026f4:	2340      	movs	r3, #64	; 0x40
 80026f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f8:	2302      	movs	r3, #2
 80026fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002700:	2300      	movs	r3, #0
 8002702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002704:	2309      	movs	r3, #9
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	4619      	mov	r1, r3
 800270e:	4807      	ldr	r0, [pc, #28]	; (800272c <HAL_TIM_MspPostInit+0x108>)
 8002710:	f001 fd58 	bl	80041c4 <HAL_GPIO_Init>
}
 8002714:	bf00      	nop
 8002716:	3728      	adds	r7, #40	; 0x28
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40000800 	.word	0x40000800
 8002720:	40023800 	.word	0x40023800
 8002724:	40020400 	.word	0x40020400
 8002728:	40000c00 	.word	0x40000c00
 800272c:	40021c00 	.word	0x40021c00
 8002730:	40001800 	.word	0x40001800

08002734 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002738:	4b11      	ldr	r3, [pc, #68]	; (8002780 <MX_USART1_UART_Init+0x4c>)
 800273a:	4a12      	ldr	r2, [pc, #72]	; (8002784 <MX_USART1_UART_Init+0x50>)
 800273c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800273e:	4b10      	ldr	r3, [pc, #64]	; (8002780 <MX_USART1_UART_Init+0x4c>)
 8002740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002744:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002746:	4b0e      	ldr	r3, [pc, #56]	; (8002780 <MX_USART1_UART_Init+0x4c>)
 8002748:	2200      	movs	r2, #0
 800274a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800274c:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <MX_USART1_UART_Init+0x4c>)
 800274e:	2200      	movs	r2, #0
 8002750:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002752:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <MX_USART1_UART_Init+0x4c>)
 8002754:	2200      	movs	r2, #0
 8002756:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002758:	4b09      	ldr	r3, [pc, #36]	; (8002780 <MX_USART1_UART_Init+0x4c>)
 800275a:	220c      	movs	r2, #12
 800275c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800275e:	4b08      	ldr	r3, [pc, #32]	; (8002780 <MX_USART1_UART_Init+0x4c>)
 8002760:	2200      	movs	r2, #0
 8002762:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002764:	4b06      	ldr	r3, [pc, #24]	; (8002780 <MX_USART1_UART_Init+0x4c>)
 8002766:	2200      	movs	r2, #0
 8002768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800276a:	4805      	ldr	r0, [pc, #20]	; (8002780 <MX_USART1_UART_Init+0x4c>)
 800276c:	f004 fc66 	bl	800703c <HAL_UART_Init>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002776:	f7ff fb25 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20004ebc 	.word	0x20004ebc
 8002784:	40011000 	.word	0x40011000

08002788 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800278c:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <MX_USART3_UART_Init+0x48>)
 800278e:	4a11      	ldr	r2, [pc, #68]	; (80027d4 <MX_USART3_UART_Init+0x4c>)
 8002790:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8002792:	4b0f      	ldr	r3, [pc, #60]	; (80027d0 <MX_USART3_UART_Init+0x48>)
 8002794:	4a10      	ldr	r2, [pc, #64]	; (80027d8 <MX_USART3_UART_Init+0x50>)
 8002796:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002798:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <MX_USART3_UART_Init+0x48>)
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800279e:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <MX_USART3_UART_Init+0x48>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80027a4:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <MX_USART3_UART_Init+0x48>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027aa:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <MX_USART3_UART_Init+0x48>)
 80027ac:	220c      	movs	r2, #12
 80027ae:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027b0:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <MX_USART3_UART_Init+0x48>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80027b6:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <MX_USART3_UART_Init+0x48>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80027bc:	4804      	ldr	r0, [pc, #16]	; (80027d0 <MX_USART3_UART_Init+0x48>)
 80027be:	f004 fc3d 	bl	800703c <HAL_UART_Init>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 80027c8:	f7ff fafc 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027cc:	bf00      	nop
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20004db8 	.word	0x20004db8
 80027d4:	40004800 	.word	0x40004800
 80027d8:	000186a0 	.word	0x000186a0

080027dc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80027e0:	4b11      	ldr	r3, [pc, #68]	; (8002828 <MX_USART6_UART_Init+0x4c>)
 80027e2:	4a12      	ldr	r2, [pc, #72]	; (800282c <MX_USART6_UART_Init+0x50>)
 80027e4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80027e6:	4b10      	ldr	r3, [pc, #64]	; (8002828 <MX_USART6_UART_Init+0x4c>)
 80027e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027ec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80027ee:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <MX_USART6_UART_Init+0x4c>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80027f4:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <MX_USART6_UART_Init+0x4c>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80027fa:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <MX_USART6_UART_Init+0x4c>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002800:	4b09      	ldr	r3, [pc, #36]	; (8002828 <MX_USART6_UART_Init+0x4c>)
 8002802:	220c      	movs	r2, #12
 8002804:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002806:	4b08      	ldr	r3, [pc, #32]	; (8002828 <MX_USART6_UART_Init+0x4c>)
 8002808:	2200      	movs	r2, #0
 800280a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <MX_USART6_UART_Init+0x4c>)
 800280e:	2200      	movs	r2, #0
 8002810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002812:	4805      	ldr	r0, [pc, #20]	; (8002828 <MX_USART6_UART_Init+0x4c>)
 8002814:	f004 fc12 	bl	800703c <HAL_UART_Init>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800281e:	f7ff fad1 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20004f00 	.word	0x20004f00
 800282c:	40011400 	.word	0x40011400

08002830 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08e      	sub	sp, #56	; 0x38
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a68      	ldr	r2, [pc, #416]	; (80029f0 <HAL_UART_MspInit+0x1c0>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d164      	bne.n	800291c <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	623b      	str	r3, [r7, #32]
 8002856:	4b67      	ldr	r3, [pc, #412]	; (80029f4 <HAL_UART_MspInit+0x1c4>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	4a66      	ldr	r2, [pc, #408]	; (80029f4 <HAL_UART_MspInit+0x1c4>)
 800285c:	f043 0310 	orr.w	r3, r3, #16
 8002860:	6453      	str	r3, [r2, #68]	; 0x44
 8002862:	4b64      	ldr	r3, [pc, #400]	; (80029f4 <HAL_UART_MspInit+0x1c4>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	f003 0310 	and.w	r3, r3, #16
 800286a:	623b      	str	r3, [r7, #32]
 800286c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
 8002872:	4b60      	ldr	r3, [pc, #384]	; (80029f4 <HAL_UART_MspInit+0x1c4>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	4a5f      	ldr	r2, [pc, #380]	; (80029f4 <HAL_UART_MspInit+0x1c4>)
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	6313      	str	r3, [r2, #48]	; 0x30
 800287e:	4b5d      	ldr	r3, [pc, #372]	; (80029f4 <HAL_UART_MspInit+0x1c4>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	61fb      	str	r3, [r7, #28]
 8002888:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800288a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002890:	2302      	movs	r3, #2
 8002892:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	2300      	movs	r3, #0
 8002896:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002898:	2303      	movs	r3, #3
 800289a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800289c:	2307      	movs	r3, #7
 800289e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a4:	4619      	mov	r1, r3
 80028a6:	4854      	ldr	r0, [pc, #336]	; (80029f8 <HAL_UART_MspInit+0x1c8>)
 80028a8:	f001 fc8c 	bl	80041c4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80028ac:	4b53      	ldr	r3, [pc, #332]	; (80029fc <HAL_UART_MspInit+0x1cc>)
 80028ae:	4a54      	ldr	r2, [pc, #336]	; (8002a00 <HAL_UART_MspInit+0x1d0>)
 80028b0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80028b2:	4b52      	ldr	r3, [pc, #328]	; (80029fc <HAL_UART_MspInit+0x1cc>)
 80028b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028b8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028ba:	4b50      	ldr	r3, [pc, #320]	; (80029fc <HAL_UART_MspInit+0x1cc>)
 80028bc:	2240      	movs	r2, #64	; 0x40
 80028be:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028c0:	4b4e      	ldr	r3, [pc, #312]	; (80029fc <HAL_UART_MspInit+0x1cc>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028c6:	4b4d      	ldr	r3, [pc, #308]	; (80029fc <HAL_UART_MspInit+0x1cc>)
 80028c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028cc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028ce:	4b4b      	ldr	r3, [pc, #300]	; (80029fc <HAL_UART_MspInit+0x1cc>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028d4:	4b49      	ldr	r3, [pc, #292]	; (80029fc <HAL_UART_MspInit+0x1cc>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80028da:	4b48      	ldr	r3, [pc, #288]	; (80029fc <HAL_UART_MspInit+0x1cc>)
 80028dc:	2200      	movs	r2, #0
 80028de:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80028e0:	4b46      	ldr	r3, [pc, #280]	; (80029fc <HAL_UART_MspInit+0x1cc>)
 80028e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028e6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028e8:	4b44      	ldr	r3, [pc, #272]	; (80029fc <HAL_UART_MspInit+0x1cc>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80028ee:	4843      	ldr	r0, [pc, #268]	; (80029fc <HAL_UART_MspInit+0x1cc>)
 80028f0:	f001 f8ec 	bl	8003acc <HAL_DMA_Init>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80028fa:	f7ff fa63 	bl	8001dc4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a3e      	ldr	r2, [pc, #248]	; (80029fc <HAL_UART_MspInit+0x1cc>)
 8002902:	635a      	str	r2, [r3, #52]	; 0x34
 8002904:	4a3d      	ldr	r2, [pc, #244]	; (80029fc <HAL_UART_MspInit+0x1cc>)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800290a:	2200      	movs	r2, #0
 800290c:	2105      	movs	r1, #5
 800290e:	2025      	movs	r0, #37	; 0x25
 8002910:	f001 f8b2 	bl	8003a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002914:	2025      	movs	r0, #37	; 0x25
 8002916:	f001 f8cb 	bl	8003ab0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800291a:	e114      	b.n	8002b46 <HAL_UART_MspInit+0x316>
  else if(uartHandle->Instance==USART3)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a38      	ldr	r2, [pc, #224]	; (8002a04 <HAL_UART_MspInit+0x1d4>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d176      	bne.n	8002a14 <HAL_UART_MspInit+0x1e4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	61bb      	str	r3, [r7, #24]
 800292a:	4b32      	ldr	r3, [pc, #200]	; (80029f4 <HAL_UART_MspInit+0x1c4>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	4a31      	ldr	r2, [pc, #196]	; (80029f4 <HAL_UART_MspInit+0x1c4>)
 8002930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002934:	6413      	str	r3, [r2, #64]	; 0x40
 8002936:	4b2f      	ldr	r3, [pc, #188]	; (80029f4 <HAL_UART_MspInit+0x1c4>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800293e:	61bb      	str	r3, [r7, #24]
 8002940:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	4b2b      	ldr	r3, [pc, #172]	; (80029f4 <HAL_UART_MspInit+0x1c4>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	4a2a      	ldr	r2, [pc, #168]	; (80029f4 <HAL_UART_MspInit+0x1c4>)
 800294c:	f043 0304 	orr.w	r3, r3, #4
 8002950:	6313      	str	r3, [r2, #48]	; 0x30
 8002952:	4b28      	ldr	r3, [pc, #160]	; (80029f4 <HAL_UART_MspInit+0x1c4>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800295e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002964:	2302      	movs	r3, #2
 8002966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296c:	2303      	movs	r3, #3
 800296e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002970:	2307      	movs	r3, #7
 8002972:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002978:	4619      	mov	r1, r3
 800297a:	4823      	ldr	r0, [pc, #140]	; (8002a08 <HAL_UART_MspInit+0x1d8>)
 800297c:	f001 fc22 	bl	80041c4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002980:	4b22      	ldr	r3, [pc, #136]	; (8002a0c <HAL_UART_MspInit+0x1dc>)
 8002982:	4a23      	ldr	r2, [pc, #140]	; (8002a10 <HAL_UART_MspInit+0x1e0>)
 8002984:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002986:	4b21      	ldr	r3, [pc, #132]	; (8002a0c <HAL_UART_MspInit+0x1dc>)
 8002988:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800298c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800298e:	4b1f      	ldr	r3, [pc, #124]	; (8002a0c <HAL_UART_MspInit+0x1dc>)
 8002990:	2200      	movs	r2, #0
 8002992:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002994:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <HAL_UART_MspInit+0x1dc>)
 8002996:	2200      	movs	r2, #0
 8002998:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800299a:	4b1c      	ldr	r3, [pc, #112]	; (8002a0c <HAL_UART_MspInit+0x1dc>)
 800299c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029a0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029a2:	4b1a      	ldr	r3, [pc, #104]	; (8002a0c <HAL_UART_MspInit+0x1dc>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029a8:	4b18      	ldr	r3, [pc, #96]	; (8002a0c <HAL_UART_MspInit+0x1dc>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80029ae:	4b17      	ldr	r3, [pc, #92]	; (8002a0c <HAL_UART_MspInit+0x1dc>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80029b4:	4b15      	ldr	r3, [pc, #84]	; (8002a0c <HAL_UART_MspInit+0x1dc>)
 80029b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029ba:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029bc:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <HAL_UART_MspInit+0x1dc>)
 80029be:	2200      	movs	r2, #0
 80029c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80029c2:	4812      	ldr	r0, [pc, #72]	; (8002a0c <HAL_UART_MspInit+0x1dc>)
 80029c4:	f001 f882 	bl	8003acc <HAL_DMA_Init>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 80029ce:	f7ff f9f9 	bl	8001dc4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a0d      	ldr	r2, [pc, #52]	; (8002a0c <HAL_UART_MspInit+0x1dc>)
 80029d6:	639a      	str	r2, [r3, #56]	; 0x38
 80029d8:	4a0c      	ldr	r2, [pc, #48]	; (8002a0c <HAL_UART_MspInit+0x1dc>)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80029de:	2200      	movs	r2, #0
 80029e0:	2105      	movs	r1, #5
 80029e2:	2027      	movs	r0, #39	; 0x27
 80029e4:	f001 f848 	bl	8003a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80029e8:	2027      	movs	r0, #39	; 0x27
 80029ea:	f001 f861 	bl	8003ab0 <HAL_NVIC_EnableIRQ>
}
 80029ee:	e0aa      	b.n	8002b46 <HAL_UART_MspInit+0x316>
 80029f0:	40011000 	.word	0x40011000
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40020000 	.word	0x40020000
 80029fc:	20004dfc 	.word	0x20004dfc
 8002a00:	400264b8 	.word	0x400264b8
 8002a04:	40004800 	.word	0x40004800
 8002a08:	40020800 	.word	0x40020800
 8002a0c:	20004d58 	.word	0x20004d58
 8002a10:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a4d      	ldr	r2, [pc, #308]	; (8002b50 <HAL_UART_MspInit+0x320>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	f040 8093 	bne.w	8002b46 <HAL_UART_MspInit+0x316>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a20:	2300      	movs	r3, #0
 8002a22:	613b      	str	r3, [r7, #16]
 8002a24:	4b4b      	ldr	r3, [pc, #300]	; (8002b54 <HAL_UART_MspInit+0x324>)
 8002a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a28:	4a4a      	ldr	r2, [pc, #296]	; (8002b54 <HAL_UART_MspInit+0x324>)
 8002a2a:	f043 0320 	orr.w	r3, r3, #32
 8002a2e:	6453      	str	r3, [r2, #68]	; 0x44
 8002a30:	4b48      	ldr	r3, [pc, #288]	; (8002b54 <HAL_UART_MspInit+0x324>)
 8002a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a34:	f003 0320 	and.w	r3, r3, #32
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	4b44      	ldr	r3, [pc, #272]	; (8002b54 <HAL_UART_MspInit+0x324>)
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	4a43      	ldr	r2, [pc, #268]	; (8002b54 <HAL_UART_MspInit+0x324>)
 8002a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4c:	4b41      	ldr	r3, [pc, #260]	; (8002b54 <HAL_UART_MspInit+0x324>)
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8002a58:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a66:	2303      	movs	r3, #3
 8002a68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002a6a:	2308      	movs	r3, #8
 8002a6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a72:	4619      	mov	r1, r3
 8002a74:	4838      	ldr	r0, [pc, #224]	; (8002b58 <HAL_UART_MspInit+0x328>)
 8002a76:	f001 fba5 	bl	80041c4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002a7a:	4b38      	ldr	r3, [pc, #224]	; (8002b5c <HAL_UART_MspInit+0x32c>)
 8002a7c:	4a38      	ldr	r2, [pc, #224]	; (8002b60 <HAL_UART_MspInit+0x330>)
 8002a7e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002a80:	4b36      	ldr	r3, [pc, #216]	; (8002b5c <HAL_UART_MspInit+0x32c>)
 8002a82:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002a86:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a88:	4b34      	ldr	r3, [pc, #208]	; (8002b5c <HAL_UART_MspInit+0x32c>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a8e:	4b33      	ldr	r3, [pc, #204]	; (8002b5c <HAL_UART_MspInit+0x32c>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a94:	4b31      	ldr	r3, [pc, #196]	; (8002b5c <HAL_UART_MspInit+0x32c>)
 8002a96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a9a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a9c:	4b2f      	ldr	r3, [pc, #188]	; (8002b5c <HAL_UART_MspInit+0x32c>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002aa2:	4b2e      	ldr	r3, [pc, #184]	; (8002b5c <HAL_UART_MspInit+0x32c>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002aa8:	4b2c      	ldr	r3, [pc, #176]	; (8002b5c <HAL_UART_MspInit+0x32c>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002aae:	4b2b      	ldr	r3, [pc, #172]	; (8002b5c <HAL_UART_MspInit+0x32c>)
 8002ab0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ab4:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ab6:	4b29      	ldr	r3, [pc, #164]	; (8002b5c <HAL_UART_MspInit+0x32c>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002abc:	4827      	ldr	r0, [pc, #156]	; (8002b5c <HAL_UART_MspInit+0x32c>)
 8002abe:	f001 f805 	bl	8003acc <HAL_DMA_Init>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <HAL_UART_MspInit+0x29c>
      Error_Handler();
 8002ac8:	f7ff f97c 	bl	8001dc4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a23      	ldr	r2, [pc, #140]	; (8002b5c <HAL_UART_MspInit+0x32c>)
 8002ad0:	639a      	str	r2, [r3, #56]	; 0x38
 8002ad2:	4a22      	ldr	r2, [pc, #136]	; (8002b5c <HAL_UART_MspInit+0x32c>)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002ad8:	4b22      	ldr	r3, [pc, #136]	; (8002b64 <HAL_UART_MspInit+0x334>)
 8002ada:	4a23      	ldr	r2, [pc, #140]	; (8002b68 <HAL_UART_MspInit+0x338>)
 8002adc:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002ade:	4b21      	ldr	r3, [pc, #132]	; (8002b64 <HAL_UART_MspInit+0x334>)
 8002ae0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002ae4:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ae6:	4b1f      	ldr	r3, [pc, #124]	; (8002b64 <HAL_UART_MspInit+0x334>)
 8002ae8:	2240      	movs	r2, #64	; 0x40
 8002aea:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aec:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <HAL_UART_MspInit+0x334>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002af2:	4b1c      	ldr	r3, [pc, #112]	; (8002b64 <HAL_UART_MspInit+0x334>)
 8002af4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002af8:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002afa:	4b1a      	ldr	r3, [pc, #104]	; (8002b64 <HAL_UART_MspInit+0x334>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b00:	4b18      	ldr	r3, [pc, #96]	; (8002b64 <HAL_UART_MspInit+0x334>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002b06:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <HAL_UART_MspInit+0x334>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002b0c:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <HAL_UART_MspInit+0x334>)
 8002b0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b12:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b14:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <HAL_UART_MspInit+0x334>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002b1a:	4812      	ldr	r0, [pc, #72]	; (8002b64 <HAL_UART_MspInit+0x334>)
 8002b1c:	f000 ffd6 	bl	8003acc <HAL_DMA_Init>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_UART_MspInit+0x2fa>
      Error_Handler();
 8002b26:	f7ff f94d 	bl	8001dc4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a0d      	ldr	r2, [pc, #52]	; (8002b64 <HAL_UART_MspInit+0x334>)
 8002b2e:	635a      	str	r2, [r3, #52]	; 0x34
 8002b30:	4a0c      	ldr	r2, [pc, #48]	; (8002b64 <HAL_UART_MspInit+0x334>)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002b36:	2200      	movs	r2, #0
 8002b38:	2105      	movs	r1, #5
 8002b3a:	2047      	movs	r0, #71	; 0x47
 8002b3c:	f000 ff9c 	bl	8003a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002b40:	2047      	movs	r0, #71	; 0x47
 8002b42:	f000 ffb5 	bl	8003ab0 <HAL_NVIC_EnableIRQ>
}
 8002b46:	bf00      	nop
 8002b48:	3738      	adds	r7, #56	; 0x38
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40011400 	.word	0x40011400
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40021800 	.word	0x40021800
 8002b5c:	20004cf8 	.word	0x20004cf8
 8002b60:	40026428 	.word	0x40026428
 8002b64:	20004e5c 	.word	0x20004e5c
 8002b68:	400264a0 	.word	0x400264a0

08002b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ba4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b70:	480d      	ldr	r0, [pc, #52]	; (8002ba8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b72:	490e      	ldr	r1, [pc, #56]	; (8002bac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b74:	4a0e      	ldr	r2, [pc, #56]	; (8002bb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b78:	e002      	b.n	8002b80 <LoopCopyDataInit>

08002b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b7e:	3304      	adds	r3, #4

08002b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b84:	d3f9      	bcc.n	8002b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b86:	4a0b      	ldr	r2, [pc, #44]	; (8002bb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b88:	4c0b      	ldr	r4, [pc, #44]	; (8002bb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b8c:	e001      	b.n	8002b92 <LoopFillZerobss>

08002b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b90:	3204      	adds	r2, #4

08002b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b94:	d3fb      	bcc.n	8002b8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b96:	f7ff fb83 	bl	80022a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b9a:	f00a f89f 	bl	800ccdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b9e:	f7ff f853 	bl	8001c48 <main>
  bx  lr    
 8002ba2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ba4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bac:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002bb0:	0800ce18 	.word	0x0800ce18
  ldr r2, =_sbss
 8002bb4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002bb8:	20005390 	.word	0x20005390

08002bbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bbc:	e7fe      	b.n	8002bbc <ADC_IRQHandler>
	...

08002bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bc4:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <HAL_Init+0x40>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a0d      	ldr	r2, [pc, #52]	; (8002c00 <HAL_Init+0x40>)
 8002bca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_Init+0x40>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a0a      	ldr	r2, [pc, #40]	; (8002c00 <HAL_Init+0x40>)
 8002bd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bdc:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <HAL_Init+0x40>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a07      	ldr	r2, [pc, #28]	; (8002c00 <HAL_Init+0x40>)
 8002be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002be8:	2003      	movs	r0, #3
 8002bea:	f000 ff3a 	bl	8003a62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f7ff fa5a 	bl	80020a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bf4:	f7ff fa2c 	bl	8002050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40023c00 	.word	0x40023c00

08002c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c08:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <HAL_IncTick+0x20>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <HAL_IncTick+0x24>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4413      	add	r3, r2
 8002c14:	4a04      	ldr	r2, [pc, #16]	; (8002c28 <HAL_IncTick+0x24>)
 8002c16:	6013      	str	r3, [r2, #0]
}
 8002c18:	bf00      	nop
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	20000008 	.word	0x20000008
 8002c28:	20004f44 	.word	0x20004f44

08002c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c30:	4b03      	ldr	r3, [pc, #12]	; (8002c40 <HAL_GetTick+0x14>)
 8002c32:	681b      	ldr	r3, [r3, #0]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	20004f44 	.word	0x20004f44

08002c44 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e0ed      	b.n	8002e32 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d102      	bne.n	8002c68 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7fe fe10 	bl	8001888 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0201 	orr.w	r2, r2, #1
 8002c76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c78:	f7ff ffd8 	bl	8002c2c <HAL_GetTick>
 8002c7c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c7e:	e012      	b.n	8002ca6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c80:	f7ff ffd4 	bl	8002c2c <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b0a      	cmp	r3, #10
 8002c8c:	d90b      	bls.n	8002ca6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2205      	movs	r2, #5
 8002c9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e0c5      	b.n	8002e32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0e5      	beq.n	8002c80 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0202 	bic.w	r2, r2, #2
 8002cc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cc4:	f7ff ffb2 	bl	8002c2c <HAL_GetTick>
 8002cc8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002cca:	e012      	b.n	8002cf2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ccc:	f7ff ffae 	bl	8002c2c <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b0a      	cmp	r3, #10
 8002cd8:	d90b      	bls.n	8002cf2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2205      	movs	r2, #5
 8002cea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e09f      	b.n	8002e32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1e5      	bne.n	8002ccc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	7e1b      	ldrb	r3, [r3, #24]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d108      	bne.n	8002d1a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	e007      	b.n	8002d2a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	7e5b      	ldrb	r3, [r3, #25]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d108      	bne.n	8002d44 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	e007      	b.n	8002d54 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d52:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	7e9b      	ldrb	r3, [r3, #26]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d108      	bne.n	8002d6e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0220 	orr.w	r2, r2, #32
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	e007      	b.n	8002d7e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0220 	bic.w	r2, r2, #32
 8002d7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	7edb      	ldrb	r3, [r3, #27]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d108      	bne.n	8002d98 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0210 	bic.w	r2, r2, #16
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	e007      	b.n	8002da8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0210 	orr.w	r2, r2, #16
 8002da6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	7f1b      	ldrb	r3, [r3, #28]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d108      	bne.n	8002dc2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0208 	orr.w	r2, r2, #8
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	e007      	b.n	8002dd2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0208 	bic.w	r2, r2, #8
 8002dd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	7f5b      	ldrb	r3, [r3, #29]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d108      	bne.n	8002dec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0204 	orr.w	r2, r2, #4
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	e007      	b.n	8002dfc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0204 	bic.w	r2, r2, #4
 8002dfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	ea42 0103 	orr.w	r1, r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	1e5a      	subs	r2, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
	...

08002e3c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e52:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002e54:	7cfb      	ldrb	r3, [r7, #19]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d003      	beq.n	8002e62 <HAL_CAN_ConfigFilter+0x26>
 8002e5a:	7cfb      	ldrb	r3, [r7, #19]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	f040 80be 	bne.w	8002fde <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002e62:	4b65      	ldr	r3, [pc, #404]	; (8002ff8 <HAL_CAN_ConfigFilter+0x1bc>)
 8002e64:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e6c:	f043 0201 	orr.w	r2, r3, #1
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e7c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	021b      	lsls	r3, r3, #8
 8002e92:	431a      	orrs	r2, r3
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f003 031f 	and.w	r3, r3, #31
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	401a      	ands	r2, r3
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d123      	bne.n	8002f0c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	401a      	ands	r2, r3
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002ee6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	3248      	adds	r2, #72	; 0x48
 8002eec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f00:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f02:	6979      	ldr	r1, [r7, #20]
 8002f04:	3348      	adds	r3, #72	; 0x48
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	440b      	add	r3, r1
 8002f0a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d122      	bne.n	8002f5a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002f34:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	3248      	adds	r2, #72	; 0x48
 8002f3a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f4e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f50:	6979      	ldr	r1, [r7, #20]
 8002f52:	3348      	adds	r3, #72	; 0x48
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	440b      	add	r3, r1
 8002f58:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d109      	bne.n	8002f76 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	401a      	ands	r2, r3
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002f74:	e007      	b.n	8002f86 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	43db      	mvns	r3, r3
 8002f98:	401a      	ands	r2, r3
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002fa0:	e007      	b.n	8002fb2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d107      	bne.n	8002fca <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002fd0:	f023 0201 	bic.w	r2, r3, #1
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	e006      	b.n	8002fec <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
  }
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	371c      	adds	r7, #28
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	40006400 	.word	0x40006400

08002ffc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3020 	ldrb.w	r3, [r3, #32]
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b01      	cmp	r3, #1
 800300e:	d12e      	bne.n	800306e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0201 	bic.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003028:	f7ff fe00 	bl	8002c2c <HAL_GetTick>
 800302c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800302e:	e012      	b.n	8003056 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003030:	f7ff fdfc 	bl	8002c2c <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b0a      	cmp	r3, #10
 800303c:	d90b      	bls.n	8003056 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2205      	movs	r2, #5
 800304e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e012      	b.n	800307c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1e5      	bne.n	8003030 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	e006      	b.n	800307c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
  }
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003084:	b480      	push	{r7}
 8003086:	b089      	sub	sp, #36	; 0x24
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003098:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80030a2:	7ffb      	ldrb	r3, [r7, #31]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d003      	beq.n	80030b0 <HAL_CAN_AddTxMessage+0x2c>
 80030a8:	7ffb      	ldrb	r3, [r7, #31]
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	f040 80b8 	bne.w	8003220 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10a      	bne.n	80030d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d105      	bne.n	80030d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 80a0 	beq.w	8003210 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	0e1b      	lsrs	r3, r3, #24
 80030d4:	f003 0303 	and.w	r3, r3, #3
 80030d8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d907      	bls.n	80030f0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e09e      	b.n	800322e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80030f0:	2201      	movs	r2, #1
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	409a      	lsls	r2, r3
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10d      	bne.n	800311e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800310c:	68f9      	ldr	r1, [r7, #12]
 800310e:	6809      	ldr	r1, [r1, #0]
 8003110:	431a      	orrs	r2, r3
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	3318      	adds	r3, #24
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	440b      	add	r3, r1
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	e00f      	b.n	800313e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003128:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800312e:	68f9      	ldr	r1, [r7, #12]
 8003130:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003132:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	3318      	adds	r3, #24
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	440b      	add	r3, r1
 800313c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6819      	ldr	r1, [r3, #0]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	691a      	ldr	r2, [r3, #16]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	3318      	adds	r3, #24
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	440b      	add	r3, r1
 800314e:	3304      	adds	r3, #4
 8003150:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	7d1b      	ldrb	r3, [r3, #20]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d111      	bne.n	800317e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	3318      	adds	r3, #24
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	4413      	add	r3, r2
 8003166:	3304      	adds	r3, #4
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	6811      	ldr	r1, [r2, #0]
 800316e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	3318      	adds	r3, #24
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	440b      	add	r3, r1
 800317a:	3304      	adds	r3, #4
 800317c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3307      	adds	r3, #7
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	061a      	lsls	r2, r3, #24
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3306      	adds	r3, #6
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	041b      	lsls	r3, r3, #16
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3305      	adds	r3, #5
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	021b      	lsls	r3, r3, #8
 8003198:	4313      	orrs	r3, r2
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	3204      	adds	r2, #4
 800319e:	7812      	ldrb	r2, [r2, #0]
 80031a0:	4610      	mov	r0, r2
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	6811      	ldr	r1, [r2, #0]
 80031a6:	ea43 0200 	orr.w	r2, r3, r0
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	440b      	add	r3, r1
 80031b0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80031b4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3303      	adds	r3, #3
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	061a      	lsls	r2, r3, #24
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3302      	adds	r3, #2
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	041b      	lsls	r3, r3, #16
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3301      	adds	r3, #1
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	4313      	orrs	r3, r2
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	7812      	ldrb	r2, [r2, #0]
 80031d6:	4610      	mov	r0, r2
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	6811      	ldr	r1, [r2, #0]
 80031dc:	ea43 0200 	orr.w	r2, r3, r0
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	440b      	add	r3, r1
 80031e6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80031ea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	3318      	adds	r3, #24
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	4413      	add	r3, r2
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	6811      	ldr	r1, [r2, #0]
 80031fe:	f043 0201 	orr.w	r2, r3, #1
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	3318      	adds	r3, #24
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	440b      	add	r3, r1
 800320a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800320c:	2300      	movs	r3, #0
 800320e:	e00e      	b.n	800322e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e006      	b.n	800322e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
  }
}
 800322e:	4618      	mov	r0, r3
 8003230:	3724      	adds	r7, #36	; 0x24
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800323a:	b480      	push	{r7}
 800323c:	b087      	sub	sp, #28
 800323e:	af00      	add	r7, sp, #0
 8003240:	60f8      	str	r0, [r7, #12]
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	607a      	str	r2, [r7, #4]
 8003246:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800324e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003250:	7dfb      	ldrb	r3, [r7, #23]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d003      	beq.n	800325e <HAL_CAN_GetRxMessage+0x24>
 8003256:	7dfb      	ldrb	r3, [r7, #23]
 8003258:	2b02      	cmp	r3, #2
 800325a:	f040 80f3 	bne.w	8003444 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10e      	bne.n	8003282 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d116      	bne.n	80032a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e0e7      	b.n	8003452 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	f003 0303 	and.w	r3, r3, #3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d107      	bne.n	80032a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e0d8      	b.n	8003452 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	331b      	adds	r3, #27
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	4413      	add	r3, r2
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0204 	and.w	r2, r3, #4
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10c      	bne.n	80032d8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	331b      	adds	r3, #27
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	4413      	add	r3, r2
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	0d5b      	lsrs	r3, r3, #21
 80032ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	e00b      	b.n	80032f0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	331b      	adds	r3, #27
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	4413      	add	r3, r2
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	08db      	lsrs	r3, r3, #3
 80032e8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	331b      	adds	r3, #27
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	4413      	add	r3, r2
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0202 	and.w	r2, r3, #2
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	331b      	adds	r3, #27
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	4413      	add	r3, r2
 8003312:	3304      	adds	r3, #4
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 020f 	and.w	r2, r3, #15
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	331b      	adds	r3, #27
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	4413      	add	r3, r2
 800332a:	3304      	adds	r3, #4
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	0a1b      	lsrs	r3, r3, #8
 8003330:	b2da      	uxtb	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	331b      	adds	r3, #27
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	4413      	add	r3, r2
 8003342:	3304      	adds	r3, #4
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	0c1b      	lsrs	r3, r3, #16
 8003348:	b29a      	uxth	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	4413      	add	r3, r2
 8003358:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	b2da      	uxtb	r2, r3
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	4413      	add	r3, r2
 800336e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	0a1a      	lsrs	r2, r3, #8
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	3301      	adds	r3, #1
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	4413      	add	r3, r2
 8003388:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	0c1a      	lsrs	r2, r3, #16
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	3302      	adds	r3, #2
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	4413      	add	r3, r2
 80033a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	0e1a      	lsrs	r2, r3, #24
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	3303      	adds	r3, #3
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	3304      	adds	r3, #4
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	0a1a      	lsrs	r2, r3, #8
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	3305      	adds	r3, #5
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	4413      	add	r3, r2
 80033ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	0c1a      	lsrs	r2, r3, #16
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	3306      	adds	r3, #6
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	4413      	add	r3, r2
 8003408:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	0e1a      	lsrs	r2, r3, #24
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	3307      	adds	r3, #7
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d108      	bne.n	8003430 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68da      	ldr	r2, [r3, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f042 0220 	orr.w	r2, r2, #32
 800342c:	60da      	str	r2, [r3, #12]
 800342e:	e007      	b.n	8003440 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	691a      	ldr	r2, [r3, #16]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0220 	orr.w	r2, r2, #32
 800343e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	e006      	b.n	8003452 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
  }
}
 8003452:	4618      	mov	r0, r3
 8003454:	371c      	adds	r7, #28
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800345e:	b480      	push	{r7}
 8003460:	b085      	sub	sp, #20
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800346e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d002      	beq.n	800347c <HAL_CAN_ActivateNotification+0x1e>
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	2b02      	cmp	r3, #2
 800347a:	d109      	bne.n	8003490 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6959      	ldr	r1, [r3, #20]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	e006      	b.n	800349e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
  }
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b08a      	sub	sp, #40	; 0x28
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80034b2:	2300      	movs	r3, #0
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d07c      	beq.n	80035ea <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d023      	beq.n	8003542 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2201      	movs	r2, #1
 8003500:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f983 	bl	8003818 <HAL_CAN_TxMailbox0CompleteCallback>
 8003512:	e016      	b.n	8003542 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	2b00      	cmp	r3, #0
 800351c:	d004      	beq.n	8003528 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
 8003526:	e00c      	b.n	8003542 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d004      	beq.n	800353c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003538:	627b      	str	r3, [r7, #36]	; 0x24
 800353a:	e002      	b.n	8003542 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f989 	bl	8003854 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003548:	2b00      	cmp	r3, #0
 800354a:	d024      	beq.n	8003596 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003554:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f963 	bl	800382c <HAL_CAN_TxMailbox1CompleteCallback>
 8003566:	e016      	b.n	8003596 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356e:	2b00      	cmp	r3, #0
 8003570:	d004      	beq.n	800357c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
 800357a:	e00c      	b.n	8003596 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003582:	2b00      	cmp	r3, #0
 8003584:	d004      	beq.n	8003590 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
 800358e:	e002      	b.n	8003596 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f969 	bl	8003868 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d024      	beq.n	80035ea <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80035a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f943 	bl	8003840 <HAL_CAN_TxMailbox2CompleteCallback>
 80035ba:	e016      	b.n	80035ea <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d004      	beq.n	80035d0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
 80035ce:	e00c      	b.n	80035ea <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d004      	beq.n	80035e4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
 80035e2:	e002      	b.n	80035ea <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f949 	bl	800387c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00c      	beq.n	800360e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d007      	beq.n	800360e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003604:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2210      	movs	r2, #16
 800360c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00b      	beq.n	8003630 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d006      	beq.n	8003630 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2208      	movs	r2, #8
 8003628:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f930 	bl	8003890 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d009      	beq.n	800364e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0303 	and.w	r3, r3, #3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7fd fa4b 	bl	8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00c      	beq.n	8003672 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f003 0310 	and.w	r3, r3, #16
 800365e:	2b00      	cmp	r3, #0
 8003660:	d007      	beq.n	8003672 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003668:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2210      	movs	r2, #16
 8003670:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00b      	beq.n	8003694 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d006      	beq.n	8003694 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2208      	movs	r2, #8
 800368c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f912 	bl	80038b8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	f003 0310 	and.w	r3, r3, #16
 800369a:	2b00      	cmp	r3, #0
 800369c:	d009      	beq.n	80036b2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	f003 0303 	and.w	r3, r3, #3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f8f9 	bl	80038a4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00b      	beq.n	80036d4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f003 0310 	and.w	r3, r3, #16
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d006      	beq.n	80036d4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2210      	movs	r2, #16
 80036cc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f8fc 	bl	80038cc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00b      	beq.n	80036f6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d006      	beq.n	80036f6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2208      	movs	r2, #8
 80036ee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f8f5 	bl	80038e0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d07b      	beq.n	80037f8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	d072      	beq.n	80037f0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003710:	2b00      	cmp	r3, #0
 8003712:	d008      	beq.n	8003726 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	f043 0302 	orr.w	r3, r3, #2
 8003740:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	f043 0304 	orr.w	r3, r3, #4
 800375c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003764:	2b00      	cmp	r3, #0
 8003766:	d043      	beq.n	80037f0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800376e:	2b00      	cmp	r3, #0
 8003770:	d03e      	beq.n	80037f0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003778:	2b60      	cmp	r3, #96	; 0x60
 800377a:	d02b      	beq.n	80037d4 <HAL_CAN_IRQHandler+0x32a>
 800377c:	2b60      	cmp	r3, #96	; 0x60
 800377e:	d82e      	bhi.n	80037de <HAL_CAN_IRQHandler+0x334>
 8003780:	2b50      	cmp	r3, #80	; 0x50
 8003782:	d022      	beq.n	80037ca <HAL_CAN_IRQHandler+0x320>
 8003784:	2b50      	cmp	r3, #80	; 0x50
 8003786:	d82a      	bhi.n	80037de <HAL_CAN_IRQHandler+0x334>
 8003788:	2b40      	cmp	r3, #64	; 0x40
 800378a:	d019      	beq.n	80037c0 <HAL_CAN_IRQHandler+0x316>
 800378c:	2b40      	cmp	r3, #64	; 0x40
 800378e:	d826      	bhi.n	80037de <HAL_CAN_IRQHandler+0x334>
 8003790:	2b30      	cmp	r3, #48	; 0x30
 8003792:	d010      	beq.n	80037b6 <HAL_CAN_IRQHandler+0x30c>
 8003794:	2b30      	cmp	r3, #48	; 0x30
 8003796:	d822      	bhi.n	80037de <HAL_CAN_IRQHandler+0x334>
 8003798:	2b10      	cmp	r3, #16
 800379a:	d002      	beq.n	80037a2 <HAL_CAN_IRQHandler+0x2f8>
 800379c:	2b20      	cmp	r3, #32
 800379e:	d005      	beq.n	80037ac <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80037a0:	e01d      	b.n	80037de <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	f043 0308 	orr.w	r3, r3, #8
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037aa:	e019      	b.n	80037e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	f043 0310 	orr.w	r3, r3, #16
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037b4:	e014      	b.n	80037e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	f043 0320 	orr.w	r3, r3, #32
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037be:	e00f      	b.n	80037e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037c8:	e00a      	b.n	80037e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037d2:	e005      	b.n	80037e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037dc:	e000      	b.n	80037e0 <HAL_CAN_IRQHandler+0x336>
            break;
 80037de:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80037ee:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2204      	movs	r2, #4
 80037f6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d008      	beq.n	8003810 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f872 	bl	80038f4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003810:	bf00      	nop
 8003812:	3728      	adds	r7, #40	; 0x28
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003918:	4b0c      	ldr	r3, [pc, #48]	; (800394c <__NVIC_SetPriorityGrouping+0x44>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003924:	4013      	ands	r3, r2
 8003926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800393a:	4a04      	ldr	r2, [pc, #16]	; (800394c <__NVIC_SetPriorityGrouping+0x44>)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	60d3      	str	r3, [r2, #12]
}
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	e000ed00 	.word	0xe000ed00

08003950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003954:	4b04      	ldr	r3, [pc, #16]	; (8003968 <__NVIC_GetPriorityGrouping+0x18>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	0a1b      	lsrs	r3, r3, #8
 800395a:	f003 0307 	and.w	r3, r3, #7
}
 800395e:	4618      	mov	r0, r3
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	e000ed00 	.word	0xe000ed00

0800396c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397a:	2b00      	cmp	r3, #0
 800397c:	db0b      	blt.n	8003996 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800397e:	79fb      	ldrb	r3, [r7, #7]
 8003980:	f003 021f 	and.w	r2, r3, #31
 8003984:	4907      	ldr	r1, [pc, #28]	; (80039a4 <__NVIC_EnableIRQ+0x38>)
 8003986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	2001      	movs	r0, #1
 800398e:	fa00 f202 	lsl.w	r2, r0, r2
 8003992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	e000e100 	.word	0xe000e100

080039a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	4603      	mov	r3, r0
 80039b0:	6039      	str	r1, [r7, #0]
 80039b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	db0a      	blt.n	80039d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	490c      	ldr	r1, [pc, #48]	; (80039f4 <__NVIC_SetPriority+0x4c>)
 80039c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c6:	0112      	lsls	r2, r2, #4
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	440b      	add	r3, r1
 80039cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039d0:	e00a      	b.n	80039e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	4908      	ldr	r1, [pc, #32]	; (80039f8 <__NVIC_SetPriority+0x50>)
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	3b04      	subs	r3, #4
 80039e0:	0112      	lsls	r2, r2, #4
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	440b      	add	r3, r1
 80039e6:	761a      	strb	r2, [r3, #24]
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	e000e100 	.word	0xe000e100
 80039f8:	e000ed00 	.word	0xe000ed00

080039fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b089      	sub	sp, #36	; 0x24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f1c3 0307 	rsb	r3, r3, #7
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	bf28      	it	cs
 8003a1a:	2304      	movcs	r3, #4
 8003a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	3304      	adds	r3, #4
 8003a22:	2b06      	cmp	r3, #6
 8003a24:	d902      	bls.n	8003a2c <NVIC_EncodePriority+0x30>
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	3b03      	subs	r3, #3
 8003a2a:	e000      	b.n	8003a2e <NVIC_EncodePriority+0x32>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a30:	f04f 32ff 	mov.w	r2, #4294967295
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43da      	mvns	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	401a      	ands	r2, r3
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a44:	f04f 31ff 	mov.w	r1, #4294967295
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4e:	43d9      	mvns	r1, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a54:	4313      	orrs	r3, r2
         );
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3724      	adds	r7, #36	; 0x24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b082      	sub	sp, #8
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff ff4c 	bl	8003908 <__NVIC_SetPriorityGrouping>
}
 8003a70:	bf00      	nop
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a8a:	f7ff ff61 	bl	8003950 <__NVIC_GetPriorityGrouping>
 8003a8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	68b9      	ldr	r1, [r7, #8]
 8003a94:	6978      	ldr	r0, [r7, #20]
 8003a96:	f7ff ffb1 	bl	80039fc <NVIC_EncodePriority>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff ff80 	bl	80039a8 <__NVIC_SetPriority>
}
 8003aa8:	bf00      	nop
 8003aaa:	3718      	adds	r7, #24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff ff54 	bl	800396c <__NVIC_EnableIRQ>
}
 8003ac4:	bf00      	nop
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ad8:	f7ff f8a8 	bl	8002c2c <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e099      	b.n	8003c1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0201 	bic.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b08:	e00f      	b.n	8003b2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b0a:	f7ff f88f 	bl	8002c2c <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b05      	cmp	r3, #5
 8003b16:	d908      	bls.n	8003b2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2203      	movs	r2, #3
 8003b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e078      	b.n	8003c1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1e8      	bne.n	8003b0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	4b38      	ldr	r3, [pc, #224]	; (8003c24 <HAL_DMA_Init+0x158>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d107      	bne.n	8003b94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f023 0307 	bic.w	r3, r3, #7
 8003baa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d117      	bne.n	8003bee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00e      	beq.n	8003bee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 fa7b 	bl	80040cc <DMA_CheckFifoParam>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d008      	beq.n	8003bee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2240      	movs	r2, #64	; 0x40
 8003be0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003bea:	2301      	movs	r3, #1
 8003bec:	e016      	b.n	8003c1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 fa32 	bl	8004060 <DMA_CalcBaseAndBitshift>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c04:	223f      	movs	r2, #63	; 0x3f
 8003c06:	409a      	lsls	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	f010803f 	.word	0xf010803f

08003c28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c36:	f7fe fff9 	bl	8002c2c <HAL_GetTick>
 8003c3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d008      	beq.n	8003c5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2280      	movs	r2, #128	; 0x80
 8003c4c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e052      	b.n	8003d00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0216 	bic.w	r2, r2, #22
 8003c68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695a      	ldr	r2, [r3, #20]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d103      	bne.n	8003c8a <HAL_DMA_Abort+0x62>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d007      	beq.n	8003c9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0208 	bic.w	r2, r2, #8
 8003c98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0201 	bic.w	r2, r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003caa:	e013      	b.n	8003cd4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cac:	f7fe ffbe 	bl	8002c2c <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b05      	cmp	r3, #5
 8003cb8:	d90c      	bls.n	8003cd4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e015      	b.n	8003d00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e4      	bne.n	8003cac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce6:	223f      	movs	r2, #63	; 0x3f
 8003ce8:	409a      	lsls	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d004      	beq.n	8003d26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2280      	movs	r2, #128	; 0x80
 8003d20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e00c      	b.n	8003d40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2205      	movs	r2, #5
 8003d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0201 	bic.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d58:	4b92      	ldr	r3, [pc, #584]	; (8003fa4 <HAL_DMA_IRQHandler+0x258>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a92      	ldr	r2, [pc, #584]	; (8003fa8 <HAL_DMA_IRQHandler+0x25c>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	0a9b      	lsrs	r3, r3, #10
 8003d64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d76:	2208      	movs	r2, #8
 8003d78:	409a      	lsls	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d01a      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d013      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0204 	bic.w	r2, r2, #4
 8003d9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da4:	2208      	movs	r2, #8
 8003da6:	409a      	lsls	r2, r3
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db0:	f043 0201 	orr.w	r2, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d012      	beq.n	8003dee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00b      	beq.n	8003dee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dda:	2201      	movs	r2, #1
 8003ddc:	409a      	lsls	r2, r3
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de6:	f043 0202 	orr.w	r2, r3, #2
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df2:	2204      	movs	r2, #4
 8003df4:	409a      	lsls	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d012      	beq.n	8003e24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00b      	beq.n	8003e24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e10:	2204      	movs	r2, #4
 8003e12:	409a      	lsls	r2, r3
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1c:	f043 0204 	orr.w	r2, r3, #4
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e28:	2210      	movs	r2, #16
 8003e2a:	409a      	lsls	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d043      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d03c      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e46:	2210      	movs	r2, #16
 8003e48:	409a      	lsls	r2, r3
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d018      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d108      	bne.n	8003e7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d024      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	4798      	blx	r3
 8003e7a:	e01f      	b.n	8003ebc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d01b      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	4798      	blx	r3
 8003e8c:	e016      	b.n	8003ebc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d107      	bne.n	8003eac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0208 	bic.w	r2, r2, #8
 8003eaa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	409a      	lsls	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 808e 	beq.w	8003fea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0310 	and.w	r3, r3, #16
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 8086 	beq.w	8003fea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	409a      	lsls	r2, r3
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b05      	cmp	r3, #5
 8003ef4:	d136      	bne.n	8003f64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0216 	bic.w	r2, r2, #22
 8003f04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695a      	ldr	r2, [r3, #20]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d103      	bne.n	8003f26 <HAL_DMA_IRQHandler+0x1da>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d007      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0208 	bic.w	r2, r2, #8
 8003f34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3a:	223f      	movs	r2, #63	; 0x3f
 8003f3c:	409a      	lsls	r2, r3
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d07d      	beq.n	8004056 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	4798      	blx	r3
        }
        return;
 8003f62:	e078      	b.n	8004056 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d01c      	beq.n	8003fac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d108      	bne.n	8003f92 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d030      	beq.n	8003fea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	4798      	blx	r3
 8003f90:	e02b      	b.n	8003fea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d027      	beq.n	8003fea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	4798      	blx	r3
 8003fa2:	e022      	b.n	8003fea <HAL_DMA_IRQHandler+0x29e>
 8003fa4:	20000000 	.word	0x20000000
 8003fa8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10f      	bne.n	8003fda <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0210 	bic.w	r2, r2, #16
 8003fc8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d032      	beq.n	8004058 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d022      	beq.n	8004044 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2205      	movs	r2, #5
 8004002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0201 	bic.w	r2, r2, #1
 8004014:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	3301      	adds	r3, #1
 800401a:	60bb      	str	r3, [r7, #8]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	429a      	cmp	r2, r3
 8004020:	d307      	bcc.n	8004032 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1f2      	bne.n	8004016 <HAL_DMA_IRQHandler+0x2ca>
 8004030:	e000      	b.n	8004034 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004032:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004048:	2b00      	cmp	r3, #0
 800404a:	d005      	beq.n	8004058 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	4798      	blx	r3
 8004054:	e000      	b.n	8004058 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004056:	bf00      	nop
    }
  }
}
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop

08004060 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	3b10      	subs	r3, #16
 8004070:	4a14      	ldr	r2, [pc, #80]	; (80040c4 <DMA_CalcBaseAndBitshift+0x64>)
 8004072:	fba2 2303 	umull	r2, r3, r2, r3
 8004076:	091b      	lsrs	r3, r3, #4
 8004078:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800407a:	4a13      	ldr	r2, [pc, #76]	; (80040c8 <DMA_CalcBaseAndBitshift+0x68>)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4413      	add	r3, r2
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2b03      	cmp	r3, #3
 800408c:	d909      	bls.n	80040a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004096:	f023 0303 	bic.w	r3, r3, #3
 800409a:	1d1a      	adds	r2, r3, #4
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	659a      	str	r2, [r3, #88]	; 0x58
 80040a0:	e007      	b.n	80040b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040aa:	f023 0303 	bic.w	r3, r3, #3
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	aaaaaaab 	.word	0xaaaaaaab
 80040c8:	0800ce00 	.word	0x0800ce00

080040cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040d4:	2300      	movs	r3, #0
 80040d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d11f      	bne.n	8004126 <DMA_CheckFifoParam+0x5a>
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	2b03      	cmp	r3, #3
 80040ea:	d856      	bhi.n	800419a <DMA_CheckFifoParam+0xce>
 80040ec:	a201      	add	r2, pc, #4	; (adr r2, 80040f4 <DMA_CheckFifoParam+0x28>)
 80040ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f2:	bf00      	nop
 80040f4:	08004105 	.word	0x08004105
 80040f8:	08004117 	.word	0x08004117
 80040fc:	08004105 	.word	0x08004105
 8004100:	0800419b 	.word	0x0800419b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d046      	beq.n	800419e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004114:	e043      	b.n	800419e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800411e:	d140      	bne.n	80041a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004124:	e03d      	b.n	80041a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800412e:	d121      	bne.n	8004174 <DMA_CheckFifoParam+0xa8>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b03      	cmp	r3, #3
 8004134:	d837      	bhi.n	80041a6 <DMA_CheckFifoParam+0xda>
 8004136:	a201      	add	r2, pc, #4	; (adr r2, 800413c <DMA_CheckFifoParam+0x70>)
 8004138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413c:	0800414d 	.word	0x0800414d
 8004140:	08004153 	.word	0x08004153
 8004144:	0800414d 	.word	0x0800414d
 8004148:	08004165 	.word	0x08004165
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	73fb      	strb	r3, [r7, #15]
      break;
 8004150:	e030      	b.n	80041b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004156:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d025      	beq.n	80041aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004162:	e022      	b.n	80041aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800416c:	d11f      	bne.n	80041ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004172:	e01c      	b.n	80041ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2b02      	cmp	r3, #2
 8004178:	d903      	bls.n	8004182 <DMA_CheckFifoParam+0xb6>
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2b03      	cmp	r3, #3
 800417e:	d003      	beq.n	8004188 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004180:	e018      	b.n	80041b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	73fb      	strb	r3, [r7, #15]
      break;
 8004186:	e015      	b.n	80041b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00e      	beq.n	80041b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	73fb      	strb	r3, [r7, #15]
      break;
 8004198:	e00b      	b.n	80041b2 <DMA_CheckFifoParam+0xe6>
      break;
 800419a:	bf00      	nop
 800419c:	e00a      	b.n	80041b4 <DMA_CheckFifoParam+0xe8>
      break;
 800419e:	bf00      	nop
 80041a0:	e008      	b.n	80041b4 <DMA_CheckFifoParam+0xe8>
      break;
 80041a2:	bf00      	nop
 80041a4:	e006      	b.n	80041b4 <DMA_CheckFifoParam+0xe8>
      break;
 80041a6:	bf00      	nop
 80041a8:	e004      	b.n	80041b4 <DMA_CheckFifoParam+0xe8>
      break;
 80041aa:	bf00      	nop
 80041ac:	e002      	b.n	80041b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80041ae:	bf00      	nop
 80041b0:	e000      	b.n	80041b4 <DMA_CheckFifoParam+0xe8>
      break;
 80041b2:	bf00      	nop
    }
  } 
  
  return status; 
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop

080041c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b089      	sub	sp, #36	; 0x24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041ce:	2300      	movs	r3, #0
 80041d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041da:	2300      	movs	r3, #0
 80041dc:	61fb      	str	r3, [r7, #28]
 80041de:	e16b      	b.n	80044b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041e0:	2201      	movs	r2, #1
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	4013      	ands	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	f040 815a 	bne.w	80044b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	2b01      	cmp	r3, #1
 8004208:	d005      	beq.n	8004216 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004212:	2b02      	cmp	r3, #2
 8004214:	d130      	bne.n	8004278 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	2203      	movs	r2, #3
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	43db      	mvns	r3, r3
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4013      	ands	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	4313      	orrs	r3, r2
 800423e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800424c:	2201      	movs	r2, #1
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	43db      	mvns	r3, r3
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	4013      	ands	r3, r2
 800425a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	091b      	lsrs	r3, r3, #4
 8004262:	f003 0201 	and.w	r2, r3, #1
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	4313      	orrs	r3, r2
 8004270:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f003 0303 	and.w	r3, r3, #3
 8004280:	2b03      	cmp	r3, #3
 8004282:	d017      	beq.n	80042b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	2203      	movs	r2, #3
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	43db      	mvns	r3, r3
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	4013      	ands	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f003 0303 	and.w	r3, r3, #3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d123      	bne.n	8004308 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	08da      	lsrs	r2, r3, #3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3208      	adds	r2, #8
 80042c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	220f      	movs	r2, #15
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	43db      	mvns	r3, r3
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	4013      	ands	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	08da      	lsrs	r2, r3, #3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3208      	adds	r2, #8
 8004302:	69b9      	ldr	r1, [r7, #24]
 8004304:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	2203      	movs	r2, #3
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	43db      	mvns	r3, r3
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	4013      	ands	r3, r2
 800431e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f003 0203 	and.w	r2, r3, #3
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	4313      	orrs	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 80b4 	beq.w	80044b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800434a:	2300      	movs	r3, #0
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	4b60      	ldr	r3, [pc, #384]	; (80044d0 <HAL_GPIO_Init+0x30c>)
 8004350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004352:	4a5f      	ldr	r2, [pc, #380]	; (80044d0 <HAL_GPIO_Init+0x30c>)
 8004354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004358:	6453      	str	r3, [r2, #68]	; 0x44
 800435a:	4b5d      	ldr	r3, [pc, #372]	; (80044d0 <HAL_GPIO_Init+0x30c>)
 800435c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004366:	4a5b      	ldr	r2, [pc, #364]	; (80044d4 <HAL_GPIO_Init+0x310>)
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	089b      	lsrs	r3, r3, #2
 800436c:	3302      	adds	r3, #2
 800436e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004372:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	220f      	movs	r2, #15
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	43db      	mvns	r3, r3
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4013      	ands	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a52      	ldr	r2, [pc, #328]	; (80044d8 <HAL_GPIO_Init+0x314>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d02b      	beq.n	80043ea <HAL_GPIO_Init+0x226>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a51      	ldr	r2, [pc, #324]	; (80044dc <HAL_GPIO_Init+0x318>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d025      	beq.n	80043e6 <HAL_GPIO_Init+0x222>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a50      	ldr	r2, [pc, #320]	; (80044e0 <HAL_GPIO_Init+0x31c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d01f      	beq.n	80043e2 <HAL_GPIO_Init+0x21e>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a4f      	ldr	r2, [pc, #316]	; (80044e4 <HAL_GPIO_Init+0x320>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d019      	beq.n	80043de <HAL_GPIO_Init+0x21a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a4e      	ldr	r2, [pc, #312]	; (80044e8 <HAL_GPIO_Init+0x324>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d013      	beq.n	80043da <HAL_GPIO_Init+0x216>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a4d      	ldr	r2, [pc, #308]	; (80044ec <HAL_GPIO_Init+0x328>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00d      	beq.n	80043d6 <HAL_GPIO_Init+0x212>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a4c      	ldr	r2, [pc, #304]	; (80044f0 <HAL_GPIO_Init+0x32c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d007      	beq.n	80043d2 <HAL_GPIO_Init+0x20e>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a4b      	ldr	r2, [pc, #300]	; (80044f4 <HAL_GPIO_Init+0x330>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d101      	bne.n	80043ce <HAL_GPIO_Init+0x20a>
 80043ca:	2307      	movs	r3, #7
 80043cc:	e00e      	b.n	80043ec <HAL_GPIO_Init+0x228>
 80043ce:	2308      	movs	r3, #8
 80043d0:	e00c      	b.n	80043ec <HAL_GPIO_Init+0x228>
 80043d2:	2306      	movs	r3, #6
 80043d4:	e00a      	b.n	80043ec <HAL_GPIO_Init+0x228>
 80043d6:	2305      	movs	r3, #5
 80043d8:	e008      	b.n	80043ec <HAL_GPIO_Init+0x228>
 80043da:	2304      	movs	r3, #4
 80043dc:	e006      	b.n	80043ec <HAL_GPIO_Init+0x228>
 80043de:	2303      	movs	r3, #3
 80043e0:	e004      	b.n	80043ec <HAL_GPIO_Init+0x228>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e002      	b.n	80043ec <HAL_GPIO_Init+0x228>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <HAL_GPIO_Init+0x228>
 80043ea:	2300      	movs	r3, #0
 80043ec:	69fa      	ldr	r2, [r7, #28]
 80043ee:	f002 0203 	and.w	r2, r2, #3
 80043f2:	0092      	lsls	r2, r2, #2
 80043f4:	4093      	lsls	r3, r2
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043fc:	4935      	ldr	r1, [pc, #212]	; (80044d4 <HAL_GPIO_Init+0x310>)
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	089b      	lsrs	r3, r3, #2
 8004402:	3302      	adds	r3, #2
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800440a:	4b3b      	ldr	r3, [pc, #236]	; (80044f8 <HAL_GPIO_Init+0x334>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	43db      	mvns	r3, r3
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	4013      	ands	r3, r2
 8004418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	4313      	orrs	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800442e:	4a32      	ldr	r2, [pc, #200]	; (80044f8 <HAL_GPIO_Init+0x334>)
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004434:	4b30      	ldr	r3, [pc, #192]	; (80044f8 <HAL_GPIO_Init+0x334>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	43db      	mvns	r3, r3
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	4013      	ands	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004458:	4a27      	ldr	r2, [pc, #156]	; (80044f8 <HAL_GPIO_Init+0x334>)
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800445e:	4b26      	ldr	r3, [pc, #152]	; (80044f8 <HAL_GPIO_Init+0x334>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	43db      	mvns	r3, r3
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	4013      	ands	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	4313      	orrs	r3, r2
 8004480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004482:	4a1d      	ldr	r2, [pc, #116]	; (80044f8 <HAL_GPIO_Init+0x334>)
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004488:	4b1b      	ldr	r3, [pc, #108]	; (80044f8 <HAL_GPIO_Init+0x334>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	43db      	mvns	r3, r3
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	4013      	ands	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044ac:	4a12      	ldr	r2, [pc, #72]	; (80044f8 <HAL_GPIO_Init+0x334>)
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	3301      	adds	r3, #1
 80044b6:	61fb      	str	r3, [r7, #28]
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	2b0f      	cmp	r3, #15
 80044bc:	f67f ae90 	bls.w	80041e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044c0:	bf00      	nop
 80044c2:	bf00      	nop
 80044c4:	3724      	adds	r7, #36	; 0x24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40023800 	.word	0x40023800
 80044d4:	40013800 	.word	0x40013800
 80044d8:	40020000 	.word	0x40020000
 80044dc:	40020400 	.word	0x40020400
 80044e0:	40020800 	.word	0x40020800
 80044e4:	40020c00 	.word	0x40020c00
 80044e8:	40021000 	.word	0x40021000
 80044ec:	40021400 	.word	0x40021400
 80044f0:	40021800 	.word	0x40021800
 80044f4:	40021c00 	.word	0x40021c00
 80044f8:	40013c00 	.word	0x40013c00

080044fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	460b      	mov	r3, r1
 8004506:	807b      	strh	r3, [r7, #2]
 8004508:	4613      	mov	r3, r2
 800450a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800450c:	787b      	ldrb	r3, [r7, #1]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004512:	887a      	ldrh	r2, [r7, #2]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004518:	e003      	b.n	8004522 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800451a:	887b      	ldrh	r3, [r7, #2]
 800451c:	041a      	lsls	r2, r3, #16
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	619a      	str	r2, [r3, #24]
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800452e:	b590      	push	{r4, r7, lr}
 8004530:	b08d      	sub	sp, #52	; 0x34
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4618      	mov	r0, r3
 8004546:	f004 fb0d 	bl	8008b64 <USB_GetMode>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	f040 839d 	bne.w	8004c8c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f004 fa71 	bl	8008a3e <USB_ReadInterrupts>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 8393 	beq.w	8004c8a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	f004 fa68 	bl	8008a3e <USB_ReadInterrupts>
 800456e:	4603      	mov	r3, r0
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b02      	cmp	r3, #2
 8004576:	d107      	bne.n	8004588 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	695a      	ldr	r2, [r3, #20]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f002 0202 	and.w	r2, r2, #2
 8004586:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	f004 fa56 	bl	8008a3e <USB_ReadInterrupts>
 8004592:	4603      	mov	r3, r0
 8004594:	f003 0310 	and.w	r3, r3, #16
 8004598:	2b10      	cmp	r3, #16
 800459a:	d161      	bne.n	8004660 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699a      	ldr	r2, [r3, #24]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0210 	bic.w	r2, r2, #16
 80045aa:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	f003 020f 	and.w	r2, r3, #15
 80045b8:	4613      	mov	r3, r2
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	1a9b      	subs	r3, r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	4413      	add	r3, r2
 80045c8:	3304      	adds	r3, #4
 80045ca:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	0c5b      	lsrs	r3, r3, #17
 80045d0:	f003 030f 	and.w	r3, r3, #15
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d124      	bne.n	8004622 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80045de:	4013      	ands	r3, r2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d035      	beq.n	8004650 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	091b      	lsrs	r3, r3, #4
 80045ec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80045ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	461a      	mov	r2, r3
 80045f6:	6a38      	ldr	r0, [r7, #32]
 80045f8:	f004 f8cf 	bl	800879a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	091b      	lsrs	r3, r3, #4
 8004604:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004608:	441a      	add	r2, r3
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	699a      	ldr	r2, [r3, #24]
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	091b      	lsrs	r3, r3, #4
 8004616:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800461a:	441a      	add	r2, r3
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	619a      	str	r2, [r3, #24]
 8004620:	e016      	b.n	8004650 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	0c5b      	lsrs	r3, r3, #17
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	2b06      	cmp	r3, #6
 800462c:	d110      	bne.n	8004650 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004634:	2208      	movs	r2, #8
 8004636:	4619      	mov	r1, r3
 8004638:	6a38      	ldr	r0, [r7, #32]
 800463a:	f004 f8ae 	bl	800879a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	699a      	ldr	r2, [r3, #24]
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	091b      	lsrs	r3, r3, #4
 8004646:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800464a:	441a      	add	r2, r3
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699a      	ldr	r2, [r3, #24]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0210 	orr.w	r2, r2, #16
 800465e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4618      	mov	r0, r3
 8004666:	f004 f9ea 	bl	8008a3e <USB_ReadInterrupts>
 800466a:	4603      	mov	r3, r0
 800466c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004670:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004674:	d16e      	bne.n	8004754 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f004 f9f0 	bl	8008a64 <USB_ReadDevAllOutEpInterrupt>
 8004684:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004686:	e062      	b.n	800474e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d057      	beq.n	8004742 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	4611      	mov	r1, r2
 800469c:	4618      	mov	r0, r3
 800469e:	f004 fa15 	bl	8008acc <USB_ReadDevOutEPInterrupt>
 80046a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00c      	beq.n	80046c8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ba:	461a      	mov	r2, r3
 80046bc:	2301      	movs	r3, #1
 80046be:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80046c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 fd4e 	bl	8005164 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00c      	beq.n	80046ec <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	015a      	lsls	r2, r3, #5
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	4413      	add	r3, r2
 80046da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046de:	461a      	mov	r2, r3
 80046e0:	2308      	movs	r3, #8
 80046e2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80046e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fe48 	bl	800537c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f003 0310 	and.w	r3, r3, #16
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d008      	beq.n	8004708 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004702:	461a      	mov	r2, r3
 8004704:	2310      	movs	r3, #16
 8004706:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f003 0320 	and.w	r3, r3, #32
 800470e:	2b00      	cmp	r3, #0
 8004710:	d008      	beq.n	8004724 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	4413      	add	r3, r2
 800471a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471e:	461a      	mov	r2, r3
 8004720:	2320      	movs	r3, #32
 8004722:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	4413      	add	r3, r2
 8004736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473a:	461a      	mov	r2, r3
 800473c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004740:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	3301      	adds	r3, #1
 8004746:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474a:	085b      	lsrs	r3, r3, #1
 800474c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800474e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004750:	2b00      	cmp	r3, #0
 8004752:	d199      	bne.n	8004688 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f004 f970 	bl	8008a3e <USB_ReadInterrupts>
 800475e:	4603      	mov	r3, r0
 8004760:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004764:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004768:	f040 80c0 	bne.w	80048ec <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4618      	mov	r0, r3
 8004772:	f004 f991 	bl	8008a98 <USB_ReadDevAllInEpInterrupt>
 8004776:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800477c:	e0b2      	b.n	80048e4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 80a7 	beq.w	80048d8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004790:	b2d2      	uxtb	r2, r2
 8004792:	4611      	mov	r1, r2
 8004794:	4618      	mov	r0, r3
 8004796:	f004 f9b7 	bl	8008b08 <USB_ReadDevInEPInterrupt>
 800479a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d057      	beq.n	8004856 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	f003 030f 	and.w	r3, r3, #15
 80047ac:	2201      	movs	r2, #1
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	43db      	mvns	r3, r3
 80047c0:	69f9      	ldr	r1, [r7, #28]
 80047c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047c6:	4013      	ands	r3, r2
 80047c8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d6:	461a      	mov	r2, r3
 80047d8:	2301      	movs	r3, #1
 80047da:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d132      	bne.n	800484a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80047e4:	6879      	ldr	r1, [r7, #4]
 80047e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047e8:	4613      	mov	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	1a9b      	subs	r3, r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	3348      	adds	r3, #72	; 0x48
 80047f4:	6819      	ldr	r1, [r3, #0]
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047fa:	4613      	mov	r3, r2
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	1a9b      	subs	r3, r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4403      	add	r3, r0
 8004804:	3344      	adds	r3, #68	; 0x44
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4419      	add	r1, r3
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480e:	4613      	mov	r3, r2
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	1a9b      	subs	r3, r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4403      	add	r3, r0
 8004818:	3348      	adds	r3, #72	; 0x48
 800481a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	2b00      	cmp	r3, #0
 8004820:	d113      	bne.n	800484a <HAL_PCD_IRQHandler+0x31c>
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004826:	4613      	mov	r3, r2
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	1a9b      	subs	r3, r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	440b      	add	r3, r1
 8004830:	3350      	adds	r3, #80	; 0x50
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d108      	bne.n	800484a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6818      	ldr	r0, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004842:	461a      	mov	r2, r3
 8004844:	2101      	movs	r1, #1
 8004846:	f004 f9bf 	bl	8008bc8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	b2db      	uxtb	r3, r3
 800484e:	4619      	mov	r1, r3
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f008 f860 	bl	800c916 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f003 0308 	and.w	r3, r3, #8
 800485c:	2b00      	cmp	r3, #0
 800485e:	d008      	beq.n	8004872 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	4413      	add	r3, r2
 8004868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486c:	461a      	mov	r2, r3
 800486e:	2308      	movs	r3, #8
 8004870:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	f003 0310 	and.w	r3, r3, #16
 8004878:	2b00      	cmp	r3, #0
 800487a:	d008      	beq.n	800488e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	4413      	add	r3, r2
 8004884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004888:	461a      	mov	r2, r3
 800488a:	2310      	movs	r3, #16
 800488c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004894:	2b00      	cmp	r3, #0
 8004896:	d008      	beq.n	80048aa <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a4:	461a      	mov	r2, r3
 80048a6:	2340      	movs	r3, #64	; 0x40
 80048a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d008      	beq.n	80048c6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c0:	461a      	mov	r2, r3
 80048c2:	2302      	movs	r3, #2
 80048c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80048d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fbb9 	bl	800504a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	3301      	adds	r3, #1
 80048dc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80048de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e0:	085b      	lsrs	r3, r3, #1
 80048e2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80048e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f47f af49 	bne.w	800477e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f004 f8a4 	bl	8008a3e <USB_ReadInterrupts>
 80048f6:	4603      	mov	r3, r0
 80048f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004900:	d122      	bne.n	8004948 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	69fa      	ldr	r2, [r7, #28]
 800490c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004910:	f023 0301 	bic.w	r3, r3, #1
 8004914:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800491c:	2b01      	cmp	r3, #1
 800491e:	d108      	bne.n	8004932 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004928:	2100      	movs	r1, #0
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fd6c 	bl	8005408 <HAL_PCDEx_LPM_Callback>
 8004930:	e002      	b.n	8004938 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f008 f866 	bl	800ca04 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695a      	ldr	r2, [r3, #20]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004946:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4618      	mov	r0, r3
 800494e:	f004 f876 	bl	8008a3e <USB_ReadInterrupts>
 8004952:	4603      	mov	r3, r0
 8004954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004958:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800495c:	d112      	bne.n	8004984 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b01      	cmp	r3, #1
 800496c:	d102      	bne.n	8004974 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f008 f822 	bl	800c9b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	695a      	ldr	r2, [r3, #20]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004982:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4618      	mov	r0, r3
 800498a:	f004 f858 	bl	8008a3e <USB_ReadInterrupts>
 800498e:	4603      	mov	r3, r0
 8004990:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004998:	f040 80c7 	bne.w	8004b2a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	69fa      	ldr	r2, [r7, #28]
 80049a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049aa:	f023 0301 	bic.w	r3, r3, #1
 80049ae:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2110      	movs	r1, #16
 80049b6:	4618      	mov	r0, r3
 80049b8:	f003 fa4a 	bl	8007e50 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049bc:	2300      	movs	r3, #0
 80049be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049c0:	e056      	b.n	8004a70 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80049c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ce:	461a      	mov	r2, r3
 80049d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049d4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80049d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049e6:	0151      	lsls	r1, r2, #5
 80049e8:	69fa      	ldr	r2, [r7, #28]
 80049ea:	440a      	add	r2, r1
 80049ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049f4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80049f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a06:	0151      	lsls	r1, r2, #5
 8004a08:	69fa      	ldr	r2, [r7, #28]
 8004a0a:	440a      	add	r2, r1
 8004a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a14:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a22:	461a      	mov	r2, r3
 8004a24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a28:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a3a:	0151      	lsls	r1, r2, #5
 8004a3c:	69fa      	ldr	r2, [r7, #28]
 8004a3e:	440a      	add	r2, r1
 8004a40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a48:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a5a:	0151      	lsls	r1, r2, #5
 8004a5c:	69fa      	ldr	r2, [r7, #28]
 8004a5e:	440a      	add	r2, r1
 8004a60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a68:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d3a3      	bcc.n	80049c2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	69fa      	ldr	r2, [r7, #28]
 8004a84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a88:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004a8c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d016      	beq.n	8004ac4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aa0:	69fa      	ldr	r2, [r7, #28]
 8004aa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aa6:	f043 030b 	orr.w	r3, r3, #11
 8004aaa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004abc:	f043 030b 	orr.w	r3, r3, #11
 8004ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ac2:	e015      	b.n	8004af0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	69fa      	ldr	r2, [r7, #28]
 8004ace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ad2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004ad6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004ada:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	69fa      	ldr	r2, [r7, #28]
 8004ae6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aea:	f043 030b 	orr.w	r3, r3, #11
 8004aee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	69fa      	ldr	r2, [r7, #28]
 8004afa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004afe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004b02:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6818      	ldr	r0, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004b14:	461a      	mov	r2, r3
 8004b16:	f004 f857 	bl	8008bc8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	695a      	ldr	r2, [r3, #20]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004b28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f003 ff85 	bl	8008a3e <USB_ReadInterrupts>
 8004b34:	4603      	mov	r3, r0
 8004b36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b3e:	d124      	bne.n	8004b8a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f004 f81b 	bl	8008b80 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f003 f9a2 	bl	8007e98 <USB_GetDevSpeed>
 8004b54:	4603      	mov	r3, r0
 8004b56:	461a      	mov	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681c      	ldr	r4, [r3, #0]
 8004b60:	f001 f872 	bl	8005c48 <HAL_RCC_GetHCLKFreq>
 8004b64:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	4620      	mov	r0, r4
 8004b70:	f003 f8cc 	bl	8007d0c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f007 fef6 	bl	800c966 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695a      	ldr	r2, [r3, #20]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004b88:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f003 ff55 	bl	8008a3e <USB_ReadInterrupts>
 8004b94:	4603      	mov	r3, r0
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b08      	cmp	r3, #8
 8004b9c:	d10a      	bne.n	8004bb4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f007 fed3 	bl	800c94a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	695a      	ldr	r2, [r3, #20]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f002 0208 	and.w	r2, r2, #8
 8004bb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f003 ff40 	bl	8008a3e <USB_ReadInterrupts>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bc8:	d10f      	bne.n	8004bea <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f007 ff35 	bl	800ca44 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695a      	ldr	r2, [r3, #20]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004be8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f003 ff25 	bl	8008a3e <USB_ReadInterrupts>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bfe:	d10f      	bne.n	8004c20 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	4619      	mov	r1, r3
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f007 ff08 	bl	800ca20 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	695a      	ldr	r2, [r3, #20]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004c1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f003 ff0a 	bl	8008a3e <USB_ReadInterrupts>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c34:	d10a      	bne.n	8004c4c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f007 ff16 	bl	800ca68 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695a      	ldr	r2, [r3, #20]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004c4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f003 fef4 	bl	8008a3e <USB_ReadInterrupts>
 8004c56:	4603      	mov	r3, r0
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b04      	cmp	r3, #4
 8004c5e:	d115      	bne.n	8004c8c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	f003 0304 	and.w	r3, r3, #4
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d002      	beq.n	8004c78 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f007 ff06 	bl	800ca84 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6859      	ldr	r1, [r3, #4]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	605a      	str	r2, [r3, #4]
 8004c88:	e000      	b.n	8004c8c <HAL_PCD_IRQHandler+0x75e>
      return;
 8004c8a:	bf00      	nop
    }
  }
}
 8004c8c:	3734      	adds	r7, #52	; 0x34
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd90      	pop	{r4, r7, pc}

08004c92 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b082      	sub	sp, #8
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d101      	bne.n	8004cac <HAL_PCD_SetAddress+0x1a>
 8004ca8:	2302      	movs	r3, #2
 8004caa:	e013      	b.n	8004cd4 <HAL_PCD_SetAddress+0x42>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	78fa      	ldrb	r2, [r7, #3]
 8004cb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	78fa      	ldrb	r2, [r7, #3]
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f003 fe94 	bl	80089f2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	4608      	mov	r0, r1
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	461a      	mov	r2, r3
 8004cea:	4603      	mov	r3, r0
 8004cec:	70fb      	strb	r3, [r7, #3]
 8004cee:	460b      	mov	r3, r1
 8004cf0:	803b      	strh	r3, [r7, #0]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004cfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	da0f      	bge.n	8004d22 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d02:	78fb      	ldrb	r3, [r7, #3]
 8004d04:	f003 020f 	and.w	r2, r3, #15
 8004d08:	4613      	mov	r3, r2
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	1a9b      	subs	r3, r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	3338      	adds	r3, #56	; 0x38
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	4413      	add	r3, r2
 8004d16:	3304      	adds	r3, #4
 8004d18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	705a      	strb	r2, [r3, #1]
 8004d20:	e00f      	b.n	8004d42 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d22:	78fb      	ldrb	r3, [r7, #3]
 8004d24:	f003 020f 	and.w	r2, r3, #15
 8004d28:	4613      	mov	r3, r2
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	1a9b      	subs	r3, r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	4413      	add	r3, r2
 8004d38:	3304      	adds	r3, #4
 8004d3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004d42:	78fb      	ldrb	r3, [r7, #3]
 8004d44:	f003 030f 	and.w	r3, r3, #15
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004d4e:	883a      	ldrh	r2, [r7, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	78ba      	ldrb	r2, [r7, #2]
 8004d58:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	785b      	ldrb	r3, [r3, #1]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d004      	beq.n	8004d6c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004d6c:	78bb      	ldrb	r3, [r7, #2]
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d102      	bne.n	8004d78 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d101      	bne.n	8004d86 <HAL_PCD_EP_Open+0xaa>
 8004d82:	2302      	movs	r3, #2
 8004d84:	e00e      	b.n	8004da4 <HAL_PCD_EP_Open+0xc8>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68f9      	ldr	r1, [r7, #12]
 8004d94:	4618      	mov	r0, r3
 8004d96:	f003 f8a4 	bl	8007ee2 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004da2:	7afb      	ldrb	r3, [r7, #11]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	607a      	str	r2, [r7, #4]
 8004db6:	603b      	str	r3, [r7, #0]
 8004db8:	460b      	mov	r3, r1
 8004dba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dbc:	7afb      	ldrb	r3, [r7, #11]
 8004dbe:	f003 020f 	and.w	r2, r3, #15
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	00db      	lsls	r3, r3, #3
 8004dc6:	1a9b      	subs	r3, r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	3304      	adds	r3, #4
 8004dd4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2200      	movs	r2, #0
 8004de6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	2200      	movs	r2, #0
 8004dec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dee:	7afb      	ldrb	r3, [r7, #11]
 8004df0:	f003 030f 	and.w	r3, r3, #15
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d102      	bne.n	8004e08 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e08:	7afb      	ldrb	r3, [r7, #11]
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d109      	bne.n	8004e26 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6818      	ldr	r0, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	6979      	ldr	r1, [r7, #20]
 8004e20:	f003 fb2a 	bl	8008478 <USB_EP0StartXfer>
 8004e24:	e008      	b.n	8004e38 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6818      	ldr	r0, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	461a      	mov	r2, r3
 8004e32:	6979      	ldr	r1, [r7, #20]
 8004e34:	f003 f8dc 	bl	8007ff0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3718      	adds	r7, #24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b086      	sub	sp, #24
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	60f8      	str	r0, [r7, #12]
 8004e4a:	607a      	str	r2, [r7, #4]
 8004e4c:	603b      	str	r3, [r7, #0]
 8004e4e:	460b      	mov	r3, r1
 8004e50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e52:	7afb      	ldrb	r3, [r7, #11]
 8004e54:	f003 020f 	and.w	r2, r3, #15
 8004e58:	4613      	mov	r3, r2
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	1a9b      	subs	r3, r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	3338      	adds	r3, #56	; 0x38
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4413      	add	r3, r2
 8004e66:	3304      	adds	r3, #4
 8004e68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e82:	7afb      	ldrb	r3, [r7, #11]
 8004e84:	f003 030f 	and.w	r3, r3, #15
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d102      	bne.n	8004e9c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e9c:	7afb      	ldrb	r3, [r7, #11]
 8004e9e:	f003 030f 	and.w	r3, r3, #15
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d109      	bne.n	8004eba <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6818      	ldr	r0, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	6979      	ldr	r1, [r7, #20]
 8004eb4:	f003 fae0 	bl	8008478 <USB_EP0StartXfer>
 8004eb8:	e008      	b.n	8004ecc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	6979      	ldr	r1, [r7, #20]
 8004ec8:	f003 f892 	bl	8007ff0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b084      	sub	sp, #16
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
 8004ede:	460b      	mov	r3, r1
 8004ee0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004ee2:	78fb      	ldrb	r3, [r7, #3]
 8004ee4:	f003 020f 	and.w	r2, r3, #15
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d901      	bls.n	8004ef4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e050      	b.n	8004f96 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ef4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	da0f      	bge.n	8004f1c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004efc:	78fb      	ldrb	r3, [r7, #3]
 8004efe:	f003 020f 	and.w	r2, r3, #15
 8004f02:	4613      	mov	r3, r2
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	1a9b      	subs	r3, r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	3338      	adds	r3, #56	; 0x38
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	4413      	add	r3, r2
 8004f10:	3304      	adds	r3, #4
 8004f12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2201      	movs	r2, #1
 8004f18:	705a      	strb	r2, [r3, #1]
 8004f1a:	e00d      	b.n	8004f38 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f1c:	78fa      	ldrb	r2, [r7, #3]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	1a9b      	subs	r3, r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	3304      	adds	r3, #4
 8004f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f3e:	78fb      	ldrb	r3, [r7, #3]
 8004f40:	f003 030f 	and.w	r3, r3, #15
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_PCD_EP_SetStall+0x82>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e01e      	b.n	8004f96 <HAL_PCD_EP_SetStall+0xc0>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68f9      	ldr	r1, [r7, #12]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f003 fc6f 	bl	800884a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f6c:	78fb      	ldrb	r3, [r7, #3]
 8004f6e:	f003 030f 	and.w	r3, r3, #15
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10a      	bne.n	8004f8c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6818      	ldr	r0, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	b2d9      	uxtb	r1, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004f86:	461a      	mov	r2, r3
 8004f88:	f003 fe1e 	bl	8008bc8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b084      	sub	sp, #16
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004faa:	78fb      	ldrb	r3, [r7, #3]
 8004fac:	f003 020f 	and.w	r2, r3, #15
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d901      	bls.n	8004fbc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e042      	b.n	8005042 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004fbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	da0f      	bge.n	8004fe4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fc4:	78fb      	ldrb	r3, [r7, #3]
 8004fc6:	f003 020f 	and.w	r2, r3, #15
 8004fca:	4613      	mov	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	1a9b      	subs	r3, r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	3338      	adds	r3, #56	; 0x38
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	3304      	adds	r3, #4
 8004fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	705a      	strb	r2, [r3, #1]
 8004fe2:	e00f      	b.n	8005004 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fe4:	78fb      	ldrb	r3, [r7, #3]
 8004fe6:	f003 020f 	and.w	r2, r3, #15
 8004fea:	4613      	mov	r3, r2
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	1a9b      	subs	r3, r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800500a:	78fb      	ldrb	r3, [r7, #3]
 800500c:	f003 030f 	and.w	r3, r3, #15
 8005010:	b2da      	uxtb	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_PCD_EP_ClrStall+0x86>
 8005020:	2302      	movs	r3, #2
 8005022:	e00e      	b.n	8005042 <HAL_PCD_EP_ClrStall+0xa4>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68f9      	ldr	r1, [r7, #12]
 8005032:	4618      	mov	r0, r3
 8005034:	f003 fc77 	bl	8008926 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b08a      	sub	sp, #40	; 0x28
 800504e:	af02      	add	r7, sp, #8
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	4613      	mov	r3, r2
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	1a9b      	subs	r3, r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	3338      	adds	r3, #56	; 0x38
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	4413      	add	r3, r2
 800506e:	3304      	adds	r3, #4
 8005070:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	699a      	ldr	r2, [r3, #24]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	429a      	cmp	r2, r3
 800507c:	d901      	bls.n	8005082 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e06c      	b.n	800515c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	695a      	ldr	r2, [r3, #20]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	69fa      	ldr	r2, [r7, #28]
 8005094:	429a      	cmp	r2, r3
 8005096:	d902      	bls.n	800509e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	3303      	adds	r3, #3
 80050a2:	089b      	lsrs	r3, r3, #2
 80050a4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80050a6:	e02b      	b.n	8005100 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	695a      	ldr	r2, [r3, #20]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	69fa      	ldr	r2, [r7, #28]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d902      	bls.n	80050c4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	3303      	adds	r3, #3
 80050c8:	089b      	lsrs	r3, r3, #2
 80050ca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	68d9      	ldr	r1, [r3, #12]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	4603      	mov	r3, r0
 80050e2:	6978      	ldr	r0, [r7, #20]
 80050e4:	f003 fb1b 	bl	800871e <USB_WritePacket>

    ep->xfer_buff  += len;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	68da      	ldr	r2, [r3, #12]
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	441a      	add	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	699a      	ldr	r2, [r3, #24]
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	441a      	add	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	b29b      	uxth	r3, r3
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	429a      	cmp	r2, r3
 8005114:	d809      	bhi.n	800512a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	699a      	ldr	r2, [r3, #24]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800511e:	429a      	cmp	r2, r3
 8005120:	d203      	bcs.n	800512a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1be      	bne.n	80050a8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	695a      	ldr	r2, [r3, #20]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	429a      	cmp	r2, r3
 8005134:	d811      	bhi.n	800515a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	f003 030f 	and.w	r3, r3, #15
 800513c:	2201      	movs	r2, #1
 800513e:	fa02 f303 	lsl.w	r3, r2, r3
 8005142:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	43db      	mvns	r3, r3
 8005150:	6939      	ldr	r1, [r7, #16]
 8005152:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005156:	4013      	ands	r3, r2
 8005158:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3720      	adds	r7, #32
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	333c      	adds	r3, #60	; 0x3c
 800517c:	3304      	adds	r3, #4
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	2b01      	cmp	r3, #1
 8005198:	f040 80a0 	bne.w	80052dc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d015      	beq.n	80051d2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4a72      	ldr	r2, [pc, #456]	; (8005374 <PCD_EP_OutXfrComplete_int+0x210>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	f240 80dd 	bls.w	800536a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 80d7 	beq.w	800536a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c8:	461a      	mov	r2, r3
 80051ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ce:	6093      	str	r3, [r2, #8]
 80051d0:	e0cb      	b.n	800536a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	f003 0320 	and.w	r3, r3, #32
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d009      	beq.n	80051f0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e8:	461a      	mov	r2, r3
 80051ea:	2320      	movs	r3, #32
 80051ec:	6093      	str	r3, [r2, #8]
 80051ee:	e0bc      	b.n	800536a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f040 80b7 	bne.w	800536a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4a5d      	ldr	r2, [pc, #372]	; (8005374 <PCD_EP_OutXfrComplete_int+0x210>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d90f      	bls.n	8005224 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00a      	beq.n	8005224 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	4413      	add	r3, r2
 8005216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521a:	461a      	mov	r2, r3
 800521c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005220:	6093      	str	r3, [r2, #8]
 8005222:	e0a2      	b.n	800536a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005224:	6879      	ldr	r1, [r7, #4]
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	4613      	mov	r3, r2
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	1a9b      	subs	r3, r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	440b      	add	r3, r1
 8005232:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005236:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	0159      	lsls	r1, r3, #5
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	440b      	add	r3, r1
 8005240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800524a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	4613      	mov	r3, r2
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	1a9b      	subs	r3, r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4403      	add	r3, r0
 800525a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800525e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005260:	6879      	ldr	r1, [r7, #4]
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	4613      	mov	r3, r2
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	1a9b      	subs	r3, r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	440b      	add	r3, r1
 800526e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005272:	6819      	ldr	r1, [r3, #0]
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	4613      	mov	r3, r2
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	1a9b      	subs	r3, r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4403      	add	r3, r0
 8005282:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4419      	add	r1, r3
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	4613      	mov	r3, r2
 8005290:	00db      	lsls	r3, r3, #3
 8005292:	1a9b      	subs	r3, r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4403      	add	r3, r0
 8005298:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800529c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d114      	bne.n	80052ce <PCD_EP_OutXfrComplete_int+0x16a>
 80052a4:	6879      	ldr	r1, [r7, #4]
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	4613      	mov	r3, r2
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	1a9b      	subs	r3, r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d108      	bne.n	80052ce <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6818      	ldr	r0, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80052c6:	461a      	mov	r2, r3
 80052c8:	2101      	movs	r1, #1
 80052ca:	f003 fc7d 	bl	8008bc8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	4619      	mov	r1, r3
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f007 fb03 	bl	800c8e0 <HAL_PCD_DataOutStageCallback>
 80052da:	e046      	b.n	800536a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4a26      	ldr	r2, [pc, #152]	; (8005378 <PCD_EP_OutXfrComplete_int+0x214>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d124      	bne.n	800532e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fa:	461a      	mov	r2, r3
 80052fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005300:	6093      	str	r3, [r2, #8]
 8005302:	e032      	b.n	800536a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f003 0320 	and.w	r3, r3, #32
 800530a:	2b00      	cmp	r3, #0
 800530c:	d008      	beq.n	8005320 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531a:	461a      	mov	r2, r3
 800531c:	2320      	movs	r3, #32
 800531e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	b2db      	uxtb	r3, r3
 8005324:	4619      	mov	r1, r3
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f007 fada 	bl	800c8e0 <HAL_PCD_DataOutStageCallback>
 800532c:	e01d      	b.n	800536a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d114      	bne.n	800535e <PCD_EP_OutXfrComplete_int+0x1fa>
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	4613      	mov	r3, r2
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	1a9b      	subs	r3, r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	440b      	add	r3, r1
 8005342:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d108      	bne.n	800535e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6818      	ldr	r0, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005356:	461a      	mov	r2, r3
 8005358:	2100      	movs	r1, #0
 800535a:	f003 fc35 	bl	8008bc8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	b2db      	uxtb	r3, r3
 8005362:	4619      	mov	r1, r3
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f007 fabb 	bl	800c8e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3718      	adds	r7, #24
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	4f54300a 	.word	0x4f54300a
 8005378:	4f54310a 	.word	0x4f54310a

0800537c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	333c      	adds	r3, #60	; 0x3c
 8005394:	3304      	adds	r3, #4
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4a15      	ldr	r2, [pc, #84]	; (8005404 <PCD_EP_OutSetupPacket_int+0x88>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d90e      	bls.n	80053d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d009      	beq.n	80053d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c8:	461a      	mov	r2, r3
 80053ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f007 fa73 	bl	800c8bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4a0a      	ldr	r2, [pc, #40]	; (8005404 <PCD_EP_OutSetupPacket_int+0x88>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d90c      	bls.n	80053f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d108      	bne.n	80053f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6818      	ldr	r0, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80053f0:	461a      	mov	r2, r3
 80053f2:	2101      	movs	r1, #1
 80053f4:	f003 fbe8 	bl	8008bc8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3718      	adds	r7, #24
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	4f54300a 	.word	0x4f54300a

08005408 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	460b      	mov	r3, r1
 8005412:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e264      	b.n	80058fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d075      	beq.n	800552a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800543e:	4ba3      	ldr	r3, [pc, #652]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 030c 	and.w	r3, r3, #12
 8005446:	2b04      	cmp	r3, #4
 8005448:	d00c      	beq.n	8005464 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800544a:	4ba0      	ldr	r3, [pc, #640]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005452:	2b08      	cmp	r3, #8
 8005454:	d112      	bne.n	800547c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005456:	4b9d      	ldr	r3, [pc, #628]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800545e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005462:	d10b      	bne.n	800547c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005464:	4b99      	ldr	r3, [pc, #612]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d05b      	beq.n	8005528 <HAL_RCC_OscConfig+0x108>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d157      	bne.n	8005528 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e23f      	b.n	80058fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005484:	d106      	bne.n	8005494 <HAL_RCC_OscConfig+0x74>
 8005486:	4b91      	ldr	r3, [pc, #580]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a90      	ldr	r2, [pc, #576]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 800548c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005490:	6013      	str	r3, [r2, #0]
 8005492:	e01d      	b.n	80054d0 <HAL_RCC_OscConfig+0xb0>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800549c:	d10c      	bne.n	80054b8 <HAL_RCC_OscConfig+0x98>
 800549e:	4b8b      	ldr	r3, [pc, #556]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a8a      	ldr	r2, [pc, #552]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 80054a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	4b88      	ldr	r3, [pc, #544]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a87      	ldr	r2, [pc, #540]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 80054b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054b4:	6013      	str	r3, [r2, #0]
 80054b6:	e00b      	b.n	80054d0 <HAL_RCC_OscConfig+0xb0>
 80054b8:	4b84      	ldr	r3, [pc, #528]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a83      	ldr	r2, [pc, #524]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 80054be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054c2:	6013      	str	r3, [r2, #0]
 80054c4:	4b81      	ldr	r3, [pc, #516]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a80      	ldr	r2, [pc, #512]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 80054ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d013      	beq.n	8005500 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d8:	f7fd fba8 	bl	8002c2c <HAL_GetTick>
 80054dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054de:	e008      	b.n	80054f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054e0:	f7fd fba4 	bl	8002c2c <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b64      	cmp	r3, #100	; 0x64
 80054ec:	d901      	bls.n	80054f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e204      	b.n	80058fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054f2:	4b76      	ldr	r3, [pc, #472]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d0f0      	beq.n	80054e0 <HAL_RCC_OscConfig+0xc0>
 80054fe:	e014      	b.n	800552a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005500:	f7fd fb94 	bl	8002c2c <HAL_GetTick>
 8005504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005506:	e008      	b.n	800551a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005508:	f7fd fb90 	bl	8002c2c <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b64      	cmp	r3, #100	; 0x64
 8005514:	d901      	bls.n	800551a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e1f0      	b.n	80058fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800551a:	4b6c      	ldr	r3, [pc, #432]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1f0      	bne.n	8005508 <HAL_RCC_OscConfig+0xe8>
 8005526:	e000      	b.n	800552a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d063      	beq.n	80055fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005536:	4b65      	ldr	r3, [pc, #404]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f003 030c 	and.w	r3, r3, #12
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00b      	beq.n	800555a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005542:	4b62      	ldr	r3, [pc, #392]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800554a:	2b08      	cmp	r3, #8
 800554c:	d11c      	bne.n	8005588 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800554e:	4b5f      	ldr	r3, [pc, #380]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d116      	bne.n	8005588 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800555a:	4b5c      	ldr	r3, [pc, #368]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d005      	beq.n	8005572 <HAL_RCC_OscConfig+0x152>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d001      	beq.n	8005572 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e1c4      	b.n	80058fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005572:	4b56      	ldr	r3, [pc, #344]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	00db      	lsls	r3, r3, #3
 8005580:	4952      	ldr	r1, [pc, #328]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 8005582:	4313      	orrs	r3, r2
 8005584:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005586:	e03a      	b.n	80055fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d020      	beq.n	80055d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005590:	4b4f      	ldr	r3, [pc, #316]	; (80056d0 <HAL_RCC_OscConfig+0x2b0>)
 8005592:	2201      	movs	r2, #1
 8005594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005596:	f7fd fb49 	bl	8002c2c <HAL_GetTick>
 800559a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800559c:	e008      	b.n	80055b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800559e:	f7fd fb45 	bl	8002c2c <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d901      	bls.n	80055b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e1a5      	b.n	80058fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055b0:	4b46      	ldr	r3, [pc, #280]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d0f0      	beq.n	800559e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055bc:	4b43      	ldr	r3, [pc, #268]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	00db      	lsls	r3, r3, #3
 80055ca:	4940      	ldr	r1, [pc, #256]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	600b      	str	r3, [r1, #0]
 80055d0:	e015      	b.n	80055fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055d2:	4b3f      	ldr	r3, [pc, #252]	; (80056d0 <HAL_RCC_OscConfig+0x2b0>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d8:	f7fd fb28 	bl	8002c2c <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055e0:	f7fd fb24 	bl	8002c2c <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e184      	b.n	80058fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055f2:	4b36      	ldr	r3, [pc, #216]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1f0      	bne.n	80055e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0308 	and.w	r3, r3, #8
 8005606:	2b00      	cmp	r3, #0
 8005608:	d030      	beq.n	800566c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d016      	beq.n	8005640 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005612:	4b30      	ldr	r3, [pc, #192]	; (80056d4 <HAL_RCC_OscConfig+0x2b4>)
 8005614:	2201      	movs	r2, #1
 8005616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005618:	f7fd fb08 	bl	8002c2c <HAL_GetTick>
 800561c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800561e:	e008      	b.n	8005632 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005620:	f7fd fb04 	bl	8002c2c <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b02      	cmp	r3, #2
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e164      	b.n	80058fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005632:	4b26      	ldr	r3, [pc, #152]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 8005634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d0f0      	beq.n	8005620 <HAL_RCC_OscConfig+0x200>
 800563e:	e015      	b.n	800566c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005640:	4b24      	ldr	r3, [pc, #144]	; (80056d4 <HAL_RCC_OscConfig+0x2b4>)
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005646:	f7fd faf1 	bl	8002c2c <HAL_GetTick>
 800564a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800564c:	e008      	b.n	8005660 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800564e:	f7fd faed 	bl	8002c2c <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e14d      	b.n	80058fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005660:	4b1a      	ldr	r3, [pc, #104]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 8005662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1f0      	bne.n	800564e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 80a0 	beq.w	80057ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800567a:	2300      	movs	r3, #0
 800567c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800567e:	4b13      	ldr	r3, [pc, #76]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10f      	bne.n	80056aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800568a:	2300      	movs	r3, #0
 800568c:	60bb      	str	r3, [r7, #8]
 800568e:	4b0f      	ldr	r3, [pc, #60]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 8005690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005692:	4a0e      	ldr	r2, [pc, #56]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 8005694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005698:	6413      	str	r3, [r2, #64]	; 0x40
 800569a:	4b0c      	ldr	r3, [pc, #48]	; (80056cc <HAL_RCC_OscConfig+0x2ac>)
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a2:	60bb      	str	r3, [r7, #8]
 80056a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056a6:	2301      	movs	r3, #1
 80056a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056aa:	4b0b      	ldr	r3, [pc, #44]	; (80056d8 <HAL_RCC_OscConfig+0x2b8>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d121      	bne.n	80056fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056b6:	4b08      	ldr	r3, [pc, #32]	; (80056d8 <HAL_RCC_OscConfig+0x2b8>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a07      	ldr	r2, [pc, #28]	; (80056d8 <HAL_RCC_OscConfig+0x2b8>)
 80056bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056c2:	f7fd fab3 	bl	8002c2c <HAL_GetTick>
 80056c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056c8:	e011      	b.n	80056ee <HAL_RCC_OscConfig+0x2ce>
 80056ca:	bf00      	nop
 80056cc:	40023800 	.word	0x40023800
 80056d0:	42470000 	.word	0x42470000
 80056d4:	42470e80 	.word	0x42470e80
 80056d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056dc:	f7fd faa6 	bl	8002c2c <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e106      	b.n	80058fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ee:	4b85      	ldr	r3, [pc, #532]	; (8005904 <HAL_RCC_OscConfig+0x4e4>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0f0      	beq.n	80056dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d106      	bne.n	8005710 <HAL_RCC_OscConfig+0x2f0>
 8005702:	4b81      	ldr	r3, [pc, #516]	; (8005908 <HAL_RCC_OscConfig+0x4e8>)
 8005704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005706:	4a80      	ldr	r2, [pc, #512]	; (8005908 <HAL_RCC_OscConfig+0x4e8>)
 8005708:	f043 0301 	orr.w	r3, r3, #1
 800570c:	6713      	str	r3, [r2, #112]	; 0x70
 800570e:	e01c      	b.n	800574a <HAL_RCC_OscConfig+0x32a>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	2b05      	cmp	r3, #5
 8005716:	d10c      	bne.n	8005732 <HAL_RCC_OscConfig+0x312>
 8005718:	4b7b      	ldr	r3, [pc, #492]	; (8005908 <HAL_RCC_OscConfig+0x4e8>)
 800571a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571c:	4a7a      	ldr	r2, [pc, #488]	; (8005908 <HAL_RCC_OscConfig+0x4e8>)
 800571e:	f043 0304 	orr.w	r3, r3, #4
 8005722:	6713      	str	r3, [r2, #112]	; 0x70
 8005724:	4b78      	ldr	r3, [pc, #480]	; (8005908 <HAL_RCC_OscConfig+0x4e8>)
 8005726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005728:	4a77      	ldr	r2, [pc, #476]	; (8005908 <HAL_RCC_OscConfig+0x4e8>)
 800572a:	f043 0301 	orr.w	r3, r3, #1
 800572e:	6713      	str	r3, [r2, #112]	; 0x70
 8005730:	e00b      	b.n	800574a <HAL_RCC_OscConfig+0x32a>
 8005732:	4b75      	ldr	r3, [pc, #468]	; (8005908 <HAL_RCC_OscConfig+0x4e8>)
 8005734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005736:	4a74      	ldr	r2, [pc, #464]	; (8005908 <HAL_RCC_OscConfig+0x4e8>)
 8005738:	f023 0301 	bic.w	r3, r3, #1
 800573c:	6713      	str	r3, [r2, #112]	; 0x70
 800573e:	4b72      	ldr	r3, [pc, #456]	; (8005908 <HAL_RCC_OscConfig+0x4e8>)
 8005740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005742:	4a71      	ldr	r2, [pc, #452]	; (8005908 <HAL_RCC_OscConfig+0x4e8>)
 8005744:	f023 0304 	bic.w	r3, r3, #4
 8005748:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d015      	beq.n	800577e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005752:	f7fd fa6b 	bl	8002c2c <HAL_GetTick>
 8005756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005758:	e00a      	b.n	8005770 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800575a:	f7fd fa67 	bl	8002c2c <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	f241 3288 	movw	r2, #5000	; 0x1388
 8005768:	4293      	cmp	r3, r2
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e0c5      	b.n	80058fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005770:	4b65      	ldr	r3, [pc, #404]	; (8005908 <HAL_RCC_OscConfig+0x4e8>)
 8005772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d0ee      	beq.n	800575a <HAL_RCC_OscConfig+0x33a>
 800577c:	e014      	b.n	80057a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800577e:	f7fd fa55 	bl	8002c2c <HAL_GetTick>
 8005782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005784:	e00a      	b.n	800579c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005786:	f7fd fa51 	bl	8002c2c <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	f241 3288 	movw	r2, #5000	; 0x1388
 8005794:	4293      	cmp	r3, r2
 8005796:	d901      	bls.n	800579c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e0af      	b.n	80058fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800579c:	4b5a      	ldr	r3, [pc, #360]	; (8005908 <HAL_RCC_OscConfig+0x4e8>)
 800579e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1ee      	bne.n	8005786 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057a8:	7dfb      	ldrb	r3, [r7, #23]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d105      	bne.n	80057ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057ae:	4b56      	ldr	r3, [pc, #344]	; (8005908 <HAL_RCC_OscConfig+0x4e8>)
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	4a55      	ldr	r2, [pc, #340]	; (8005908 <HAL_RCC_OscConfig+0x4e8>)
 80057b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f000 809b 	beq.w	80058fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057c4:	4b50      	ldr	r3, [pc, #320]	; (8005908 <HAL_RCC_OscConfig+0x4e8>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f003 030c 	and.w	r3, r3, #12
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	d05c      	beq.n	800588a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d141      	bne.n	800585c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057d8:	4b4c      	ldr	r3, [pc, #304]	; (800590c <HAL_RCC_OscConfig+0x4ec>)
 80057da:	2200      	movs	r2, #0
 80057dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057de:	f7fd fa25 	bl	8002c2c <HAL_GetTick>
 80057e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057e4:	e008      	b.n	80057f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057e6:	f7fd fa21 	bl	8002c2c <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d901      	bls.n	80057f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e081      	b.n	80058fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057f8:	4b43      	ldr	r3, [pc, #268]	; (8005908 <HAL_RCC_OscConfig+0x4e8>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1f0      	bne.n	80057e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	69da      	ldr	r2, [r3, #28]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	431a      	orrs	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	019b      	lsls	r3, r3, #6
 8005814:	431a      	orrs	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581a:	085b      	lsrs	r3, r3, #1
 800581c:	3b01      	subs	r3, #1
 800581e:	041b      	lsls	r3, r3, #16
 8005820:	431a      	orrs	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005826:	061b      	lsls	r3, r3, #24
 8005828:	4937      	ldr	r1, [pc, #220]	; (8005908 <HAL_RCC_OscConfig+0x4e8>)
 800582a:	4313      	orrs	r3, r2
 800582c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800582e:	4b37      	ldr	r3, [pc, #220]	; (800590c <HAL_RCC_OscConfig+0x4ec>)
 8005830:	2201      	movs	r2, #1
 8005832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005834:	f7fd f9fa 	bl	8002c2c <HAL_GetTick>
 8005838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800583c:	f7fd f9f6 	bl	8002c2c <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e056      	b.n	80058fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800584e:	4b2e      	ldr	r3, [pc, #184]	; (8005908 <HAL_RCC_OscConfig+0x4e8>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0f0      	beq.n	800583c <HAL_RCC_OscConfig+0x41c>
 800585a:	e04e      	b.n	80058fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800585c:	4b2b      	ldr	r3, [pc, #172]	; (800590c <HAL_RCC_OscConfig+0x4ec>)
 800585e:	2200      	movs	r2, #0
 8005860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005862:	f7fd f9e3 	bl	8002c2c <HAL_GetTick>
 8005866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005868:	e008      	b.n	800587c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800586a:	f7fd f9df 	bl	8002c2c <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d901      	bls.n	800587c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e03f      	b.n	80058fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800587c:	4b22      	ldr	r3, [pc, #136]	; (8005908 <HAL_RCC_OscConfig+0x4e8>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1f0      	bne.n	800586a <HAL_RCC_OscConfig+0x44a>
 8005888:	e037      	b.n	80058fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d101      	bne.n	8005896 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e032      	b.n	80058fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005896:	4b1c      	ldr	r3, [pc, #112]	; (8005908 <HAL_RCC_OscConfig+0x4e8>)
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d028      	beq.n	80058f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d121      	bne.n	80058f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058bc:	429a      	cmp	r2, r3
 80058be:	d11a      	bne.n	80058f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058c6:	4013      	ands	r3, r2
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d111      	bne.n	80058f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058dc:	085b      	lsrs	r3, r3, #1
 80058de:	3b01      	subs	r3, #1
 80058e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d107      	bne.n	80058f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d001      	beq.n	80058fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e000      	b.n	80058fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3718      	adds	r7, #24
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	40007000 	.word	0x40007000
 8005908:	40023800 	.word	0x40023800
 800590c:	42470060 	.word	0x42470060

08005910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e0cc      	b.n	8005abe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005924:	4b68      	ldr	r3, [pc, #416]	; (8005ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0307 	and.w	r3, r3, #7
 800592c:	683a      	ldr	r2, [r7, #0]
 800592e:	429a      	cmp	r2, r3
 8005930:	d90c      	bls.n	800594c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005932:	4b65      	ldr	r3, [pc, #404]	; (8005ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800593a:	4b63      	ldr	r3, [pc, #396]	; (8005ac8 <HAL_RCC_ClockConfig+0x1b8>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0307 	and.w	r3, r3, #7
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	429a      	cmp	r2, r3
 8005946:	d001      	beq.n	800594c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e0b8      	b.n	8005abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d020      	beq.n	800599a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b00      	cmp	r3, #0
 8005962:	d005      	beq.n	8005970 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005964:	4b59      	ldr	r3, [pc, #356]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	4a58      	ldr	r2, [pc, #352]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 800596a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800596e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0308 	and.w	r3, r3, #8
 8005978:	2b00      	cmp	r3, #0
 800597a:	d005      	beq.n	8005988 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800597c:	4b53      	ldr	r3, [pc, #332]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	4a52      	ldr	r2, [pc, #328]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 8005982:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005986:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005988:	4b50      	ldr	r3, [pc, #320]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	494d      	ldr	r1, [pc, #308]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 8005996:	4313      	orrs	r3, r2
 8005998:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d044      	beq.n	8005a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d107      	bne.n	80059be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ae:	4b47      	ldr	r3, [pc, #284]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d119      	bne.n	80059ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e07f      	b.n	8005abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d003      	beq.n	80059ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059ca:	2b03      	cmp	r3, #3
 80059cc:	d107      	bne.n	80059de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ce:	4b3f      	ldr	r3, [pc, #252]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d109      	bne.n	80059ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e06f      	b.n	8005abe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059de:	4b3b      	ldr	r3, [pc, #236]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0302 	and.w	r3, r3, #2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e067      	b.n	8005abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059ee:	4b37      	ldr	r3, [pc, #220]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f023 0203 	bic.w	r2, r3, #3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	4934      	ldr	r1, [pc, #208]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a00:	f7fd f914 	bl	8002c2c <HAL_GetTick>
 8005a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a06:	e00a      	b.n	8005a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a08:	f7fd f910 	bl	8002c2c <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e04f      	b.n	8005abe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a1e:	4b2b      	ldr	r3, [pc, #172]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 020c 	and.w	r2, r3, #12
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d1eb      	bne.n	8005a08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a30:	4b25      	ldr	r3, [pc, #148]	; (8005ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0307 	and.w	r3, r3, #7
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d20c      	bcs.n	8005a58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a3e:	4b22      	ldr	r3, [pc, #136]	; (8005ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a46:	4b20      	ldr	r3, [pc, #128]	; (8005ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0307 	and.w	r3, r3, #7
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d001      	beq.n	8005a58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e032      	b.n	8005abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d008      	beq.n	8005a76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a64:	4b19      	ldr	r3, [pc, #100]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	4916      	ldr	r1, [pc, #88]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0308 	and.w	r3, r3, #8
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d009      	beq.n	8005a96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a82:	4b12      	ldr	r3, [pc, #72]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	490e      	ldr	r1, [pc, #56]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a96:	f000 f821 	bl	8005adc <HAL_RCC_GetSysClockFreq>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	4b0b      	ldr	r3, [pc, #44]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	091b      	lsrs	r3, r3, #4
 8005aa2:	f003 030f 	and.w	r3, r3, #15
 8005aa6:	490a      	ldr	r1, [pc, #40]	; (8005ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8005aa8:	5ccb      	ldrb	r3, [r1, r3]
 8005aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8005aae:	4a09      	ldr	r2, [pc, #36]	; (8005ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8005ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ab2:	4b09      	ldr	r3, [pc, #36]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fc faf6 	bl	80020a8 <HAL_InitTick>

  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	40023c00 	.word	0x40023c00
 8005acc:	40023800 	.word	0x40023800
 8005ad0:	0800cde8 	.word	0x0800cde8
 8005ad4:	20000000 	.word	0x20000000
 8005ad8:	20000004 	.word	0x20000004

08005adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005adc:	b5b0      	push	{r4, r5, r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	6079      	str	r1, [r7, #4]
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	60f9      	str	r1, [r7, #12]
 8005aea:	2100      	movs	r1, #0
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005aee:	2100      	movs	r1, #0
 8005af0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005af2:	4952      	ldr	r1, [pc, #328]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8005af4:	6889      	ldr	r1, [r1, #8]
 8005af6:	f001 010c 	and.w	r1, r1, #12
 8005afa:	2908      	cmp	r1, #8
 8005afc:	d00d      	beq.n	8005b1a <HAL_RCC_GetSysClockFreq+0x3e>
 8005afe:	2908      	cmp	r1, #8
 8005b00:	f200 8094 	bhi.w	8005c2c <HAL_RCC_GetSysClockFreq+0x150>
 8005b04:	2900      	cmp	r1, #0
 8005b06:	d002      	beq.n	8005b0e <HAL_RCC_GetSysClockFreq+0x32>
 8005b08:	2904      	cmp	r1, #4
 8005b0a:	d003      	beq.n	8005b14 <HAL_RCC_GetSysClockFreq+0x38>
 8005b0c:	e08e      	b.n	8005c2c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b0e:	4b4c      	ldr	r3, [pc, #304]	; (8005c40 <HAL_RCC_GetSysClockFreq+0x164>)
 8005b10:	60bb      	str	r3, [r7, #8]
       break;
 8005b12:	e08e      	b.n	8005c32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b14:	4b4b      	ldr	r3, [pc, #300]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x168>)
 8005b16:	60bb      	str	r3, [r7, #8]
      break;
 8005b18:	e08b      	b.n	8005c32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b1a:	4948      	ldr	r1, [pc, #288]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8005b1c:	6849      	ldr	r1, [r1, #4]
 8005b1e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005b22:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b24:	4945      	ldr	r1, [pc, #276]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8005b26:	6849      	ldr	r1, [r1, #4]
 8005b28:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005b2c:	2900      	cmp	r1, #0
 8005b2e:	d024      	beq.n	8005b7a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b30:	4942      	ldr	r1, [pc, #264]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8005b32:	6849      	ldr	r1, [r1, #4]
 8005b34:	0989      	lsrs	r1, r1, #6
 8005b36:	4608      	mov	r0, r1
 8005b38:	f04f 0100 	mov.w	r1, #0
 8005b3c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005b40:	f04f 0500 	mov.w	r5, #0
 8005b44:	ea00 0204 	and.w	r2, r0, r4
 8005b48:	ea01 0305 	and.w	r3, r1, r5
 8005b4c:	493d      	ldr	r1, [pc, #244]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x168>)
 8005b4e:	fb01 f003 	mul.w	r0, r1, r3
 8005b52:	2100      	movs	r1, #0
 8005b54:	fb01 f102 	mul.w	r1, r1, r2
 8005b58:	1844      	adds	r4, r0, r1
 8005b5a:	493a      	ldr	r1, [pc, #232]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x168>)
 8005b5c:	fba2 0101 	umull	r0, r1, r2, r1
 8005b60:	1863      	adds	r3, r4, r1
 8005b62:	4619      	mov	r1, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	461a      	mov	r2, r3
 8005b68:	f04f 0300 	mov.w	r3, #0
 8005b6c:	f7fa fe3e 	bl	80007ec <__aeabi_uldivmod>
 8005b70:	4602      	mov	r2, r0
 8005b72:	460b      	mov	r3, r1
 8005b74:	4613      	mov	r3, r2
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	e04a      	b.n	8005c10 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b7a:	4b30      	ldr	r3, [pc, #192]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	099b      	lsrs	r3, r3, #6
 8005b80:	461a      	mov	r2, r3
 8005b82:	f04f 0300 	mov.w	r3, #0
 8005b86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b8a:	f04f 0100 	mov.w	r1, #0
 8005b8e:	ea02 0400 	and.w	r4, r2, r0
 8005b92:	ea03 0501 	and.w	r5, r3, r1
 8005b96:	4620      	mov	r0, r4
 8005b98:	4629      	mov	r1, r5
 8005b9a:	f04f 0200 	mov.w	r2, #0
 8005b9e:	f04f 0300 	mov.w	r3, #0
 8005ba2:	014b      	lsls	r3, r1, #5
 8005ba4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ba8:	0142      	lsls	r2, r0, #5
 8005baa:	4610      	mov	r0, r2
 8005bac:	4619      	mov	r1, r3
 8005bae:	1b00      	subs	r0, r0, r4
 8005bb0:	eb61 0105 	sbc.w	r1, r1, r5
 8005bb4:	f04f 0200 	mov.w	r2, #0
 8005bb8:	f04f 0300 	mov.w	r3, #0
 8005bbc:	018b      	lsls	r3, r1, #6
 8005bbe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005bc2:	0182      	lsls	r2, r0, #6
 8005bc4:	1a12      	subs	r2, r2, r0
 8005bc6:	eb63 0301 	sbc.w	r3, r3, r1
 8005bca:	f04f 0000 	mov.w	r0, #0
 8005bce:	f04f 0100 	mov.w	r1, #0
 8005bd2:	00d9      	lsls	r1, r3, #3
 8005bd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005bd8:	00d0      	lsls	r0, r2, #3
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	1912      	adds	r2, r2, r4
 8005be0:	eb45 0303 	adc.w	r3, r5, r3
 8005be4:	f04f 0000 	mov.w	r0, #0
 8005be8:	f04f 0100 	mov.w	r1, #0
 8005bec:	0299      	lsls	r1, r3, #10
 8005bee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005bf2:	0290      	lsls	r0, r2, #10
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f04f 0300 	mov.w	r3, #0
 8005c04:	f7fa fdf2 	bl	80007ec <__aeabi_uldivmod>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c10:	4b0a      	ldr	r3, [pc, #40]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	0c1b      	lsrs	r3, r3, #16
 8005c16:	f003 0303 	and.w	r3, r3, #3
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	005b      	lsls	r3, r3, #1
 8005c1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c28:	60bb      	str	r3, [r7, #8]
      break;
 8005c2a:	e002      	b.n	8005c32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c2c:	4b04      	ldr	r3, [pc, #16]	; (8005c40 <HAL_RCC_GetSysClockFreq+0x164>)
 8005c2e:	60bb      	str	r3, [r7, #8]
      break;
 8005c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c32:	68bb      	ldr	r3, [r7, #8]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bdb0      	pop	{r4, r5, r7, pc}
 8005c3c:	40023800 	.word	0x40023800
 8005c40:	00f42400 	.word	0x00f42400
 8005c44:	00b71b00 	.word	0x00b71b00

08005c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c4c:	4b03      	ldr	r3, [pc, #12]	; (8005c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	20000000 	.word	0x20000000

08005c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c64:	f7ff fff0 	bl	8005c48 <HAL_RCC_GetHCLKFreq>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	4b05      	ldr	r3, [pc, #20]	; (8005c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	0a9b      	lsrs	r3, r3, #10
 8005c70:	f003 0307 	and.w	r3, r3, #7
 8005c74:	4903      	ldr	r1, [pc, #12]	; (8005c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c76:	5ccb      	ldrb	r3, [r1, r3]
 8005c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	40023800 	.word	0x40023800
 8005c84:	0800cdf8 	.word	0x0800cdf8

08005c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c8c:	f7ff ffdc 	bl	8005c48 <HAL_RCC_GetHCLKFreq>
 8005c90:	4602      	mov	r2, r0
 8005c92:	4b05      	ldr	r3, [pc, #20]	; (8005ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	0b5b      	lsrs	r3, r3, #13
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	4903      	ldr	r1, [pc, #12]	; (8005cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	40023800 	.word	0x40023800
 8005cac:	0800cdf8 	.word	0x0800cdf8

08005cb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	220f      	movs	r2, #15
 8005cbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005cc0:	4b12      	ldr	r3, [pc, #72]	; (8005d0c <HAL_RCC_GetClockConfig+0x5c>)
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f003 0203 	and.w	r2, r3, #3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005ccc:	4b0f      	ldr	r3, [pc, #60]	; (8005d0c <HAL_RCC_GetClockConfig+0x5c>)
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005cd8:	4b0c      	ldr	r3, [pc, #48]	; (8005d0c <HAL_RCC_GetClockConfig+0x5c>)
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005ce4:	4b09      	ldr	r3, [pc, #36]	; (8005d0c <HAL_RCC_GetClockConfig+0x5c>)
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	08db      	lsrs	r3, r3, #3
 8005cea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005cf2:	4b07      	ldr	r3, [pc, #28]	; (8005d10 <HAL_RCC_GetClockConfig+0x60>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0207 	and.w	r2, r3, #7
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	601a      	str	r2, [r3, #0]
}
 8005cfe:	bf00      	nop
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	40023800 	.word	0x40023800
 8005d10:	40023c00 	.word	0x40023c00

08005d14 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005d20:	2300      	movs	r3, #0
 8005d22:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d105      	bne.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d035      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005d3c:	4b62      	ldr	r3, [pc, #392]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d42:	f7fc ff73 	bl	8002c2c <HAL_GetTick>
 8005d46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d48:	e008      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d4a:	f7fc ff6f 	bl	8002c2c <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d901      	bls.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e0b0      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d5c:	4b5b      	ldr	r3, [pc, #364]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1f0      	bne.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	019a      	lsls	r2, r3, #6
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	071b      	lsls	r3, r3, #28
 8005d74:	4955      	ldr	r1, [pc, #340]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d7c:	4b52      	ldr	r3, [pc, #328]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005d7e:	2201      	movs	r2, #1
 8005d80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d82:	f7fc ff53 	bl	8002c2c <HAL_GetTick>
 8005d86:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d88:	e008      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d8a:	f7fc ff4f 	bl	8002c2c <HAL_GetTick>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d901      	bls.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e090      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d9c:	4b4b      	ldr	r3, [pc, #300]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d0f0      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 8083 	beq.w	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005db6:	2300      	movs	r3, #0
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	4b44      	ldr	r3, [pc, #272]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	4a43      	ldr	r2, [pc, #268]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8005dc6:	4b41      	ldr	r3, [pc, #260]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005dd2:	4b3f      	ldr	r3, [pc, #252]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a3e      	ldr	r2, [pc, #248]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ddc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005dde:	f7fc ff25 	bl	8002c2c <HAL_GetTick>
 8005de2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005de4:	e008      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005de6:	f7fc ff21 	bl	8002c2c <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d901      	bls.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e062      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005df8:	4b35      	ldr	r3, [pc, #212]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0f0      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e04:	4b31      	ldr	r3, [pc, #196]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e0c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d02f      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d028      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e22:	4b2a      	ldr	r3, [pc, #168]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e2a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e2c:	4b29      	ldr	r3, [pc, #164]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005e2e:	2201      	movs	r2, #1
 8005e30:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e32:	4b28      	ldr	r3, [pc, #160]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005e38:	4a24      	ldr	r2, [pc, #144]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e3e:	4b23      	ldr	r3, [pc, #140]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d114      	bne.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005e4a:	f7fc feef 	bl	8002c2c <HAL_GetTick>
 8005e4e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e50:	e00a      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e52:	f7fc feeb 	bl	8002c2c <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d901      	bls.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e02a      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e68:	4b18      	ldr	r3, [pc, #96]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6c:	f003 0302 	and.w	r3, r3, #2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d0ee      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e80:	d10d      	bne.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005e82:	4b12      	ldr	r3, [pc, #72]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e96:	490d      	ldr	r1, [pc, #52]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	608b      	str	r3, [r1, #8]
 8005e9c:	e005      	b.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005e9e:	4b0b      	ldr	r3, [pc, #44]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	4a0a      	ldr	r2, [pc, #40]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ea4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005ea8:	6093      	str	r3, [r2, #8]
 8005eaa:	4b08      	ldr	r3, [pc, #32]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005eac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eb6:	4905      	ldr	r1, [pc, #20]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3718      	adds	r7, #24
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	42470068 	.word	0x42470068
 8005ecc:	40023800 	.word	0x40023800
 8005ed0:	40007000 	.word	0x40007000
 8005ed4:	42470e40 	.word	0x42470e40

08005ed8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e083      	b.n	8005ff2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	7f5b      	ldrb	r3, [r3, #29]
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d105      	bne.n	8005f00 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7fb ff8e 	bl	8001e1c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	22ca      	movs	r2, #202	; 0xca
 8005f0c:	625a      	str	r2, [r3, #36]	; 0x24
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2253      	movs	r2, #83	; 0x53
 8005f14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f897 	bl	800604a <RTC_EnterInitMode>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d008      	beq.n	8005f34 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	22ff      	movs	r2, #255	; 0xff
 8005f28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2204      	movs	r2, #4
 8005f2e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e05e      	b.n	8005ff2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	6812      	ldr	r2, [r2, #0]
 8005f3e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005f42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f46:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6899      	ldr	r1, [r3, #8]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	431a      	orrs	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	68d2      	ldr	r2, [r2, #12]
 8005f6e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6919      	ldr	r1, [r3, #16]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	041a      	lsls	r2, r3, #16
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	430a      	orrs	r2, r1
 8005f82:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68da      	ldr	r2, [r3, #12]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f92:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10e      	bne.n	8005fc0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f829 	bl	8005ffa <HAL_RTC_WaitForSynchro>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d008      	beq.n	8005fc0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	22ff      	movs	r2, #255	; 0xff
 8005fb4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2204      	movs	r2, #4
 8005fba:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e018      	b.n	8005ff2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005fce:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	699a      	ldr	r2, [r3, #24]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	22ff      	movs	r2, #255	; 0xff
 8005fe8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
  }
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b084      	sub	sp, #16
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68da      	ldr	r2, [r3, #12]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006014:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006016:	f7fc fe09 	bl	8002c2c <HAL_GetTick>
 800601a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800601c:	e009      	b.n	8006032 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800601e:	f7fc fe05 	bl	8002c2c <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800602c:	d901      	bls.n	8006032 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e007      	b.n	8006042 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	f003 0320 	and.w	r3, r3, #32
 800603c:	2b00      	cmp	r3, #0
 800603e:	d0ee      	beq.n	800601e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b084      	sub	sp, #16
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006052:	2300      	movs	r3, #0
 8006054:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006060:	2b00      	cmp	r3, #0
 8006062:	d119      	bne.n	8006098 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f04f 32ff 	mov.w	r2, #4294967295
 800606c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800606e:	f7fc fddd 	bl	8002c2c <HAL_GetTick>
 8006072:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006074:	e009      	b.n	800608a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006076:	f7fc fdd9 	bl	8002c2c <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006084:	d901      	bls.n	800608a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e007      	b.n	800609a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0ee      	beq.n	8006076 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b082      	sub	sp, #8
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d101      	bne.n	80060b4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e07b      	b.n	80061ac <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d108      	bne.n	80060ce <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060c4:	d009      	beq.n	80060da <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	61da      	str	r2, [r3, #28]
 80060cc:	e005      	b.n	80060da <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d106      	bne.n	80060fa <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7fb fedd 	bl	8001eb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2202      	movs	r2, #2
 80060fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006110:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006122:	431a      	orrs	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800612c:	431a      	orrs	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f003 0302 	and.w	r3, r3, #2
 8006136:	431a      	orrs	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	431a      	orrs	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800614a:	431a      	orrs	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	69db      	ldr	r3, [r3, #28]
 8006150:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006154:	431a      	orrs	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800615e:	ea42 0103 	orr.w	r1, r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006166:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	0c1b      	lsrs	r3, r3, #16
 8006178:	f003 0104 	and.w	r1, r3, #4
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	f003 0210 	and.w	r2, r3, #16
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	69da      	ldr	r2, [r3, #28]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800619a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e041      	b.n	800624a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d106      	bne.n	80061e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7fc f9c8 	bl	8002570 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3304      	adds	r3, #4
 80061f0:	4619      	mov	r1, r3
 80061f2:	4610      	mov	r0, r2
 80061f4:	f000 fba8 	bl	8006948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
	...

08006254 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b01      	cmp	r3, #1
 8006266:	d001      	beq.n	800626c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e04e      	b.n	800630a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68da      	ldr	r2, [r3, #12]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0201 	orr.w	r2, r2, #1
 8006282:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a23      	ldr	r2, [pc, #140]	; (8006318 <HAL_TIM_Base_Start_IT+0xc4>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d022      	beq.n	80062d4 <HAL_TIM_Base_Start_IT+0x80>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006296:	d01d      	beq.n	80062d4 <HAL_TIM_Base_Start_IT+0x80>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a1f      	ldr	r2, [pc, #124]	; (800631c <HAL_TIM_Base_Start_IT+0xc8>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d018      	beq.n	80062d4 <HAL_TIM_Base_Start_IT+0x80>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a1e      	ldr	r2, [pc, #120]	; (8006320 <HAL_TIM_Base_Start_IT+0xcc>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d013      	beq.n	80062d4 <HAL_TIM_Base_Start_IT+0x80>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a1c      	ldr	r2, [pc, #112]	; (8006324 <HAL_TIM_Base_Start_IT+0xd0>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d00e      	beq.n	80062d4 <HAL_TIM_Base_Start_IT+0x80>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a1b      	ldr	r2, [pc, #108]	; (8006328 <HAL_TIM_Base_Start_IT+0xd4>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d009      	beq.n	80062d4 <HAL_TIM_Base_Start_IT+0x80>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a19      	ldr	r2, [pc, #100]	; (800632c <HAL_TIM_Base_Start_IT+0xd8>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d004      	beq.n	80062d4 <HAL_TIM_Base_Start_IT+0x80>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a18      	ldr	r2, [pc, #96]	; (8006330 <HAL_TIM_Base_Start_IT+0xdc>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d111      	bne.n	80062f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f003 0307 	and.w	r3, r3, #7
 80062de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2b06      	cmp	r3, #6
 80062e4:	d010      	beq.n	8006308 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f042 0201 	orr.w	r2, r2, #1
 80062f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f6:	e007      	b.n	8006308 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f042 0201 	orr.w	r2, r2, #1
 8006306:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	40010000 	.word	0x40010000
 800631c:	40000400 	.word	0x40000400
 8006320:	40000800 	.word	0x40000800
 8006324:	40000c00 	.word	0x40000c00
 8006328:	40010400 	.word	0x40010400
 800632c:	40014000 	.word	0x40014000
 8006330:	40001800 	.word	0x40001800

08006334 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e041      	b.n	80063ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d106      	bne.n	8006360 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7fc f940 	bl	80025e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2202      	movs	r2, #2
 8006364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	3304      	adds	r3, #4
 8006370:	4619      	mov	r1, r3
 8006372:	4610      	mov	r0, r2
 8006374:	f000 fae8 	bl	8006948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b082      	sub	sp, #8
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	f003 0302 	and.w	r3, r3, #2
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d122      	bne.n	800642e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	f003 0302 	and.w	r3, r3, #2
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d11b      	bne.n	800642e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f06f 0202 	mvn.w	r2, #2
 80063fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	f003 0303 	and.w	r3, r3, #3
 8006410:	2b00      	cmp	r3, #0
 8006412:	d003      	beq.n	800641c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fa78 	bl	800690a <HAL_TIM_IC_CaptureCallback>
 800641a:	e005      	b.n	8006428 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 fa6a 	bl	80068f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 fa7b 	bl	800691e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	f003 0304 	and.w	r3, r3, #4
 8006438:	2b04      	cmp	r3, #4
 800643a:	d122      	bne.n	8006482 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f003 0304 	and.w	r3, r3, #4
 8006446:	2b04      	cmp	r3, #4
 8006448:	d11b      	bne.n	8006482 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f06f 0204 	mvn.w	r2, #4
 8006452:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2202      	movs	r2, #2
 8006458:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fa4e 	bl	800690a <HAL_TIM_IC_CaptureCallback>
 800646e:	e005      	b.n	800647c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fa40 	bl	80068f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fa51 	bl	800691e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	f003 0308 	and.w	r3, r3, #8
 800648c:	2b08      	cmp	r3, #8
 800648e:	d122      	bne.n	80064d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	f003 0308 	and.w	r3, r3, #8
 800649a:	2b08      	cmp	r3, #8
 800649c:	d11b      	bne.n	80064d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f06f 0208 	mvn.w	r2, #8
 80064a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2204      	movs	r2, #4
 80064ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	f003 0303 	and.w	r3, r3, #3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d003      	beq.n	80064c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fa24 	bl	800690a <HAL_TIM_IC_CaptureCallback>
 80064c2:	e005      	b.n	80064d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fa16 	bl	80068f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fa27 	bl	800691e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	f003 0310 	and.w	r3, r3, #16
 80064e0:	2b10      	cmp	r3, #16
 80064e2:	d122      	bne.n	800652a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	f003 0310 	and.w	r3, r3, #16
 80064ee:	2b10      	cmp	r3, #16
 80064f0:	d11b      	bne.n	800652a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f06f 0210 	mvn.w	r2, #16
 80064fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2208      	movs	r2, #8
 8006500:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	69db      	ldr	r3, [r3, #28]
 8006508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800650c:	2b00      	cmp	r3, #0
 800650e:	d003      	beq.n	8006518 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f9fa 	bl	800690a <HAL_TIM_IC_CaptureCallback>
 8006516:	e005      	b.n	8006524 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 f9ec 	bl	80068f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f9fd 	bl	800691e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b01      	cmp	r3, #1
 8006536:	d10e      	bne.n	8006556 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b01      	cmp	r3, #1
 8006544:	d107      	bne.n	8006556 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f06f 0201 	mvn.w	r2, #1
 800654e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7fb fc25 	bl	8001da0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006560:	2b80      	cmp	r3, #128	; 0x80
 8006562:	d10e      	bne.n	8006582 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656e:	2b80      	cmp	r3, #128	; 0x80
 8006570:	d107      	bne.n	8006582 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800657a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fd53 	bl	8007028 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658c:	2b40      	cmp	r3, #64	; 0x40
 800658e:	d10e      	bne.n	80065ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659a:	2b40      	cmp	r3, #64	; 0x40
 800659c:	d107      	bne.n	80065ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 f9c2 	bl	8006932 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	f003 0320 	and.w	r3, r3, #32
 80065b8:	2b20      	cmp	r3, #32
 80065ba:	d10e      	bne.n	80065da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	f003 0320 	and.w	r3, r3, #32
 80065c6:	2b20      	cmp	r3, #32
 80065c8:	d107      	bne.n	80065da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f06f 0220 	mvn.w	r2, #32
 80065d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 fd1d 	bl	8007014 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065da:	bf00      	nop
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
	...

080065e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065f0:	2300      	movs	r3, #0
 80065f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d101      	bne.n	8006602 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065fe:	2302      	movs	r3, #2
 8006600:	e0ae      	b.n	8006760 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b0c      	cmp	r3, #12
 800660e:	f200 809f 	bhi.w	8006750 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006612:	a201      	add	r2, pc, #4	; (adr r2, 8006618 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006618:	0800664d 	.word	0x0800664d
 800661c:	08006751 	.word	0x08006751
 8006620:	08006751 	.word	0x08006751
 8006624:	08006751 	.word	0x08006751
 8006628:	0800668d 	.word	0x0800668d
 800662c:	08006751 	.word	0x08006751
 8006630:	08006751 	.word	0x08006751
 8006634:	08006751 	.word	0x08006751
 8006638:	080066cf 	.word	0x080066cf
 800663c:	08006751 	.word	0x08006751
 8006640:	08006751 	.word	0x08006751
 8006644:	08006751 	.word	0x08006751
 8006648:	0800670f 	.word	0x0800670f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68b9      	ldr	r1, [r7, #8]
 8006652:	4618      	mov	r0, r3
 8006654:	f000 fa18 	bl	8006a88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	699a      	ldr	r2, [r3, #24]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f042 0208 	orr.w	r2, r2, #8
 8006666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	699a      	ldr	r2, [r3, #24]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f022 0204 	bic.w	r2, r2, #4
 8006676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6999      	ldr	r1, [r3, #24]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	691a      	ldr	r2, [r3, #16]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	619a      	str	r2, [r3, #24]
      break;
 800668a:	e064      	b.n	8006756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68b9      	ldr	r1, [r7, #8]
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fa68 	bl	8006b68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	699a      	ldr	r2, [r3, #24]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	699a      	ldr	r2, [r3, #24]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6999      	ldr	r1, [r3, #24]
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	021a      	lsls	r2, r3, #8
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	430a      	orrs	r2, r1
 80066ca:	619a      	str	r2, [r3, #24]
      break;
 80066cc:	e043      	b.n	8006756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68b9      	ldr	r1, [r7, #8]
 80066d4:	4618      	mov	r0, r3
 80066d6:	f000 fabd 	bl	8006c54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	69da      	ldr	r2, [r3, #28]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f042 0208 	orr.w	r2, r2, #8
 80066e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	69da      	ldr	r2, [r3, #28]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f022 0204 	bic.w	r2, r2, #4
 80066f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	69d9      	ldr	r1, [r3, #28]
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	691a      	ldr	r2, [r3, #16]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	61da      	str	r2, [r3, #28]
      break;
 800670c:	e023      	b.n	8006756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68b9      	ldr	r1, [r7, #8]
 8006714:	4618      	mov	r0, r3
 8006716:	f000 fb11 	bl	8006d3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	69da      	ldr	r2, [r3, #28]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	69da      	ldr	r2, [r3, #28]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	69d9      	ldr	r1, [r3, #28]
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	021a      	lsls	r2, r3, #8
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	430a      	orrs	r2, r1
 800674c:	61da      	str	r2, [r3, #28]
      break;
 800674e:	e002      	b.n	8006756 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	75fb      	strb	r3, [r7, #23]
      break;
 8006754:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800675e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3718      	adds	r7, #24
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006772:	2300      	movs	r3, #0
 8006774:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800677c:	2b01      	cmp	r3, #1
 800677e:	d101      	bne.n	8006784 <HAL_TIM_ConfigClockSource+0x1c>
 8006780:	2302      	movs	r3, #2
 8006782:	e0b4      	b.n	80068ee <HAL_TIM_ConfigClockSource+0x186>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2202      	movs	r2, #2
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067bc:	d03e      	beq.n	800683c <HAL_TIM_ConfigClockSource+0xd4>
 80067be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067c2:	f200 8087 	bhi.w	80068d4 <HAL_TIM_ConfigClockSource+0x16c>
 80067c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ca:	f000 8086 	beq.w	80068da <HAL_TIM_ConfigClockSource+0x172>
 80067ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067d2:	d87f      	bhi.n	80068d4 <HAL_TIM_ConfigClockSource+0x16c>
 80067d4:	2b70      	cmp	r3, #112	; 0x70
 80067d6:	d01a      	beq.n	800680e <HAL_TIM_ConfigClockSource+0xa6>
 80067d8:	2b70      	cmp	r3, #112	; 0x70
 80067da:	d87b      	bhi.n	80068d4 <HAL_TIM_ConfigClockSource+0x16c>
 80067dc:	2b60      	cmp	r3, #96	; 0x60
 80067de:	d050      	beq.n	8006882 <HAL_TIM_ConfigClockSource+0x11a>
 80067e0:	2b60      	cmp	r3, #96	; 0x60
 80067e2:	d877      	bhi.n	80068d4 <HAL_TIM_ConfigClockSource+0x16c>
 80067e4:	2b50      	cmp	r3, #80	; 0x50
 80067e6:	d03c      	beq.n	8006862 <HAL_TIM_ConfigClockSource+0xfa>
 80067e8:	2b50      	cmp	r3, #80	; 0x50
 80067ea:	d873      	bhi.n	80068d4 <HAL_TIM_ConfigClockSource+0x16c>
 80067ec:	2b40      	cmp	r3, #64	; 0x40
 80067ee:	d058      	beq.n	80068a2 <HAL_TIM_ConfigClockSource+0x13a>
 80067f0:	2b40      	cmp	r3, #64	; 0x40
 80067f2:	d86f      	bhi.n	80068d4 <HAL_TIM_ConfigClockSource+0x16c>
 80067f4:	2b30      	cmp	r3, #48	; 0x30
 80067f6:	d064      	beq.n	80068c2 <HAL_TIM_ConfigClockSource+0x15a>
 80067f8:	2b30      	cmp	r3, #48	; 0x30
 80067fa:	d86b      	bhi.n	80068d4 <HAL_TIM_ConfigClockSource+0x16c>
 80067fc:	2b20      	cmp	r3, #32
 80067fe:	d060      	beq.n	80068c2 <HAL_TIM_ConfigClockSource+0x15a>
 8006800:	2b20      	cmp	r3, #32
 8006802:	d867      	bhi.n	80068d4 <HAL_TIM_ConfigClockSource+0x16c>
 8006804:	2b00      	cmp	r3, #0
 8006806:	d05c      	beq.n	80068c2 <HAL_TIM_ConfigClockSource+0x15a>
 8006808:	2b10      	cmp	r3, #16
 800680a:	d05a      	beq.n	80068c2 <HAL_TIM_ConfigClockSource+0x15a>
 800680c:	e062      	b.n	80068d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6818      	ldr	r0, [r3, #0]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	6899      	ldr	r1, [r3, #8]
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	685a      	ldr	r2, [r3, #4]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	f000 fb5d 	bl	8006edc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006830:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	609a      	str	r2, [r3, #8]
      break;
 800683a:	e04f      	b.n	80068dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6818      	ldr	r0, [r3, #0]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	6899      	ldr	r1, [r3, #8]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685a      	ldr	r2, [r3, #4]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f000 fb46 	bl	8006edc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689a      	ldr	r2, [r3, #8]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800685e:	609a      	str	r2, [r3, #8]
      break;
 8006860:	e03c      	b.n	80068dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6818      	ldr	r0, [r3, #0]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	6859      	ldr	r1, [r3, #4]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	461a      	mov	r2, r3
 8006870:	f000 faba 	bl	8006de8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2150      	movs	r1, #80	; 0x50
 800687a:	4618      	mov	r0, r3
 800687c:	f000 fb13 	bl	8006ea6 <TIM_ITRx_SetConfig>
      break;
 8006880:	e02c      	b.n	80068dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6818      	ldr	r0, [r3, #0]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	6859      	ldr	r1, [r3, #4]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	461a      	mov	r2, r3
 8006890:	f000 fad9 	bl	8006e46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2160      	movs	r1, #96	; 0x60
 800689a:	4618      	mov	r0, r3
 800689c:	f000 fb03 	bl	8006ea6 <TIM_ITRx_SetConfig>
      break;
 80068a0:	e01c      	b.n	80068dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6818      	ldr	r0, [r3, #0]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	6859      	ldr	r1, [r3, #4]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	461a      	mov	r2, r3
 80068b0:	f000 fa9a 	bl	8006de8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2140      	movs	r1, #64	; 0x40
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 faf3 	bl	8006ea6 <TIM_ITRx_SetConfig>
      break;
 80068c0:	e00c      	b.n	80068dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4619      	mov	r1, r3
 80068cc:	4610      	mov	r0, r2
 80068ce:	f000 faea 	bl	8006ea6 <TIM_ITRx_SetConfig>
      break;
 80068d2:	e003      	b.n	80068dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	73fb      	strb	r3, [r7, #15]
      break;
 80068d8:	e000      	b.n	80068dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80068da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b083      	sub	sp, #12
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068fe:	bf00      	nop
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800690a:	b480      	push	{r7}
 800690c:	b083      	sub	sp, #12
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006912:	bf00      	nop
 8006914:	370c      	adds	r7, #12
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr

0800691e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800691e:	b480      	push	{r7}
 8006920:	b083      	sub	sp, #12
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006926:	bf00      	nop
 8006928:	370c      	adds	r7, #12
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr

08006932 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006932:	b480      	push	{r7}
 8006934:	b083      	sub	sp, #12
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800693a:	bf00      	nop
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
	...

08006948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a40      	ldr	r2, [pc, #256]	; (8006a5c <TIM_Base_SetConfig+0x114>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d013      	beq.n	8006988 <TIM_Base_SetConfig+0x40>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006966:	d00f      	beq.n	8006988 <TIM_Base_SetConfig+0x40>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a3d      	ldr	r2, [pc, #244]	; (8006a60 <TIM_Base_SetConfig+0x118>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d00b      	beq.n	8006988 <TIM_Base_SetConfig+0x40>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a3c      	ldr	r2, [pc, #240]	; (8006a64 <TIM_Base_SetConfig+0x11c>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d007      	beq.n	8006988 <TIM_Base_SetConfig+0x40>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a3b      	ldr	r2, [pc, #236]	; (8006a68 <TIM_Base_SetConfig+0x120>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d003      	beq.n	8006988 <TIM_Base_SetConfig+0x40>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a3a      	ldr	r2, [pc, #232]	; (8006a6c <TIM_Base_SetConfig+0x124>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d108      	bne.n	800699a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800698e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	4313      	orrs	r3, r2
 8006998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a2f      	ldr	r2, [pc, #188]	; (8006a5c <TIM_Base_SetConfig+0x114>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d02b      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a8:	d027      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a2c      	ldr	r2, [pc, #176]	; (8006a60 <TIM_Base_SetConfig+0x118>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d023      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a2b      	ldr	r2, [pc, #172]	; (8006a64 <TIM_Base_SetConfig+0x11c>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d01f      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a2a      	ldr	r2, [pc, #168]	; (8006a68 <TIM_Base_SetConfig+0x120>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d01b      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a29      	ldr	r2, [pc, #164]	; (8006a6c <TIM_Base_SetConfig+0x124>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d017      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a28      	ldr	r2, [pc, #160]	; (8006a70 <TIM_Base_SetConfig+0x128>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d013      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a27      	ldr	r2, [pc, #156]	; (8006a74 <TIM_Base_SetConfig+0x12c>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d00f      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a26      	ldr	r2, [pc, #152]	; (8006a78 <TIM_Base_SetConfig+0x130>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d00b      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a25      	ldr	r2, [pc, #148]	; (8006a7c <TIM_Base_SetConfig+0x134>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d007      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a24      	ldr	r2, [pc, #144]	; (8006a80 <TIM_Base_SetConfig+0x138>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d003      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a23      	ldr	r2, [pc, #140]	; (8006a84 <TIM_Base_SetConfig+0x13c>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d108      	bne.n	8006a0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	689a      	ldr	r2, [r3, #8]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a0a      	ldr	r2, [pc, #40]	; (8006a5c <TIM_Base_SetConfig+0x114>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d003      	beq.n	8006a40 <TIM_Base_SetConfig+0xf8>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a0c      	ldr	r2, [pc, #48]	; (8006a6c <TIM_Base_SetConfig+0x124>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d103      	bne.n	8006a48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	691a      	ldr	r2, [r3, #16]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	615a      	str	r2, [r3, #20]
}
 8006a4e:	bf00      	nop
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	40010000 	.word	0x40010000
 8006a60:	40000400 	.word	0x40000400
 8006a64:	40000800 	.word	0x40000800
 8006a68:	40000c00 	.word	0x40000c00
 8006a6c:	40010400 	.word	0x40010400
 8006a70:	40014000 	.word	0x40014000
 8006a74:	40014400 	.word	0x40014400
 8006a78:	40014800 	.word	0x40014800
 8006a7c:	40001800 	.word	0x40001800
 8006a80:	40001c00 	.word	0x40001c00
 8006a84:	40002000 	.word	0x40002000

08006a88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	f023 0201 	bic.w	r2, r3, #1
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f023 0303 	bic.w	r3, r3, #3
 8006abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f023 0302 	bic.w	r3, r3, #2
 8006ad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a20      	ldr	r2, [pc, #128]	; (8006b60 <TIM_OC1_SetConfig+0xd8>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d003      	beq.n	8006aec <TIM_OC1_SetConfig+0x64>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a1f      	ldr	r2, [pc, #124]	; (8006b64 <TIM_OC1_SetConfig+0xdc>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d10c      	bne.n	8006b06 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f023 0308 	bic.w	r3, r3, #8
 8006af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f023 0304 	bic.w	r3, r3, #4
 8006b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a15      	ldr	r2, [pc, #84]	; (8006b60 <TIM_OC1_SetConfig+0xd8>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d003      	beq.n	8006b16 <TIM_OC1_SetConfig+0x8e>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a14      	ldr	r2, [pc, #80]	; (8006b64 <TIM_OC1_SetConfig+0xdc>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d111      	bne.n	8006b3a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	685a      	ldr	r2, [r3, #4]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	621a      	str	r2, [r3, #32]
}
 8006b54:	bf00      	nop
 8006b56:	371c      	adds	r7, #28
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	40010000 	.word	0x40010000
 8006b64:	40010400 	.word	0x40010400

08006b68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	f023 0210 	bic.w	r2, r3, #16
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	021b      	lsls	r3, r3, #8
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	f023 0320 	bic.w	r3, r3, #32
 8006bb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	011b      	lsls	r3, r3, #4
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a22      	ldr	r2, [pc, #136]	; (8006c4c <TIM_OC2_SetConfig+0xe4>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d003      	beq.n	8006bd0 <TIM_OC2_SetConfig+0x68>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a21      	ldr	r2, [pc, #132]	; (8006c50 <TIM_OC2_SetConfig+0xe8>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d10d      	bne.n	8006bec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	011b      	lsls	r3, r3, #4
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a17      	ldr	r2, [pc, #92]	; (8006c4c <TIM_OC2_SetConfig+0xe4>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d003      	beq.n	8006bfc <TIM_OC2_SetConfig+0x94>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a16      	ldr	r2, [pc, #88]	; (8006c50 <TIM_OC2_SetConfig+0xe8>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d113      	bne.n	8006c24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	621a      	str	r2, [r3, #32]
}
 8006c3e:	bf00      	nop
 8006c40:	371c      	adds	r7, #28
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	40010000 	.word	0x40010000
 8006c50:	40010400 	.word	0x40010400

08006c54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f023 0303 	bic.w	r3, r3, #3
 8006c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	021b      	lsls	r3, r3, #8
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a21      	ldr	r2, [pc, #132]	; (8006d34 <TIM_OC3_SetConfig+0xe0>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d003      	beq.n	8006cba <TIM_OC3_SetConfig+0x66>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a20      	ldr	r2, [pc, #128]	; (8006d38 <TIM_OC3_SetConfig+0xe4>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d10d      	bne.n	8006cd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	021b      	lsls	r3, r3, #8
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a16      	ldr	r2, [pc, #88]	; (8006d34 <TIM_OC3_SetConfig+0xe0>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d003      	beq.n	8006ce6 <TIM_OC3_SetConfig+0x92>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a15      	ldr	r2, [pc, #84]	; (8006d38 <TIM_OC3_SetConfig+0xe4>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d113      	bne.n	8006d0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	011b      	lsls	r3, r3, #4
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	011b      	lsls	r3, r3, #4
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	621a      	str	r2, [r3, #32]
}
 8006d28:	bf00      	nop
 8006d2a:	371c      	adds	r7, #28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	40010000 	.word	0x40010000
 8006d38:	40010400 	.word	0x40010400

08006d3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b087      	sub	sp, #28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	021b      	lsls	r3, r3, #8
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	031b      	lsls	r3, r3, #12
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a12      	ldr	r2, [pc, #72]	; (8006de0 <TIM_OC4_SetConfig+0xa4>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d003      	beq.n	8006da4 <TIM_OC4_SetConfig+0x68>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a11      	ldr	r2, [pc, #68]	; (8006de4 <TIM_OC4_SetConfig+0xa8>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d109      	bne.n	8006db8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006daa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	019b      	lsls	r3, r3, #6
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	685a      	ldr	r2, [r3, #4]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	621a      	str	r2, [r3, #32]
}
 8006dd2:	bf00      	nop
 8006dd4:	371c      	adds	r7, #28
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	40010000 	.word	0x40010000
 8006de4:	40010400 	.word	0x40010400

08006de8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b087      	sub	sp, #28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6a1b      	ldr	r3, [r3, #32]
 8006df8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	f023 0201 	bic.w	r2, r3, #1
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	011b      	lsls	r3, r3, #4
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f023 030a 	bic.w	r3, r3, #10
 8006e24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	621a      	str	r2, [r3, #32]
}
 8006e3a:	bf00      	nop
 8006e3c:	371c      	adds	r7, #28
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b087      	sub	sp, #28
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	60f8      	str	r0, [r7, #12]
 8006e4e:	60b9      	str	r1, [r7, #8]
 8006e50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	f023 0210 	bic.w	r2, r3, #16
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6a1b      	ldr	r3, [r3, #32]
 8006e68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	031b      	lsls	r3, r3, #12
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	011b      	lsls	r3, r3, #4
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	621a      	str	r2, [r3, #32]
}
 8006e9a:	bf00      	nop
 8006e9c:	371c      	adds	r7, #28
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b085      	sub	sp, #20
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ebc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	f043 0307 	orr.w	r3, r3, #7
 8006ec8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	609a      	str	r2, [r3, #8]
}
 8006ed0:	bf00      	nop
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b087      	sub	sp, #28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
 8006ee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ef6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	021a      	lsls	r2, r3, #8
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	431a      	orrs	r2, r3
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	609a      	str	r2, [r3, #8]
}
 8006f10:	bf00      	nop
 8006f12:	371c      	adds	r7, #28
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d101      	bne.n	8006f34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f30:	2302      	movs	r3, #2
 8006f32:	e05a      	b.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2202      	movs	r2, #2
 8006f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a21      	ldr	r2, [pc, #132]	; (8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d022      	beq.n	8006fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f80:	d01d      	beq.n	8006fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a1d      	ldr	r2, [pc, #116]	; (8006ffc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d018      	beq.n	8006fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a1b      	ldr	r2, [pc, #108]	; (8007000 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d013      	beq.n	8006fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a1a      	ldr	r2, [pc, #104]	; (8007004 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d00e      	beq.n	8006fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a18      	ldr	r2, [pc, #96]	; (8007008 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d009      	beq.n	8006fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a17      	ldr	r2, [pc, #92]	; (800700c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d004      	beq.n	8006fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a15      	ldr	r2, [pc, #84]	; (8007010 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d10c      	bne.n	8006fd8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3714      	adds	r7, #20
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	40010000 	.word	0x40010000
 8006ffc:	40000400 	.word	0x40000400
 8007000:	40000800 	.word	0x40000800
 8007004:	40000c00 	.word	0x40000c00
 8007008:	40010400 	.word	0x40010400
 800700c:	40014000 	.word	0x40014000
 8007010:	40001800 	.word	0x40001800

08007014 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d101      	bne.n	800704e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e03f      	b.n	80070ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b00      	cmp	r3, #0
 8007058:	d106      	bne.n	8007068 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7fb fbe4 	bl	8002830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2224      	movs	r2, #36	; 0x24
 800706c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68da      	ldr	r2, [r3, #12]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800707e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fc7b 	bl	800797c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	691a      	ldr	r2, [r3, #16]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007094:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	695a      	ldr	r2, [r3, #20]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68da      	ldr	r2, [r3, #12]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2220      	movs	r2, #32
 80070c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2220      	movs	r2, #32
 80070c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
	...

080070d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b0ba      	sub	sp, #232	; 0xe8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80070fe:	2300      	movs	r3, #0
 8007100:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007104:	2300      	movs	r3, #0
 8007106:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800710a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800710e:	f003 030f 	and.w	r3, r3, #15
 8007112:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007116:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10f      	bne.n	800713e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800711e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007122:	f003 0320 	and.w	r3, r3, #32
 8007126:	2b00      	cmp	r3, #0
 8007128:	d009      	beq.n	800713e <HAL_UART_IRQHandler+0x66>
 800712a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800712e:	f003 0320 	and.w	r3, r3, #32
 8007132:	2b00      	cmp	r3, #0
 8007134:	d003      	beq.n	800713e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 fb65 	bl	8007806 <UART_Receive_IT>
      return;
 800713c:	e256      	b.n	80075ec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800713e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007142:	2b00      	cmp	r3, #0
 8007144:	f000 80de 	beq.w	8007304 <HAL_UART_IRQHandler+0x22c>
 8007148:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	2b00      	cmp	r3, #0
 8007152:	d106      	bne.n	8007162 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007158:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 80d1 	beq.w	8007304 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007166:	f003 0301 	and.w	r3, r3, #1
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00b      	beq.n	8007186 <HAL_UART_IRQHandler+0xae>
 800716e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007176:	2b00      	cmp	r3, #0
 8007178:	d005      	beq.n	8007186 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717e:	f043 0201 	orr.w	r2, r3, #1
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800718a:	f003 0304 	and.w	r3, r3, #4
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00b      	beq.n	80071aa <HAL_UART_IRQHandler+0xd2>
 8007192:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007196:	f003 0301 	and.w	r3, r3, #1
 800719a:	2b00      	cmp	r3, #0
 800719c:	d005      	beq.n	80071aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a2:	f043 0202 	orr.w	r2, r3, #2
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ae:	f003 0302 	and.w	r3, r3, #2
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00b      	beq.n	80071ce <HAL_UART_IRQHandler+0xf6>
 80071b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071ba:	f003 0301 	and.w	r3, r3, #1
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d005      	beq.n	80071ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c6:	f043 0204 	orr.w	r2, r3, #4
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80071ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071d2:	f003 0308 	and.w	r3, r3, #8
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d011      	beq.n	80071fe <HAL_UART_IRQHandler+0x126>
 80071da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071de:	f003 0320 	and.w	r3, r3, #32
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d105      	bne.n	80071f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80071e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d005      	beq.n	80071fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f6:	f043 0208 	orr.w	r2, r3, #8
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007202:	2b00      	cmp	r3, #0
 8007204:	f000 81ed 	beq.w	80075e2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800720c:	f003 0320 	and.w	r3, r3, #32
 8007210:	2b00      	cmp	r3, #0
 8007212:	d008      	beq.n	8007226 <HAL_UART_IRQHandler+0x14e>
 8007214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007218:	f003 0320 	and.w	r3, r3, #32
 800721c:	2b00      	cmp	r3, #0
 800721e:	d002      	beq.n	8007226 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 faf0 	bl	8007806 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	695b      	ldr	r3, [r3, #20]
 800722c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007230:	2b40      	cmp	r3, #64	; 0x40
 8007232:	bf0c      	ite	eq
 8007234:	2301      	moveq	r3, #1
 8007236:	2300      	movne	r3, #0
 8007238:	b2db      	uxtb	r3, r3
 800723a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007242:	f003 0308 	and.w	r3, r3, #8
 8007246:	2b00      	cmp	r3, #0
 8007248:	d103      	bne.n	8007252 <HAL_UART_IRQHandler+0x17a>
 800724a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800724e:	2b00      	cmp	r3, #0
 8007250:	d04f      	beq.n	80072f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f9f8 	bl	8007648 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007262:	2b40      	cmp	r3, #64	; 0x40
 8007264:	d141      	bne.n	80072ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	3314      	adds	r3, #20
 800726c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007270:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007274:	e853 3f00 	ldrex	r3, [r3]
 8007278:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800727c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007280:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007284:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3314      	adds	r3, #20
 800728e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007292:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007296:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800729e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80072a2:	e841 2300 	strex	r3, r2, [r1]
 80072a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80072aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1d9      	bne.n	8007266 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d013      	beq.n	80072e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072be:	4a7d      	ldr	r2, [pc, #500]	; (80074b4 <HAL_UART_IRQHandler+0x3dc>)
 80072c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fc fd1e 	bl	8003d08 <HAL_DMA_Abort_IT>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d016      	beq.n	8007300 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80072dc:	4610      	mov	r0, r2
 80072de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e0:	e00e      	b.n	8007300 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f99a 	bl	800761c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e8:	e00a      	b.n	8007300 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f996 	bl	800761c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f0:	e006      	b.n	8007300 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f992 	bl	800761c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80072fe:	e170      	b.n	80075e2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007300:	bf00      	nop
    return;
 8007302:	e16e      	b.n	80075e2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007308:	2b01      	cmp	r3, #1
 800730a:	f040 814a 	bne.w	80075a2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800730e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007312:	f003 0310 	and.w	r3, r3, #16
 8007316:	2b00      	cmp	r3, #0
 8007318:	f000 8143 	beq.w	80075a2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800731c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007320:	f003 0310 	and.w	r3, r3, #16
 8007324:	2b00      	cmp	r3, #0
 8007326:	f000 813c 	beq.w	80075a2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800732a:	2300      	movs	r3, #0
 800732c:	60bb      	str	r3, [r7, #8]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	60bb      	str	r3, [r7, #8]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	60bb      	str	r3, [r7, #8]
 800733e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800734a:	2b40      	cmp	r3, #64	; 0x40
 800734c:	f040 80b4 	bne.w	80074b8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800735c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007360:	2b00      	cmp	r3, #0
 8007362:	f000 8140 	beq.w	80075e6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800736a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800736e:	429a      	cmp	r2, r3
 8007370:	f080 8139 	bcs.w	80075e6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800737a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007386:	f000 8088 	beq.w	800749a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	330c      	adds	r3, #12
 8007390:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007394:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007398:	e853 3f00 	ldrex	r3, [r3]
 800739c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80073a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	330c      	adds	r3, #12
 80073b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80073b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80073ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80073c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073c6:	e841 2300 	strex	r3, r2, [r1]
 80073ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80073ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1d9      	bne.n	800738a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3314      	adds	r3, #20
 80073dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073e0:	e853 3f00 	ldrex	r3, [r3]
 80073e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80073e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073e8:	f023 0301 	bic.w	r3, r3, #1
 80073ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3314      	adds	r3, #20
 80073f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007400:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007402:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007406:	e841 2300 	strex	r3, r2, [r1]
 800740a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800740c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1e1      	bne.n	80073d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3314      	adds	r3, #20
 8007418:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800741c:	e853 3f00 	ldrex	r3, [r3]
 8007420:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007428:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3314      	adds	r3, #20
 8007432:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007436:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007438:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800743c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800743e:	e841 2300 	strex	r3, r2, [r1]
 8007442:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007444:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1e3      	bne.n	8007412 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2220      	movs	r2, #32
 800744e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	330c      	adds	r3, #12
 800745e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007462:	e853 3f00 	ldrex	r3, [r3]
 8007466:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800746a:	f023 0310 	bic.w	r3, r3, #16
 800746e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	330c      	adds	r3, #12
 8007478:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800747c:	65ba      	str	r2, [r7, #88]	; 0x58
 800747e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007480:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007482:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007484:	e841 2300 	strex	r3, r2, [r1]
 8007488:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800748a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1e3      	bne.n	8007458 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007494:	4618      	mov	r0, r3
 8007496:	f7fc fbc7 	bl	8003c28 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	4619      	mov	r1, r3
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f8c0 	bl	8007630 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074b0:	e099      	b.n	80075e6 <HAL_UART_IRQHandler+0x50e>
 80074b2:	bf00      	nop
 80074b4:	0800770f 	.word	0x0800770f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	1ad3      	subs	r3, r2, r3
 80074c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f000 808b 	beq.w	80075ea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80074d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f000 8086 	beq.w	80075ea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	330c      	adds	r3, #12
 80074e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e8:	e853 3f00 	ldrex	r3, [r3]
 80074ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	330c      	adds	r3, #12
 80074fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007502:	647a      	str	r2, [r7, #68]	; 0x44
 8007504:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007506:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007508:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800750a:	e841 2300 	strex	r3, r2, [r1]
 800750e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1e3      	bne.n	80074de <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	3314      	adds	r3, #20
 800751c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007520:	e853 3f00 	ldrex	r3, [r3]
 8007524:	623b      	str	r3, [r7, #32]
   return(result);
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	f023 0301 	bic.w	r3, r3, #1
 800752c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3314      	adds	r3, #20
 8007536:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800753a:	633a      	str	r2, [r7, #48]	; 0x30
 800753c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007542:	e841 2300 	strex	r3, r2, [r1]
 8007546:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1e3      	bne.n	8007516 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2220      	movs	r2, #32
 8007552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	330c      	adds	r3, #12
 8007562:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	e853 3f00 	ldrex	r3, [r3]
 800756a:	60fb      	str	r3, [r7, #12]
   return(result);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f023 0310 	bic.w	r3, r3, #16
 8007572:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	330c      	adds	r3, #12
 800757c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007580:	61fa      	str	r2, [r7, #28]
 8007582:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007584:	69b9      	ldr	r1, [r7, #24]
 8007586:	69fa      	ldr	r2, [r7, #28]
 8007588:	e841 2300 	strex	r3, r2, [r1]
 800758c:	617b      	str	r3, [r7, #20]
   return(result);
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1e3      	bne.n	800755c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007594:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007598:	4619      	mov	r1, r3
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f848 	bl	8007630 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075a0:	e023      	b.n	80075ea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80075a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d009      	beq.n	80075c2 <HAL_UART_IRQHandler+0x4ea>
 80075ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d003      	beq.n	80075c2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f8bb 	bl	8007736 <UART_Transmit_IT>
    return;
 80075c0:	e014      	b.n	80075ec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00e      	beq.n	80075ec <HAL_UART_IRQHandler+0x514>
 80075ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d008      	beq.n	80075ec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f8fb 	bl	80077d6 <UART_EndTransmit_IT>
    return;
 80075e0:	e004      	b.n	80075ec <HAL_UART_IRQHandler+0x514>
    return;
 80075e2:	bf00      	nop
 80075e4:	e002      	b.n	80075ec <HAL_UART_IRQHandler+0x514>
      return;
 80075e6:	bf00      	nop
 80075e8:	e000      	b.n	80075ec <HAL_UART_IRQHandler+0x514>
      return;
 80075ea:	bf00      	nop
  }
}
 80075ec:	37e8      	adds	r7, #232	; 0xe8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop

080075f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	460b      	mov	r3, r1
 800763a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007648:	b480      	push	{r7}
 800764a:	b095      	sub	sp, #84	; 0x54
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	330c      	adds	r3, #12
 8007656:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800765a:	e853 3f00 	ldrex	r3, [r3]
 800765e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007662:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	330c      	adds	r3, #12
 800766e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007670:	643a      	str	r2, [r7, #64]	; 0x40
 8007672:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007674:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007676:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007678:	e841 2300 	strex	r3, r2, [r1]
 800767c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800767e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1e5      	bne.n	8007650 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3314      	adds	r3, #20
 800768a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768c:	6a3b      	ldr	r3, [r7, #32]
 800768e:	e853 3f00 	ldrex	r3, [r3]
 8007692:	61fb      	str	r3, [r7, #28]
   return(result);
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	f023 0301 	bic.w	r3, r3, #1
 800769a:	64bb      	str	r3, [r7, #72]	; 0x48
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	3314      	adds	r3, #20
 80076a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076ac:	e841 2300 	strex	r3, r2, [r1]
 80076b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1e5      	bne.n	8007684 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d119      	bne.n	80076f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	330c      	adds	r3, #12
 80076c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	e853 3f00 	ldrex	r3, [r3]
 80076ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	f023 0310 	bic.w	r3, r3, #16
 80076d6:	647b      	str	r3, [r7, #68]	; 0x44
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	330c      	adds	r3, #12
 80076de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076e0:	61ba      	str	r2, [r7, #24]
 80076e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e4:	6979      	ldr	r1, [r7, #20]
 80076e6:	69ba      	ldr	r2, [r7, #24]
 80076e8:	e841 2300 	strex	r3, r2, [r1]
 80076ec:	613b      	str	r3, [r7, #16]
   return(result);
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1e5      	bne.n	80076c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2220      	movs	r2, #32
 80076f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007702:	bf00      	nop
 8007704:	3754      	adds	r7, #84	; 0x54
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b084      	sub	sp, #16
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f7ff ff77 	bl	800761c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800772e:	bf00      	nop
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007736:	b480      	push	{r7}
 8007738:	b085      	sub	sp, #20
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b21      	cmp	r3, #33	; 0x21
 8007748:	d13e      	bne.n	80077c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007752:	d114      	bne.n	800777e <UART_Transmit_IT+0x48>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d110      	bne.n	800777e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a1b      	ldr	r3, [r3, #32]
 8007760:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	881b      	ldrh	r3, [r3, #0]
 8007766:	461a      	mov	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007770:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	1c9a      	adds	r2, r3, #2
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	621a      	str	r2, [r3, #32]
 800777c:	e008      	b.n	8007790 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	1c59      	adds	r1, r3, #1
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	6211      	str	r1, [r2, #32]
 8007788:	781a      	ldrb	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007794:	b29b      	uxth	r3, r3
 8007796:	3b01      	subs	r3, #1
 8007798:	b29b      	uxth	r3, r3
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	4619      	mov	r1, r3
 800779e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10f      	bne.n	80077c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68da      	ldr	r2, [r3, #12]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68da      	ldr	r2, [r3, #12]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80077c4:	2300      	movs	r3, #0
 80077c6:	e000      	b.n	80077ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80077c8:	2302      	movs	r3, #2
  }
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b082      	sub	sp, #8
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68da      	ldr	r2, [r3, #12]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2220      	movs	r2, #32
 80077f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7ff fefc 	bl	80075f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3708      	adds	r7, #8
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b08c      	sub	sp, #48	; 0x30
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b22      	cmp	r3, #34	; 0x22
 8007818:	f040 80ab 	bne.w	8007972 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007824:	d117      	bne.n	8007856 <UART_Receive_IT+0x50>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d113      	bne.n	8007856 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800782e:	2300      	movs	r3, #0
 8007830:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007836:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	b29b      	uxth	r3, r3
 8007840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007844:	b29a      	uxth	r2, r3
 8007846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007848:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800784e:	1c9a      	adds	r2, r3, #2
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	629a      	str	r2, [r3, #40]	; 0x28
 8007854:	e026      	b.n	80078a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800785c:	2300      	movs	r3, #0
 800785e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007868:	d007      	beq.n	800787a <UART_Receive_IT+0x74>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10a      	bne.n	8007888 <UART_Receive_IT+0x82>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d106      	bne.n	8007888 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	b2da      	uxtb	r2, r3
 8007882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007884:	701a      	strb	r2, [r3, #0]
 8007886:	e008      	b.n	800789a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	b2db      	uxtb	r3, r3
 8007890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007894:	b2da      	uxtb	r2, r3
 8007896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007898:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789e:	1c5a      	adds	r2, r3, #1
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	3b01      	subs	r3, #1
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	4619      	mov	r1, r3
 80078b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d15a      	bne.n	800796e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68da      	ldr	r2, [r3, #12]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f022 0220 	bic.w	r2, r2, #32
 80078c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68da      	ldr	r2, [r3, #12]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	695a      	ldr	r2, [r3, #20]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f022 0201 	bic.w	r2, r2, #1
 80078e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2220      	movs	r2, #32
 80078ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d135      	bne.n	8007964 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	330c      	adds	r3, #12
 8007904:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	e853 3f00 	ldrex	r3, [r3]
 800790c:	613b      	str	r3, [r7, #16]
   return(result);
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	f023 0310 	bic.w	r3, r3, #16
 8007914:	627b      	str	r3, [r7, #36]	; 0x24
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	330c      	adds	r3, #12
 800791c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800791e:	623a      	str	r2, [r7, #32]
 8007920:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007922:	69f9      	ldr	r1, [r7, #28]
 8007924:	6a3a      	ldr	r2, [r7, #32]
 8007926:	e841 2300 	strex	r3, r2, [r1]
 800792a:	61bb      	str	r3, [r7, #24]
   return(result);
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1e5      	bne.n	80078fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 0310 	and.w	r3, r3, #16
 800793c:	2b10      	cmp	r3, #16
 800793e:	d10a      	bne.n	8007956 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007940:	2300      	movs	r3, #0
 8007942:	60fb      	str	r3, [r7, #12]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	60fb      	str	r3, [r7, #12]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	60fb      	str	r3, [r7, #12]
 8007954:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800795a:	4619      	mov	r1, r3
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f7ff fe67 	bl	8007630 <HAL_UARTEx_RxEventCallback>
 8007962:	e002      	b.n	800796a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7ff fe4f 	bl	8007608 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800796a:	2300      	movs	r3, #0
 800796c:	e002      	b.n	8007974 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	e000      	b.n	8007974 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007972:	2302      	movs	r3, #2
  }
}
 8007974:	4618      	mov	r0, r3
 8007976:	3730      	adds	r7, #48	; 0x30
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800797c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007980:	b09f      	sub	sp, #124	; 0x7c
 8007982:	af00      	add	r7, sp, #0
 8007984:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007992:	68d9      	ldr	r1, [r3, #12]
 8007994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	ea40 0301 	orr.w	r3, r0, r1
 800799c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800799e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079a0:	689a      	ldr	r2, [r3, #8]
 80079a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	431a      	orrs	r2, r3
 80079a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	431a      	orrs	r2, r3
 80079ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b0:	69db      	ldr	r3, [r3, #28]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80079b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80079c0:	f021 010c 	bic.w	r1, r1, #12
 80079c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079ca:	430b      	orrs	r3, r1
 80079cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	695b      	ldr	r3, [r3, #20]
 80079d4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80079d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079da:	6999      	ldr	r1, [r3, #24]
 80079dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	ea40 0301 	orr.w	r3, r0, r1
 80079e4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	4bc5      	ldr	r3, [pc, #788]	; (8007d00 <UART_SetConfig+0x384>)
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d004      	beq.n	80079fa <UART_SetConfig+0x7e>
 80079f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	4bc3      	ldr	r3, [pc, #780]	; (8007d04 <UART_SetConfig+0x388>)
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d103      	bne.n	8007a02 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80079fa:	f7fe f945 	bl	8005c88 <HAL_RCC_GetPCLK2Freq>
 80079fe:	6778      	str	r0, [r7, #116]	; 0x74
 8007a00:	e002      	b.n	8007a08 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a02:	f7fe f92d 	bl	8005c60 <HAL_RCC_GetPCLK1Freq>
 8007a06:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a0a:	69db      	ldr	r3, [r3, #28]
 8007a0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a10:	f040 80b6 	bne.w	8007b80 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a16:	461c      	mov	r4, r3
 8007a18:	f04f 0500 	mov.w	r5, #0
 8007a1c:	4622      	mov	r2, r4
 8007a1e:	462b      	mov	r3, r5
 8007a20:	1891      	adds	r1, r2, r2
 8007a22:	6439      	str	r1, [r7, #64]	; 0x40
 8007a24:	415b      	adcs	r3, r3
 8007a26:	647b      	str	r3, [r7, #68]	; 0x44
 8007a28:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007a2c:	1912      	adds	r2, r2, r4
 8007a2e:	eb45 0303 	adc.w	r3, r5, r3
 8007a32:	f04f 0000 	mov.w	r0, #0
 8007a36:	f04f 0100 	mov.w	r1, #0
 8007a3a:	00d9      	lsls	r1, r3, #3
 8007a3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a40:	00d0      	lsls	r0, r2, #3
 8007a42:	4602      	mov	r2, r0
 8007a44:	460b      	mov	r3, r1
 8007a46:	1911      	adds	r1, r2, r4
 8007a48:	6639      	str	r1, [r7, #96]	; 0x60
 8007a4a:	416b      	adcs	r3, r5
 8007a4c:	667b      	str	r3, [r7, #100]	; 0x64
 8007a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	461a      	mov	r2, r3
 8007a54:	f04f 0300 	mov.w	r3, #0
 8007a58:	1891      	adds	r1, r2, r2
 8007a5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007a5c:	415b      	adcs	r3, r3
 8007a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a64:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007a68:	f7f8 fec0 	bl	80007ec <__aeabi_uldivmod>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	4ba5      	ldr	r3, [pc, #660]	; (8007d08 <UART_SetConfig+0x38c>)
 8007a72:	fba3 2302 	umull	r2, r3, r3, r2
 8007a76:	095b      	lsrs	r3, r3, #5
 8007a78:	011e      	lsls	r6, r3, #4
 8007a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a7c:	461c      	mov	r4, r3
 8007a7e:	f04f 0500 	mov.w	r5, #0
 8007a82:	4622      	mov	r2, r4
 8007a84:	462b      	mov	r3, r5
 8007a86:	1891      	adds	r1, r2, r2
 8007a88:	6339      	str	r1, [r7, #48]	; 0x30
 8007a8a:	415b      	adcs	r3, r3
 8007a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a8e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007a92:	1912      	adds	r2, r2, r4
 8007a94:	eb45 0303 	adc.w	r3, r5, r3
 8007a98:	f04f 0000 	mov.w	r0, #0
 8007a9c:	f04f 0100 	mov.w	r1, #0
 8007aa0:	00d9      	lsls	r1, r3, #3
 8007aa2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007aa6:	00d0      	lsls	r0, r2, #3
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	460b      	mov	r3, r1
 8007aac:	1911      	adds	r1, r2, r4
 8007aae:	65b9      	str	r1, [r7, #88]	; 0x58
 8007ab0:	416b      	adcs	r3, r5
 8007ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	461a      	mov	r2, r3
 8007aba:	f04f 0300 	mov.w	r3, #0
 8007abe:	1891      	adds	r1, r2, r2
 8007ac0:	62b9      	str	r1, [r7, #40]	; 0x28
 8007ac2:	415b      	adcs	r3, r3
 8007ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ac6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007aca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007ace:	f7f8 fe8d 	bl	80007ec <__aeabi_uldivmod>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	4b8c      	ldr	r3, [pc, #560]	; (8007d08 <UART_SetConfig+0x38c>)
 8007ad8:	fba3 1302 	umull	r1, r3, r3, r2
 8007adc:	095b      	lsrs	r3, r3, #5
 8007ade:	2164      	movs	r1, #100	; 0x64
 8007ae0:	fb01 f303 	mul.w	r3, r1, r3
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	00db      	lsls	r3, r3, #3
 8007ae8:	3332      	adds	r3, #50	; 0x32
 8007aea:	4a87      	ldr	r2, [pc, #540]	; (8007d08 <UART_SetConfig+0x38c>)
 8007aec:	fba2 2303 	umull	r2, r3, r2, r3
 8007af0:	095b      	lsrs	r3, r3, #5
 8007af2:	005b      	lsls	r3, r3, #1
 8007af4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007af8:	441e      	add	r6, r3
 8007afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007afc:	4618      	mov	r0, r3
 8007afe:	f04f 0100 	mov.w	r1, #0
 8007b02:	4602      	mov	r2, r0
 8007b04:	460b      	mov	r3, r1
 8007b06:	1894      	adds	r4, r2, r2
 8007b08:	623c      	str	r4, [r7, #32]
 8007b0a:	415b      	adcs	r3, r3
 8007b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b12:	1812      	adds	r2, r2, r0
 8007b14:	eb41 0303 	adc.w	r3, r1, r3
 8007b18:	f04f 0400 	mov.w	r4, #0
 8007b1c:	f04f 0500 	mov.w	r5, #0
 8007b20:	00dd      	lsls	r5, r3, #3
 8007b22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007b26:	00d4      	lsls	r4, r2, #3
 8007b28:	4622      	mov	r2, r4
 8007b2a:	462b      	mov	r3, r5
 8007b2c:	1814      	adds	r4, r2, r0
 8007b2e:	653c      	str	r4, [r7, #80]	; 0x50
 8007b30:	414b      	adcs	r3, r1
 8007b32:	657b      	str	r3, [r7, #84]	; 0x54
 8007b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	461a      	mov	r2, r3
 8007b3a:	f04f 0300 	mov.w	r3, #0
 8007b3e:	1891      	adds	r1, r2, r2
 8007b40:	61b9      	str	r1, [r7, #24]
 8007b42:	415b      	adcs	r3, r3
 8007b44:	61fb      	str	r3, [r7, #28]
 8007b46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b4a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007b4e:	f7f8 fe4d 	bl	80007ec <__aeabi_uldivmod>
 8007b52:	4602      	mov	r2, r0
 8007b54:	460b      	mov	r3, r1
 8007b56:	4b6c      	ldr	r3, [pc, #432]	; (8007d08 <UART_SetConfig+0x38c>)
 8007b58:	fba3 1302 	umull	r1, r3, r3, r2
 8007b5c:	095b      	lsrs	r3, r3, #5
 8007b5e:	2164      	movs	r1, #100	; 0x64
 8007b60:	fb01 f303 	mul.w	r3, r1, r3
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	00db      	lsls	r3, r3, #3
 8007b68:	3332      	adds	r3, #50	; 0x32
 8007b6a:	4a67      	ldr	r2, [pc, #412]	; (8007d08 <UART_SetConfig+0x38c>)
 8007b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b70:	095b      	lsrs	r3, r3, #5
 8007b72:	f003 0207 	and.w	r2, r3, #7
 8007b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4432      	add	r2, r6
 8007b7c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b7e:	e0b9      	b.n	8007cf4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b82:	461c      	mov	r4, r3
 8007b84:	f04f 0500 	mov.w	r5, #0
 8007b88:	4622      	mov	r2, r4
 8007b8a:	462b      	mov	r3, r5
 8007b8c:	1891      	adds	r1, r2, r2
 8007b8e:	6139      	str	r1, [r7, #16]
 8007b90:	415b      	adcs	r3, r3
 8007b92:	617b      	str	r3, [r7, #20]
 8007b94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007b98:	1912      	adds	r2, r2, r4
 8007b9a:	eb45 0303 	adc.w	r3, r5, r3
 8007b9e:	f04f 0000 	mov.w	r0, #0
 8007ba2:	f04f 0100 	mov.w	r1, #0
 8007ba6:	00d9      	lsls	r1, r3, #3
 8007ba8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007bac:	00d0      	lsls	r0, r2, #3
 8007bae:	4602      	mov	r2, r0
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	eb12 0804 	adds.w	r8, r2, r4
 8007bb6:	eb43 0905 	adc.w	r9, r3, r5
 8007bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f04f 0100 	mov.w	r1, #0
 8007bc4:	f04f 0200 	mov.w	r2, #0
 8007bc8:	f04f 0300 	mov.w	r3, #0
 8007bcc:	008b      	lsls	r3, r1, #2
 8007bce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007bd2:	0082      	lsls	r2, r0, #2
 8007bd4:	4640      	mov	r0, r8
 8007bd6:	4649      	mov	r1, r9
 8007bd8:	f7f8 fe08 	bl	80007ec <__aeabi_uldivmod>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	460b      	mov	r3, r1
 8007be0:	4b49      	ldr	r3, [pc, #292]	; (8007d08 <UART_SetConfig+0x38c>)
 8007be2:	fba3 2302 	umull	r2, r3, r3, r2
 8007be6:	095b      	lsrs	r3, r3, #5
 8007be8:	011e      	lsls	r6, r3, #4
 8007bea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bec:	4618      	mov	r0, r3
 8007bee:	f04f 0100 	mov.w	r1, #0
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	1894      	adds	r4, r2, r2
 8007bf8:	60bc      	str	r4, [r7, #8]
 8007bfa:	415b      	adcs	r3, r3
 8007bfc:	60fb      	str	r3, [r7, #12]
 8007bfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c02:	1812      	adds	r2, r2, r0
 8007c04:	eb41 0303 	adc.w	r3, r1, r3
 8007c08:	f04f 0400 	mov.w	r4, #0
 8007c0c:	f04f 0500 	mov.w	r5, #0
 8007c10:	00dd      	lsls	r5, r3, #3
 8007c12:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007c16:	00d4      	lsls	r4, r2, #3
 8007c18:	4622      	mov	r2, r4
 8007c1a:	462b      	mov	r3, r5
 8007c1c:	1814      	adds	r4, r2, r0
 8007c1e:	64bc      	str	r4, [r7, #72]	; 0x48
 8007c20:	414b      	adcs	r3, r1
 8007c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f04f 0100 	mov.w	r1, #0
 8007c2e:	f04f 0200 	mov.w	r2, #0
 8007c32:	f04f 0300 	mov.w	r3, #0
 8007c36:	008b      	lsls	r3, r1, #2
 8007c38:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007c3c:	0082      	lsls	r2, r0, #2
 8007c3e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007c42:	f7f8 fdd3 	bl	80007ec <__aeabi_uldivmod>
 8007c46:	4602      	mov	r2, r0
 8007c48:	460b      	mov	r3, r1
 8007c4a:	4b2f      	ldr	r3, [pc, #188]	; (8007d08 <UART_SetConfig+0x38c>)
 8007c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8007c50:	095b      	lsrs	r3, r3, #5
 8007c52:	2164      	movs	r1, #100	; 0x64
 8007c54:	fb01 f303 	mul.w	r3, r1, r3
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	011b      	lsls	r3, r3, #4
 8007c5c:	3332      	adds	r3, #50	; 0x32
 8007c5e:	4a2a      	ldr	r2, [pc, #168]	; (8007d08 <UART_SetConfig+0x38c>)
 8007c60:	fba2 2303 	umull	r2, r3, r2, r3
 8007c64:	095b      	lsrs	r3, r3, #5
 8007c66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c6a:	441e      	add	r6, r3
 8007c6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f04f 0100 	mov.w	r1, #0
 8007c74:	4602      	mov	r2, r0
 8007c76:	460b      	mov	r3, r1
 8007c78:	1894      	adds	r4, r2, r2
 8007c7a:	603c      	str	r4, [r7, #0]
 8007c7c:	415b      	adcs	r3, r3
 8007c7e:	607b      	str	r3, [r7, #4]
 8007c80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c84:	1812      	adds	r2, r2, r0
 8007c86:	eb41 0303 	adc.w	r3, r1, r3
 8007c8a:	f04f 0400 	mov.w	r4, #0
 8007c8e:	f04f 0500 	mov.w	r5, #0
 8007c92:	00dd      	lsls	r5, r3, #3
 8007c94:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007c98:	00d4      	lsls	r4, r2, #3
 8007c9a:	4622      	mov	r2, r4
 8007c9c:	462b      	mov	r3, r5
 8007c9e:	eb12 0a00 	adds.w	sl, r2, r0
 8007ca2:	eb43 0b01 	adc.w	fp, r3, r1
 8007ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	4618      	mov	r0, r3
 8007cac:	f04f 0100 	mov.w	r1, #0
 8007cb0:	f04f 0200 	mov.w	r2, #0
 8007cb4:	f04f 0300 	mov.w	r3, #0
 8007cb8:	008b      	lsls	r3, r1, #2
 8007cba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007cbe:	0082      	lsls	r2, r0, #2
 8007cc0:	4650      	mov	r0, sl
 8007cc2:	4659      	mov	r1, fp
 8007cc4:	f7f8 fd92 	bl	80007ec <__aeabi_uldivmod>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	460b      	mov	r3, r1
 8007ccc:	4b0e      	ldr	r3, [pc, #56]	; (8007d08 <UART_SetConfig+0x38c>)
 8007cce:	fba3 1302 	umull	r1, r3, r3, r2
 8007cd2:	095b      	lsrs	r3, r3, #5
 8007cd4:	2164      	movs	r1, #100	; 0x64
 8007cd6:	fb01 f303 	mul.w	r3, r1, r3
 8007cda:	1ad3      	subs	r3, r2, r3
 8007cdc:	011b      	lsls	r3, r3, #4
 8007cde:	3332      	adds	r3, #50	; 0x32
 8007ce0:	4a09      	ldr	r2, [pc, #36]	; (8007d08 <UART_SetConfig+0x38c>)
 8007ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce6:	095b      	lsrs	r3, r3, #5
 8007ce8:	f003 020f 	and.w	r2, r3, #15
 8007cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4432      	add	r2, r6
 8007cf2:	609a      	str	r2, [r3, #8]
}
 8007cf4:	bf00      	nop
 8007cf6:	377c      	adds	r7, #124	; 0x7c
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cfe:	bf00      	nop
 8007d00:	40011000 	.word	0x40011000
 8007d04:	40011400 	.word	0x40011400
 8007d08:	51eb851f 	.word	0x51eb851f

08007d0c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b087      	sub	sp, #28
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	4613      	mov	r3, r2
 8007d18:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007d1a:	79fb      	ldrb	r3, [r7, #7]
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d165      	bne.n	8007dec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	4a41      	ldr	r2, [pc, #260]	; (8007e28 <USB_SetTurnaroundTime+0x11c>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d906      	bls.n	8007d36 <USB_SetTurnaroundTime+0x2a>
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	4a40      	ldr	r2, [pc, #256]	; (8007e2c <USB_SetTurnaroundTime+0x120>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d202      	bcs.n	8007d36 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007d30:	230f      	movs	r3, #15
 8007d32:	617b      	str	r3, [r7, #20]
 8007d34:	e062      	b.n	8007dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	4a3c      	ldr	r2, [pc, #240]	; (8007e2c <USB_SetTurnaroundTime+0x120>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d306      	bcc.n	8007d4c <USB_SetTurnaroundTime+0x40>
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	4a3b      	ldr	r2, [pc, #236]	; (8007e30 <USB_SetTurnaroundTime+0x124>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d202      	bcs.n	8007d4c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007d46:	230e      	movs	r3, #14
 8007d48:	617b      	str	r3, [r7, #20]
 8007d4a:	e057      	b.n	8007dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	4a38      	ldr	r2, [pc, #224]	; (8007e30 <USB_SetTurnaroundTime+0x124>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d306      	bcc.n	8007d62 <USB_SetTurnaroundTime+0x56>
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	4a37      	ldr	r2, [pc, #220]	; (8007e34 <USB_SetTurnaroundTime+0x128>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d202      	bcs.n	8007d62 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007d5c:	230d      	movs	r3, #13
 8007d5e:	617b      	str	r3, [r7, #20]
 8007d60:	e04c      	b.n	8007dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	4a33      	ldr	r2, [pc, #204]	; (8007e34 <USB_SetTurnaroundTime+0x128>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d306      	bcc.n	8007d78 <USB_SetTurnaroundTime+0x6c>
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	4a32      	ldr	r2, [pc, #200]	; (8007e38 <USB_SetTurnaroundTime+0x12c>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d802      	bhi.n	8007d78 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007d72:	230c      	movs	r3, #12
 8007d74:	617b      	str	r3, [r7, #20]
 8007d76:	e041      	b.n	8007dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	4a2f      	ldr	r2, [pc, #188]	; (8007e38 <USB_SetTurnaroundTime+0x12c>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d906      	bls.n	8007d8e <USB_SetTurnaroundTime+0x82>
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	4a2e      	ldr	r2, [pc, #184]	; (8007e3c <USB_SetTurnaroundTime+0x130>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d802      	bhi.n	8007d8e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007d88:	230b      	movs	r3, #11
 8007d8a:	617b      	str	r3, [r7, #20]
 8007d8c:	e036      	b.n	8007dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	4a2a      	ldr	r2, [pc, #168]	; (8007e3c <USB_SetTurnaroundTime+0x130>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d906      	bls.n	8007da4 <USB_SetTurnaroundTime+0x98>
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	4a29      	ldr	r2, [pc, #164]	; (8007e40 <USB_SetTurnaroundTime+0x134>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d802      	bhi.n	8007da4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007d9e:	230a      	movs	r3, #10
 8007da0:	617b      	str	r3, [r7, #20]
 8007da2:	e02b      	b.n	8007dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	4a26      	ldr	r2, [pc, #152]	; (8007e40 <USB_SetTurnaroundTime+0x134>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d906      	bls.n	8007dba <USB_SetTurnaroundTime+0xae>
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	4a25      	ldr	r2, [pc, #148]	; (8007e44 <USB_SetTurnaroundTime+0x138>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d202      	bcs.n	8007dba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007db4:	2309      	movs	r3, #9
 8007db6:	617b      	str	r3, [r7, #20]
 8007db8:	e020      	b.n	8007dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	4a21      	ldr	r2, [pc, #132]	; (8007e44 <USB_SetTurnaroundTime+0x138>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d306      	bcc.n	8007dd0 <USB_SetTurnaroundTime+0xc4>
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	4a20      	ldr	r2, [pc, #128]	; (8007e48 <USB_SetTurnaroundTime+0x13c>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d802      	bhi.n	8007dd0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007dca:	2308      	movs	r3, #8
 8007dcc:	617b      	str	r3, [r7, #20]
 8007dce:	e015      	b.n	8007dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	4a1d      	ldr	r2, [pc, #116]	; (8007e48 <USB_SetTurnaroundTime+0x13c>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d906      	bls.n	8007de6 <USB_SetTurnaroundTime+0xda>
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	4a1c      	ldr	r2, [pc, #112]	; (8007e4c <USB_SetTurnaroundTime+0x140>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d202      	bcs.n	8007de6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007de0:	2307      	movs	r3, #7
 8007de2:	617b      	str	r3, [r7, #20]
 8007de4:	e00a      	b.n	8007dfc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007de6:	2306      	movs	r3, #6
 8007de8:	617b      	str	r3, [r7, #20]
 8007dea:	e007      	b.n	8007dfc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007dec:	79fb      	ldrb	r3, [r7, #7]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d102      	bne.n	8007df8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007df2:	2309      	movs	r3, #9
 8007df4:	617b      	str	r3, [r7, #20]
 8007df6:	e001      	b.n	8007dfc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007df8:	2309      	movs	r3, #9
 8007dfa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	68da      	ldr	r2, [r3, #12]
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	029b      	lsls	r3, r3, #10
 8007e10:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007e14:	431a      	orrs	r2, r3
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	371c      	adds	r7, #28
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr
 8007e28:	00d8acbf 	.word	0x00d8acbf
 8007e2c:	00e4e1c0 	.word	0x00e4e1c0
 8007e30:	00f42400 	.word	0x00f42400
 8007e34:	01067380 	.word	0x01067380
 8007e38:	011a499f 	.word	0x011a499f
 8007e3c:	01312cff 	.word	0x01312cff
 8007e40:	014ca43f 	.word	0x014ca43f
 8007e44:	016e3600 	.word	0x016e3600
 8007e48:	01a6ab1f 	.word	0x01a6ab1f
 8007e4c:	01e84800 	.word	0x01e84800

08007e50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	019b      	lsls	r3, r3, #6
 8007e62:	f043 0220 	orr.w	r2, r3, #32
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	60fb      	str	r3, [r7, #12]
 8007e70:	4a08      	ldr	r2, [pc, #32]	; (8007e94 <USB_FlushTxFifo+0x44>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d901      	bls.n	8007e7a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e006      	b.n	8007e88 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	f003 0320 	and.w	r3, r3, #32
 8007e82:	2b20      	cmp	r3, #32
 8007e84:	d0f1      	beq.n	8007e6a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3714      	adds	r7, #20
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr
 8007e94:	00030d40 	.word	0x00030d40

08007e98 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b087      	sub	sp, #28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f003 0306 	and.w	r3, r3, #6
 8007eb0:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d102      	bne.n	8007ebe <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	75fb      	strb	r3, [r7, #23]
 8007ebc:	e00a      	b.n	8007ed4 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d002      	beq.n	8007eca <USB_GetDevSpeed+0x32>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2b06      	cmp	r3, #6
 8007ec8:	d102      	bne.n	8007ed0 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007eca:	2302      	movs	r3, #2
 8007ecc:	75fb      	strb	r3, [r7, #23]
 8007ece:	e001      	b.n	8007ed4 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007ed0:	230f      	movs	r3, #15
 8007ed2:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	371c      	adds	r7, #28
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr

08007ee2 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	b085      	sub	sp, #20
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
 8007eea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	785b      	ldrb	r3, [r3, #1]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d13a      	bne.n	8007f74 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f04:	69da      	ldr	r2, [r3, #28]
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	f003 030f 	and.w	r3, r3, #15
 8007f0e:	2101      	movs	r1, #1
 8007f10:	fa01 f303 	lsl.w	r3, r1, r3
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	68f9      	ldr	r1, [r7, #12]
 8007f18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	015a      	lsls	r2, r3, #5
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	4413      	add	r3, r2
 8007f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d155      	bne.n	8007fe2 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	015a      	lsls	r2, r3, #5
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	78db      	ldrb	r3, [r3, #3]
 8007f50:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f52:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	059b      	lsls	r3, r3, #22
 8007f58:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	68ba      	ldr	r2, [r7, #8]
 8007f5e:	0151      	lsls	r1, r2, #5
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	440a      	add	r2, r1
 8007f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f70:	6013      	str	r3, [r2, #0]
 8007f72:	e036      	b.n	8007fe2 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f7a:	69da      	ldr	r2, [r3, #28]
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	f003 030f 	and.w	r3, r3, #15
 8007f84:	2101      	movs	r1, #1
 8007f86:	fa01 f303 	lsl.w	r3, r1, r3
 8007f8a:	041b      	lsls	r3, r3, #16
 8007f8c:	68f9      	ldr	r1, [r7, #12]
 8007f8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f92:	4313      	orrs	r3, r2
 8007f94:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	015a      	lsls	r2, r3, #5
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d11a      	bne.n	8007fe2 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	015a      	lsls	r2, r3, #5
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	78db      	ldrb	r3, [r3, #3]
 8007fc6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007fc8:	430b      	orrs	r3, r1
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	0151      	lsls	r1, r2, #5
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	440a      	add	r2, r1
 8007fd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fe0:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3714      	adds	r7, #20
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b08a      	sub	sp, #40	; 0x28
 8007ff4:	af02      	add	r7, sp, #8
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	785b      	ldrb	r3, [r3, #1]
 800800c:	2b01      	cmp	r3, #1
 800800e:	f040 815c 	bne.w	80082ca <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d132      	bne.n	8008080 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	015a      	lsls	r2, r3, #5
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	4413      	add	r3, r2
 8008022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	69ba      	ldr	r2, [r7, #24]
 800802a:	0151      	lsls	r1, r2, #5
 800802c:	69fa      	ldr	r2, [r7, #28]
 800802e:	440a      	add	r2, r1
 8008030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008034:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008038:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800803c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	015a      	lsls	r2, r3, #5
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	4413      	add	r3, r2
 8008046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	69ba      	ldr	r2, [r7, #24]
 800804e:	0151      	lsls	r1, r2, #5
 8008050:	69fa      	ldr	r2, [r7, #28]
 8008052:	440a      	add	r2, r1
 8008054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008058:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800805c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	015a      	lsls	r2, r3, #5
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	4413      	add	r3, r2
 8008066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	69ba      	ldr	r2, [r7, #24]
 800806e:	0151      	lsls	r1, r2, #5
 8008070:	69fa      	ldr	r2, [r7, #28]
 8008072:	440a      	add	r2, r1
 8008074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008078:	0cdb      	lsrs	r3, r3, #19
 800807a:	04db      	lsls	r3, r3, #19
 800807c:	6113      	str	r3, [r2, #16]
 800807e:	e074      	b.n	800816a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	4413      	add	r3, r2
 8008088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	69ba      	ldr	r2, [r7, #24]
 8008090:	0151      	lsls	r1, r2, #5
 8008092:	69fa      	ldr	r2, [r7, #28]
 8008094:	440a      	add	r2, r1
 8008096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800809a:	0cdb      	lsrs	r3, r3, #19
 800809c:	04db      	lsls	r3, r3, #19
 800809e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	69ba      	ldr	r2, [r7, #24]
 80080b0:	0151      	lsls	r1, r2, #5
 80080b2:	69fa      	ldr	r2, [r7, #28]
 80080b4:	440a      	add	r2, r1
 80080b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80080be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80080c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	015a      	lsls	r2, r3, #5
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	4413      	add	r3, r2
 80080cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	6959      	ldr	r1, [r3, #20]
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	440b      	add	r3, r1
 80080dc:	1e59      	subs	r1, r3, #1
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80080e6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80080e8:	4b9d      	ldr	r3, [pc, #628]	; (8008360 <USB_EPStartXfer+0x370>)
 80080ea:	400b      	ands	r3, r1
 80080ec:	69b9      	ldr	r1, [r7, #24]
 80080ee:	0148      	lsls	r0, r1, #5
 80080f0:	69f9      	ldr	r1, [r7, #28]
 80080f2:	4401      	add	r1, r0
 80080f4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80080f8:	4313      	orrs	r3, r2
 80080fa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	015a      	lsls	r2, r3, #5
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	4413      	add	r3, r2
 8008104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008108:	691a      	ldr	r2, [r3, #16]
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	695b      	ldr	r3, [r3, #20]
 800810e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008112:	69b9      	ldr	r1, [r7, #24]
 8008114:	0148      	lsls	r0, r1, #5
 8008116:	69f9      	ldr	r1, [r7, #28]
 8008118:	4401      	add	r1, r0
 800811a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800811e:	4313      	orrs	r3, r2
 8008120:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	78db      	ldrb	r3, [r3, #3]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d11f      	bne.n	800816a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	015a      	lsls	r2, r3, #5
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	4413      	add	r3, r2
 8008132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	69ba      	ldr	r2, [r7, #24]
 800813a:	0151      	lsls	r1, r2, #5
 800813c:	69fa      	ldr	r2, [r7, #28]
 800813e:	440a      	add	r2, r1
 8008140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008144:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008148:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	015a      	lsls	r2, r3, #5
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	4413      	add	r3, r2
 8008152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	69ba      	ldr	r2, [r7, #24]
 800815a:	0151      	lsls	r1, r2, #5
 800815c:	69fa      	ldr	r2, [r7, #28]
 800815e:	440a      	add	r2, r1
 8008160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008164:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008168:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800816a:	79fb      	ldrb	r3, [r7, #7]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d14b      	bne.n	8008208 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d009      	beq.n	800818c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	015a      	lsls	r2, r3, #5
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	4413      	add	r3, r2
 8008180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008184:	461a      	mov	r2, r3
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	78db      	ldrb	r3, [r3, #3]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d128      	bne.n	80081e6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d110      	bne.n	80081c6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	015a      	lsls	r2, r3, #5
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	4413      	add	r3, r2
 80081ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	69ba      	ldr	r2, [r7, #24]
 80081b4:	0151      	lsls	r1, r2, #5
 80081b6:	69fa      	ldr	r2, [r7, #28]
 80081b8:	440a      	add	r2, r1
 80081ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80081c2:	6013      	str	r3, [r2, #0]
 80081c4:	e00f      	b.n	80081e6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	015a      	lsls	r2, r3, #5
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	4413      	add	r3, r2
 80081ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	69ba      	ldr	r2, [r7, #24]
 80081d6:	0151      	lsls	r1, r2, #5
 80081d8:	69fa      	ldr	r2, [r7, #28]
 80081da:	440a      	add	r2, r1
 80081dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081e4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	015a      	lsls	r2, r3, #5
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	4413      	add	r3, r2
 80081ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	69ba      	ldr	r2, [r7, #24]
 80081f6:	0151      	lsls	r1, r2, #5
 80081f8:	69fa      	ldr	r2, [r7, #28]
 80081fa:	440a      	add	r2, r1
 80081fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008200:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008204:	6013      	str	r3, [r2, #0]
 8008206:	e12f      	b.n	8008468 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	015a      	lsls	r2, r3, #5
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	4413      	add	r3, r2
 8008210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	69ba      	ldr	r2, [r7, #24]
 8008218:	0151      	lsls	r1, r2, #5
 800821a:	69fa      	ldr	r2, [r7, #28]
 800821c:	440a      	add	r2, r1
 800821e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008222:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008226:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	78db      	ldrb	r3, [r3, #3]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d015      	beq.n	800825c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	695b      	ldr	r3, [r3, #20]
 8008234:	2b00      	cmp	r3, #0
 8008236:	f000 8117 	beq.w	8008468 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	f003 030f 	and.w	r3, r3, #15
 800824a:	2101      	movs	r1, #1
 800824c:	fa01 f303 	lsl.w	r3, r1, r3
 8008250:	69f9      	ldr	r1, [r7, #28]
 8008252:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008256:	4313      	orrs	r3, r2
 8008258:	634b      	str	r3, [r1, #52]	; 0x34
 800825a:	e105      	b.n	8008468 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008268:	2b00      	cmp	r3, #0
 800826a:	d110      	bne.n	800828e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	4413      	add	r3, r2
 8008274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	69ba      	ldr	r2, [r7, #24]
 800827c:	0151      	lsls	r1, r2, #5
 800827e:	69fa      	ldr	r2, [r7, #28]
 8008280:	440a      	add	r2, r1
 8008282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008286:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800828a:	6013      	str	r3, [r2, #0]
 800828c:	e00f      	b.n	80082ae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	015a      	lsls	r2, r3, #5
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	4413      	add	r3, r2
 8008296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	69ba      	ldr	r2, [r7, #24]
 800829e:	0151      	lsls	r1, r2, #5
 80082a0:	69fa      	ldr	r2, [r7, #28]
 80082a2:	440a      	add	r2, r1
 80082a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082ac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	68d9      	ldr	r1, [r3, #12]
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	781a      	ldrb	r2, [r3, #0]
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	695b      	ldr	r3, [r3, #20]
 80082ba:	b298      	uxth	r0, r3
 80082bc:	79fb      	ldrb	r3, [r7, #7]
 80082be:	9300      	str	r3, [sp, #0]
 80082c0:	4603      	mov	r3, r0
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f000 fa2b 	bl	800871e <USB_WritePacket>
 80082c8:	e0ce      	b.n	8008468 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	015a      	lsls	r2, r3, #5
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	4413      	add	r3, r2
 80082d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	69ba      	ldr	r2, [r7, #24]
 80082da:	0151      	lsls	r1, r2, #5
 80082dc:	69fa      	ldr	r2, [r7, #28]
 80082de:	440a      	add	r2, r1
 80082e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082e4:	0cdb      	lsrs	r3, r3, #19
 80082e6:	04db      	lsls	r3, r3, #19
 80082e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	015a      	lsls	r2, r3, #5
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	4413      	add	r3, r2
 80082f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	69ba      	ldr	r2, [r7, #24]
 80082fa:	0151      	lsls	r1, r2, #5
 80082fc:	69fa      	ldr	r2, [r7, #28]
 80082fe:	440a      	add	r2, r1
 8008300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008304:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008308:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800830c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d126      	bne.n	8008364 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	015a      	lsls	r2, r3, #5
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	4413      	add	r3, r2
 800831e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008322:	691a      	ldr	r2, [r3, #16]
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800832c:	69b9      	ldr	r1, [r7, #24]
 800832e:	0148      	lsls	r0, r1, #5
 8008330:	69f9      	ldr	r1, [r7, #28]
 8008332:	4401      	add	r1, r0
 8008334:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008338:	4313      	orrs	r3, r2
 800833a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	015a      	lsls	r2, r3, #5
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	4413      	add	r3, r2
 8008344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	69ba      	ldr	r2, [r7, #24]
 800834c:	0151      	lsls	r1, r2, #5
 800834e:	69fa      	ldr	r2, [r7, #28]
 8008350:	440a      	add	r2, r1
 8008352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008356:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800835a:	6113      	str	r3, [r2, #16]
 800835c:	e036      	b.n	80083cc <USB_EPStartXfer+0x3dc>
 800835e:	bf00      	nop
 8008360:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	695a      	ldr	r2, [r3, #20]
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	4413      	add	r3, r2
 800836e:	1e5a      	subs	r2, r3, #1
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	fbb2 f3f3 	udiv	r3, r2, r3
 8008378:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	015a      	lsls	r2, r3, #5
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	4413      	add	r3, r2
 8008382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008386:	691a      	ldr	r2, [r3, #16]
 8008388:	8afb      	ldrh	r3, [r7, #22]
 800838a:	04d9      	lsls	r1, r3, #19
 800838c:	4b39      	ldr	r3, [pc, #228]	; (8008474 <USB_EPStartXfer+0x484>)
 800838e:	400b      	ands	r3, r1
 8008390:	69b9      	ldr	r1, [r7, #24]
 8008392:	0148      	lsls	r0, r1, #5
 8008394:	69f9      	ldr	r1, [r7, #28]
 8008396:	4401      	add	r1, r0
 8008398:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800839c:	4313      	orrs	r3, r2
 800839e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	015a      	lsls	r2, r3, #5
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	4413      	add	r3, r2
 80083a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ac:	691a      	ldr	r2, [r3, #16]
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	8af9      	ldrh	r1, [r7, #22]
 80083b4:	fb01 f303 	mul.w	r3, r1, r3
 80083b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083bc:	69b9      	ldr	r1, [r7, #24]
 80083be:	0148      	lsls	r0, r1, #5
 80083c0:	69f9      	ldr	r1, [r7, #28]
 80083c2:	4401      	add	r1, r0
 80083c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80083c8:	4313      	orrs	r3, r2
 80083ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80083cc:	79fb      	ldrb	r3, [r7, #7]
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d10d      	bne.n	80083ee <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d009      	beq.n	80083ee <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	68d9      	ldr	r1, [r3, #12]
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	015a      	lsls	r2, r3, #5
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	4413      	add	r3, r2
 80083e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ea:	460a      	mov	r2, r1
 80083ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	78db      	ldrb	r3, [r3, #3]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d128      	bne.n	8008448 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008402:	2b00      	cmp	r3, #0
 8008404:	d110      	bne.n	8008428 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	015a      	lsls	r2, r3, #5
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	4413      	add	r3, r2
 800840e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	69ba      	ldr	r2, [r7, #24]
 8008416:	0151      	lsls	r1, r2, #5
 8008418:	69fa      	ldr	r2, [r7, #28]
 800841a:	440a      	add	r2, r1
 800841c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008420:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008424:	6013      	str	r3, [r2, #0]
 8008426:	e00f      	b.n	8008448 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	015a      	lsls	r2, r3, #5
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	4413      	add	r3, r2
 8008430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	69ba      	ldr	r2, [r7, #24]
 8008438:	0151      	lsls	r1, r2, #5
 800843a:	69fa      	ldr	r2, [r7, #28]
 800843c:	440a      	add	r2, r1
 800843e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008446:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	015a      	lsls	r2, r3, #5
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	4413      	add	r3, r2
 8008450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	69ba      	ldr	r2, [r7, #24]
 8008458:	0151      	lsls	r1, r2, #5
 800845a:	69fa      	ldr	r2, [r7, #28]
 800845c:	440a      	add	r2, r1
 800845e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008462:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008466:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3720      	adds	r7, #32
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	1ff80000 	.word	0x1ff80000

08008478 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008478:	b480      	push	{r7}
 800847a:	b087      	sub	sp, #28
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	4613      	mov	r3, r2
 8008484:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	785b      	ldrb	r3, [r3, #1]
 8008494:	2b01      	cmp	r3, #1
 8008496:	f040 80cd 	bne.w	8008634 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d132      	bne.n	8008508 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	015a      	lsls	r2, r3, #5
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	4413      	add	r3, r2
 80084aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	0151      	lsls	r1, r2, #5
 80084b4:	697a      	ldr	r2, [r7, #20]
 80084b6:	440a      	add	r2, r1
 80084b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80084c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	015a      	lsls	r2, r3, #5
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	4413      	add	r3, r2
 80084ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	693a      	ldr	r2, [r7, #16]
 80084d6:	0151      	lsls	r1, r2, #5
 80084d8:	697a      	ldr	r2, [r7, #20]
 80084da:	440a      	add	r2, r1
 80084dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	015a      	lsls	r2, r3, #5
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	0151      	lsls	r1, r2, #5
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	440a      	add	r2, r1
 80084fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008500:	0cdb      	lsrs	r3, r3, #19
 8008502:	04db      	lsls	r3, r3, #19
 8008504:	6113      	str	r3, [r2, #16]
 8008506:	e04e      	b.n	80085a6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	015a      	lsls	r2, r3, #5
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	4413      	add	r3, r2
 8008510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	693a      	ldr	r2, [r7, #16]
 8008518:	0151      	lsls	r1, r2, #5
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	440a      	add	r2, r1
 800851e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008522:	0cdb      	lsrs	r3, r3, #19
 8008524:	04db      	lsls	r3, r3, #19
 8008526:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	015a      	lsls	r2, r3, #5
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	4413      	add	r3, r2
 8008530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	693a      	ldr	r2, [r7, #16]
 8008538:	0151      	lsls	r1, r2, #5
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	440a      	add	r2, r1
 800853e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008542:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008546:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800854a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	695a      	ldr	r2, [r3, #20]
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	429a      	cmp	r2, r3
 8008556:	d903      	bls.n	8008560 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	689a      	ldr	r2, [r3, #8]
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	015a      	lsls	r2, r3, #5
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	4413      	add	r3, r2
 8008568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	0151      	lsls	r1, r2, #5
 8008572:	697a      	ldr	r2, [r7, #20]
 8008574:	440a      	add	r2, r1
 8008576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800857a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800857e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	4413      	add	r3, r2
 8008588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800858c:	691a      	ldr	r2, [r3, #16]
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008596:	6939      	ldr	r1, [r7, #16]
 8008598:	0148      	lsls	r0, r1, #5
 800859a:	6979      	ldr	r1, [r7, #20]
 800859c:	4401      	add	r1, r0
 800859e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80085a2:	4313      	orrs	r3, r2
 80085a4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80085a6:	79fb      	ldrb	r3, [r7, #7]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d11e      	bne.n	80085ea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d009      	beq.n	80085c8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	015a      	lsls	r2, r3, #5
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	4413      	add	r3, r2
 80085bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085c0:	461a      	mov	r2, r3
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	015a      	lsls	r2, r3, #5
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	4413      	add	r3, r2
 80085d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	693a      	ldr	r2, [r7, #16]
 80085d8:	0151      	lsls	r1, r2, #5
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	440a      	add	r2, r1
 80085de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80085e6:	6013      	str	r3, [r2, #0]
 80085e8:	e092      	b.n	8008710 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	015a      	lsls	r2, r3, #5
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	4413      	add	r3, r2
 80085f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	0151      	lsls	r1, r2, #5
 80085fc:	697a      	ldr	r2, [r7, #20]
 80085fe:	440a      	add	r2, r1
 8008600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008604:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008608:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d07e      	beq.n	8008710 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	f003 030f 	and.w	r3, r3, #15
 8008622:	2101      	movs	r1, #1
 8008624:	fa01 f303 	lsl.w	r3, r1, r3
 8008628:	6979      	ldr	r1, [r7, #20]
 800862a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800862e:	4313      	orrs	r3, r2
 8008630:	634b      	str	r3, [r1, #52]	; 0x34
 8008632:	e06d      	b.n	8008710 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	015a      	lsls	r2, r3, #5
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	4413      	add	r3, r2
 800863c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	0151      	lsls	r1, r2, #5
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	440a      	add	r2, r1
 800864a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800864e:	0cdb      	lsrs	r3, r3, #19
 8008650:	04db      	lsls	r3, r3, #19
 8008652:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	015a      	lsls	r2, r3, #5
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	4413      	add	r3, r2
 800865c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	0151      	lsls	r1, r2, #5
 8008666:	697a      	ldr	r2, [r7, #20]
 8008668:	440a      	add	r2, r1
 800866a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800866e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008672:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008676:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d003      	beq.n	8008688 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	689a      	ldr	r2, [r3, #8]
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	015a      	lsls	r2, r3, #5
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	4413      	add	r3, r2
 8008690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	693a      	ldr	r2, [r7, #16]
 8008698:	0151      	lsls	r1, r2, #5
 800869a:	697a      	ldr	r2, [r7, #20]
 800869c:	440a      	add	r2, r1
 800869e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	015a      	lsls	r2, r3, #5
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	4413      	add	r3, r2
 80086b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086b4:	691a      	ldr	r2, [r3, #16]
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086be:	6939      	ldr	r1, [r7, #16]
 80086c0:	0148      	lsls	r0, r1, #5
 80086c2:	6979      	ldr	r1, [r7, #20]
 80086c4:	4401      	add	r1, r0
 80086c6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80086ca:	4313      	orrs	r3, r2
 80086cc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80086ce:	79fb      	ldrb	r3, [r7, #7]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d10d      	bne.n	80086f0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d009      	beq.n	80086f0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	68d9      	ldr	r1, [r3, #12]
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	015a      	lsls	r2, r3, #5
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	4413      	add	r3, r2
 80086e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ec:	460a      	mov	r2, r1
 80086ee:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	015a      	lsls	r2, r3, #5
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	4413      	add	r3, r2
 80086f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	693a      	ldr	r2, [r7, #16]
 8008700:	0151      	lsls	r1, r2, #5
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	440a      	add	r2, r1
 8008706:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800870a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800870e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	371c      	adds	r7, #28
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800871e:	b480      	push	{r7}
 8008720:	b089      	sub	sp, #36	; 0x24
 8008722:	af00      	add	r7, sp, #0
 8008724:	60f8      	str	r0, [r7, #12]
 8008726:	60b9      	str	r1, [r7, #8]
 8008728:	4611      	mov	r1, r2
 800872a:	461a      	mov	r2, r3
 800872c:	460b      	mov	r3, r1
 800872e:	71fb      	strb	r3, [r7, #7]
 8008730:	4613      	mov	r3, r2
 8008732:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800873c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008740:	2b00      	cmp	r3, #0
 8008742:	d123      	bne.n	800878c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008744:	88bb      	ldrh	r3, [r7, #4]
 8008746:	3303      	adds	r3, #3
 8008748:	089b      	lsrs	r3, r3, #2
 800874a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800874c:	2300      	movs	r3, #0
 800874e:	61bb      	str	r3, [r7, #24]
 8008750:	e018      	b.n	8008784 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008752:	79fb      	ldrb	r3, [r7, #7]
 8008754:	031a      	lsls	r2, r3, #12
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	4413      	add	r3, r2
 800875a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800875e:	461a      	mov	r2, r3
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	3301      	adds	r3, #1
 800876a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	3301      	adds	r3, #1
 8008770:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	3301      	adds	r3, #1
 8008776:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	3301      	adds	r3, #1
 800877c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	3301      	adds	r3, #1
 8008782:	61bb      	str	r3, [r7, #24]
 8008784:	69ba      	ldr	r2, [r7, #24]
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	429a      	cmp	r2, r3
 800878a:	d3e2      	bcc.n	8008752 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3724      	adds	r7, #36	; 0x24
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800879a:	b480      	push	{r7}
 800879c:	b08b      	sub	sp, #44	; 0x2c
 800879e:	af00      	add	r7, sp, #0
 80087a0:	60f8      	str	r0, [r7, #12]
 80087a2:	60b9      	str	r1, [r7, #8]
 80087a4:	4613      	mov	r3, r2
 80087a6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80087b0:	88fb      	ldrh	r3, [r7, #6]
 80087b2:	089b      	lsrs	r3, r3, #2
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80087b8:	88fb      	ldrh	r3, [r7, #6]
 80087ba:	f003 0303 	and.w	r3, r3, #3
 80087be:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80087c0:	2300      	movs	r3, #0
 80087c2:	623b      	str	r3, [r7, #32]
 80087c4:	e014      	b.n	80087f0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d0:	601a      	str	r2, [r3, #0]
    pDest++;
 80087d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d4:	3301      	adds	r3, #1
 80087d6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80087d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087da:	3301      	adds	r3, #1
 80087dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80087de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e0:	3301      	adds	r3, #1
 80087e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80087e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e6:	3301      	adds	r3, #1
 80087e8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80087ea:	6a3b      	ldr	r3, [r7, #32]
 80087ec:	3301      	adds	r3, #1
 80087ee:	623b      	str	r3, [r7, #32]
 80087f0:	6a3a      	ldr	r2, [r7, #32]
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d3e6      	bcc.n	80087c6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80087f8:	8bfb      	ldrh	r3, [r7, #30]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d01e      	beq.n	800883c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80087fe:	2300      	movs	r3, #0
 8008800:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008808:	461a      	mov	r2, r3
 800880a:	f107 0310 	add.w	r3, r7, #16
 800880e:	6812      	ldr	r2, [r2, #0]
 8008810:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008812:	693a      	ldr	r2, [r7, #16]
 8008814:	6a3b      	ldr	r3, [r7, #32]
 8008816:	b2db      	uxtb	r3, r3
 8008818:	00db      	lsls	r3, r3, #3
 800881a:	fa22 f303 	lsr.w	r3, r2, r3
 800881e:	b2da      	uxtb	r2, r3
 8008820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008822:	701a      	strb	r2, [r3, #0]
      i++;
 8008824:	6a3b      	ldr	r3, [r7, #32]
 8008826:	3301      	adds	r3, #1
 8008828:	623b      	str	r3, [r7, #32]
      pDest++;
 800882a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882c:	3301      	adds	r3, #1
 800882e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008830:	8bfb      	ldrh	r3, [r7, #30]
 8008832:	3b01      	subs	r3, #1
 8008834:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008836:	8bfb      	ldrh	r3, [r7, #30]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1ea      	bne.n	8008812 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800883c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800883e:	4618      	mov	r0, r3
 8008840:	372c      	adds	r7, #44	; 0x2c
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr

0800884a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800884a:	b480      	push	{r7}
 800884c:	b085      	sub	sp, #20
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
 8008852:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	785b      	ldrb	r3, [r3, #1]
 8008862:	2b01      	cmp	r3, #1
 8008864:	d12c      	bne.n	80088c0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	015a      	lsls	r2, r3, #5
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	4413      	add	r3, r2
 800886e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	db12      	blt.n	800889e <USB_EPSetStall+0x54>
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00f      	beq.n	800889e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	015a      	lsls	r2, r3, #5
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	4413      	add	r3, r2
 8008886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68ba      	ldr	r2, [r7, #8]
 800888e:	0151      	lsls	r1, r2, #5
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	440a      	add	r2, r1
 8008894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008898:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800889c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	015a      	lsls	r2, r3, #5
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	4413      	add	r3, r2
 80088a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	0151      	lsls	r1, r2, #5
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	440a      	add	r2, r1
 80088b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80088bc:	6013      	str	r3, [r2, #0]
 80088be:	e02b      	b.n	8008918 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	015a      	lsls	r2, r3, #5
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	4413      	add	r3, r2
 80088c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	db12      	blt.n	80088f8 <USB_EPSetStall+0xae>
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00f      	beq.n	80088f8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	015a      	lsls	r2, r3, #5
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	4413      	add	r3, r2
 80088e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	0151      	lsls	r1, r2, #5
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	440a      	add	r2, r1
 80088ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80088f6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	015a      	lsls	r2, r3, #5
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	4413      	add	r3, r2
 8008900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68ba      	ldr	r2, [r7, #8]
 8008908:	0151      	lsls	r1, r2, #5
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	440a      	add	r2, r1
 800890e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008912:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008916:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3714      	adds	r7, #20
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr

08008926 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008926:	b480      	push	{r7}
 8008928:	b085      	sub	sp, #20
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
 800892e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	785b      	ldrb	r3, [r3, #1]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d128      	bne.n	8008994 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	015a      	lsls	r2, r3, #5
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	4413      	add	r3, r2
 800894a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68ba      	ldr	r2, [r7, #8]
 8008952:	0151      	lsls	r1, r2, #5
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	440a      	add	r2, r1
 8008958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800895c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008960:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	78db      	ldrb	r3, [r3, #3]
 8008966:	2b03      	cmp	r3, #3
 8008968:	d003      	beq.n	8008972 <USB_EPClearStall+0x4c>
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	78db      	ldrb	r3, [r3, #3]
 800896e:	2b02      	cmp	r3, #2
 8008970:	d138      	bne.n	80089e4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	015a      	lsls	r2, r3, #5
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	4413      	add	r3, r2
 800897a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68ba      	ldr	r2, [r7, #8]
 8008982:	0151      	lsls	r1, r2, #5
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	440a      	add	r2, r1
 8008988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800898c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008990:	6013      	str	r3, [r2, #0]
 8008992:	e027      	b.n	80089e4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	015a      	lsls	r2, r3, #5
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	4413      	add	r3, r2
 800899c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68ba      	ldr	r2, [r7, #8]
 80089a4:	0151      	lsls	r1, r2, #5
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	440a      	add	r2, r1
 80089aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80089b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	78db      	ldrb	r3, [r3, #3]
 80089b8:	2b03      	cmp	r3, #3
 80089ba:	d003      	beq.n	80089c4 <USB_EPClearStall+0x9e>
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	78db      	ldrb	r3, [r3, #3]
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d10f      	bne.n	80089e4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	015a      	lsls	r2, r3, #5
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	4413      	add	r3, r2
 80089cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	0151      	lsls	r1, r2, #5
 80089d6:	68fa      	ldr	r2, [r7, #12]
 80089d8:	440a      	add	r2, r1
 80089da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089e2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3714      	adds	r7, #20
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr

080089f2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80089f2:	b480      	push	{r7}
 80089f4:	b085      	sub	sp, #20
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
 80089fa:	460b      	mov	r3, r1
 80089fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a10:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008a14:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	78fb      	ldrb	r3, [r7, #3]
 8008a20:	011b      	lsls	r3, r3, #4
 8008a22:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008a26:	68f9      	ldr	r1, [r7, #12]
 8008a28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3714      	adds	r7, #20
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b085      	sub	sp, #20
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	695b      	ldr	r3, [r3, #20]
 8008a4a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	699b      	ldr	r3, [r3, #24]
 8008a50:	68fa      	ldr	r2, [r7, #12]
 8008a52:	4013      	ands	r3, r2
 8008a54:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008a56:	68fb      	ldr	r3, [r7, #12]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3714      	adds	r7, #20
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a80:	69db      	ldr	r3, [r3, #28]
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	4013      	ands	r3, r2
 8008a86:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	0c1b      	lsrs	r3, r3, #16
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3714      	adds	r7, #20
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aaa:	699b      	ldr	r3, [r3, #24]
 8008aac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ab4:	69db      	ldr	r3, [r3, #28]
 8008ab6:	68ba      	ldr	r2, [r7, #8]
 8008ab8:	4013      	ands	r3, r2
 8008aba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	b29b      	uxth	r3, r3
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3714      	adds	r7, #20
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b085      	sub	sp, #20
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008adc:	78fb      	ldrb	r3, [r7, #3]
 8008ade:	015a      	lsls	r2, r3, #5
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008af2:	695b      	ldr	r3, [r3, #20]
 8008af4:	68ba      	ldr	r2, [r7, #8]
 8008af6:	4013      	ands	r3, r2
 8008af8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008afa:	68bb      	ldr	r3, [r7, #8]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3714      	adds	r7, #20
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b087      	sub	sp, #28
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	460b      	mov	r3, r1
 8008b12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b1e:	691b      	ldr	r3, [r3, #16]
 8008b20:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b2a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008b2c:	78fb      	ldrb	r3, [r7, #3]
 8008b2e:	f003 030f 	and.w	r3, r3, #15
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	fa22 f303 	lsr.w	r3, r2, r3
 8008b38:	01db      	lsls	r3, r3, #7
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	693a      	ldr	r2, [r7, #16]
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008b42:	78fb      	ldrb	r3, [r7, #3]
 8008b44:	015a      	lsls	r2, r3, #5
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	4413      	add	r3, r2
 8008b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	693a      	ldr	r2, [r7, #16]
 8008b52:	4013      	ands	r3, r2
 8008b54:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b56:	68bb      	ldr	r3, [r7, #8]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	371c      	adds	r7, #28
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	695b      	ldr	r3, [r3, #20]
 8008b70:	f003 0301 	and.w	r3, r3, #1
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b9a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008b9e:	f023 0307 	bic.w	r3, r3, #7
 8008ba2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bb6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3714      	adds	r7, #20
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
	...

08008bc8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b087      	sub	sp, #28
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	607a      	str	r2, [r7, #4]
 8008bd4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	333c      	adds	r3, #60	; 0x3c
 8008bde:	3304      	adds	r3, #4
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	4a26      	ldr	r2, [pc, #152]	; (8008c80 <USB_EP0_OutStart+0xb8>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d90a      	bls.n	8008c02 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bfc:	d101      	bne.n	8008c02 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	e037      	b.n	8008c72 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c08:	461a      	mov	r2, r3
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	697a      	ldr	r2, [r7, #20]
 8008c18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	697a      	ldr	r2, [r7, #20]
 8008c2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c30:	f043 0318 	orr.w	r3, r3, #24
 8008c34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	697a      	ldr	r2, [r7, #20]
 8008c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c44:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008c48:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008c4a:	7afb      	ldrb	r3, [r7, #11]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d10f      	bne.n	8008c70 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c56:	461a      	mov	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c6a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008c6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	371c      	adds	r7, #28
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	4f54300a 	.word	0x4f54300a

08008c84 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	370c      	adds	r7, #12
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr

08008c9a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b084      	sub	sp, #16
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d009      	beq.n	8008cc8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	78fa      	ldrb	r2, [r7, #3]
 8008cbe:	4611      	mov	r1, r2
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	4798      	blx	r3
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b082      	sub	sp, #8
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
 8008cda:	460b      	mov	r3, r1
 8008cdc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d007      	beq.n	8008cf8 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	78fa      	ldrb	r2, [r7, #3]
 8008cf2:	4611      	mov	r1, r2
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	4798      	blx	r3
  }

  return USBD_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b084      	sub	sp, #16
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d12:	6839      	ldr	r1, [r7, #0]
 8008d14:	4618      	mov	r0, r3
 8008d16:	f000 ff8f 	bl	8009c38 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008d28:	461a      	mov	r2, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008d36:	f003 031f 	and.w	r3, r3, #31
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d01a      	beq.n	8008d74 <USBD_LL_SetupStage+0x72>
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	d822      	bhi.n	8008d88 <USBD_LL_SetupStage+0x86>
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d002      	beq.n	8008d4c <USBD_LL_SetupStage+0x4a>
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d00a      	beq.n	8008d60 <USBD_LL_SetupStage+0x5e>
 8008d4a:	e01d      	b.n	8008d88 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d52:	4619      	mov	r1, r3
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fa61 	bl	800921c <USBD_StdDevReq>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d5e:	e020      	b.n	8008da2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d66:	4619      	mov	r1, r3
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 fac5 	bl	80092f8 <USBD_StdItfReq>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	73fb      	strb	r3, [r7, #15]
      break;
 8008d72:	e016      	b.n	8008da2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fb04 	bl	800938a <USBD_StdEPReq>
 8008d82:	4603      	mov	r3, r0
 8008d84:	73fb      	strb	r3, [r7, #15]
      break;
 8008d86:	e00c      	b.n	8008da2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008d8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	4619      	mov	r1, r3
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f003 fea8 	bl	800caec <USBD_LL_StallEP>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8008da0:	bf00      	nop
  }

  return ret;
 8008da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	460b      	mov	r3, r1
 8008db6:	607a      	str	r2, [r7, #4]
 8008db8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008dba:	7afb      	ldrb	r3, [r7, #11]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d138      	bne.n	8008e32 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008dc6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008dce:	2b03      	cmp	r3, #3
 8008dd0:	d14a      	bne.n	8008e68 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	689a      	ldr	r2, [r3, #8]
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d913      	bls.n	8008e06 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	689a      	ldr	r2, [r3, #8]
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	1ad2      	subs	r2, r2, r3
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	68da      	ldr	r2, [r3, #12]
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	4293      	cmp	r3, r2
 8008df6:	bf28      	it	cs
 8008df8:	4613      	movcs	r3, r2
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	6879      	ldr	r1, [r7, #4]
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	f000 ff91 	bl	8009d26 <USBD_CtlContinueRx>
 8008e04:	e030      	b.n	8008e68 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	2b03      	cmp	r3, #3
 8008e10:	d10b      	bne.n	8008e2a <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e18:	691b      	ldr	r3, [r3, #16]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d005      	beq.n	8008e2a <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f000 ff8c 	bl	8009d48 <USBD_CtlSendStatus>
 8008e30:	e01a      	b.n	8008e68 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b03      	cmp	r3, #3
 8008e3c:	d114      	bne.n	8008e68 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e44:	699b      	ldr	r3, [r3, #24]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00e      	beq.n	8008e68 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e50:	699b      	ldr	r3, [r3, #24]
 8008e52:	7afa      	ldrb	r2, [r7, #11]
 8008e54:	4611      	mov	r1, r2
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	4798      	blx	r3
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008e5e:	7dfb      	ldrb	r3, [r7, #23]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d001      	beq.n	8008e68 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008e64:	7dfb      	ldrb	r3, [r7, #23]
 8008e66:	e000      	b.n	8008e6a <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3718      	adds	r7, #24
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b086      	sub	sp, #24
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	60f8      	str	r0, [r7, #12]
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	607a      	str	r2, [r7, #4]
 8008e7e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008e80:	7afb      	ldrb	r3, [r7, #11]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d16b      	bne.n	8008f5e <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	3314      	adds	r3, #20
 8008e8a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d156      	bne.n	8008f44 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	689a      	ldr	r2, [r3, #8]
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d914      	bls.n	8008ecc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	689a      	ldr	r2, [r3, #8]
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	1ad2      	subs	r2, r2, r3
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	6879      	ldr	r1, [r7, #4]
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f000 ff23 	bl	8009d04 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f003 febb 	bl	800cc40 <USBD_LL_PrepareReceive>
 8008eca:	e03b      	b.n	8008f44 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	68da      	ldr	r2, [r3, #12]
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d11c      	bne.n	8008f12 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	685a      	ldr	r2, [r3, #4]
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d316      	bcc.n	8008f12 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	685a      	ldr	r2, [r3, #4]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d20f      	bcs.n	8008f12 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f000 ff04 	bl	8009d04 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f04:	2300      	movs	r3, #0
 8008f06:	2200      	movs	r2, #0
 8008f08:	2100      	movs	r1, #0
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f003 fe98 	bl	800cc40 <USBD_LL_PrepareReceive>
 8008f10:	e018      	b.n	8008f44 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	2b03      	cmp	r3, #3
 8008f1c:	d10b      	bne.n	8008f36 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d005      	beq.n	8008f36 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f36:	2180      	movs	r1, #128	; 0x80
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f003 fdd7 	bl	800caec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f000 ff15 	bl	8009d6e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d122      	bne.n	8008f94 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	f7ff fe98 	bl	8008c84 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008f5c:	e01a      	b.n	8008f94 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	2b03      	cmp	r3, #3
 8008f68:	d114      	bne.n	8008f94 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f70:	695b      	ldr	r3, [r3, #20]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00e      	beq.n	8008f94 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f7c:	695b      	ldr	r3, [r3, #20]
 8008f7e:	7afa      	ldrb	r2, [r7, #11]
 8008f80:	4611      	mov	r1, r2
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	4798      	blx	r3
 8008f86:	4603      	mov	r3, r0
 8008f88:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008f8a:	7dfb      	ldrb	r3, [r7, #23]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d001      	beq.n	8008f94 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008f90:	7dfb      	ldrb	r3, [r7, #23]
 8008f92:	e000      	b.n	8008f96 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3718      	adds	r7, #24
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b082      	sub	sp, #8
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d101      	bne.n	8008fd2 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008fce:	2303      	movs	r3, #3
 8008fd0:	e02f      	b.n	8009032 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00f      	beq.n	8008ffc <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d009      	beq.n	8008ffc <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	6852      	ldr	r2, [r2, #4]
 8008ff4:	b2d2      	uxtb	r2, r2
 8008ff6:	4611      	mov	r1, r2
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ffc:	2340      	movs	r3, #64	; 0x40
 8008ffe:	2200      	movs	r2, #0
 8009000:	2100      	movs	r1, #0
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f003 fd4c 	bl	800caa0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2240      	movs	r2, #64	; 0x40
 8009014:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009018:	2340      	movs	r3, #64	; 0x40
 800901a:	2200      	movs	r2, #0
 800901c:	2180      	movs	r1, #128	; 0x80
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f003 fd3e 	bl	800caa0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2240      	movs	r2, #64	; 0x40
 800902e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800903a:	b480      	push	{r7}
 800903c:	b083      	sub	sp, #12
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
 8009042:	460b      	mov	r3, r1
 8009044:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	78fa      	ldrb	r2, [r7, #3]
 800904a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800904c:	2300      	movs	r3, #0
}
 800904e:	4618      	mov	r0, r3
 8009050:	370c      	adds	r7, #12
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr

0800905a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800905a:	b480      	push	{r7}
 800905c:	b083      	sub	sp, #12
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009068:	b2da      	uxtb	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2204      	movs	r2, #4
 8009074:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	370c      	adds	r7, #12
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009086:	b480      	push	{r7}
 8009088:	b083      	sub	sp, #12
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009094:	b2db      	uxtb	r3, r3
 8009096:	2b04      	cmp	r3, #4
 8009098:	d106      	bne.n	80090a8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80090a0:	b2da      	uxtb	r2, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	370c      	adds	r7, #12
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr

080090b6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b082      	sub	sp, #8
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d101      	bne.n	80090cc <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80090c8:	2303      	movs	r3, #3
 80090ca:	e012      	b.n	80090f2 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	2b03      	cmp	r3, #3
 80090d6:	d10b      	bne.n	80090f0 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090de:	69db      	ldr	r3, [r3, #28]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d005      	beq.n	80090f0 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ea:	69db      	ldr	r3, [r3, #28]
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3708      	adds	r7, #8
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b082      	sub	sp, #8
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
 8009102:	460b      	mov	r3, r1
 8009104:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800910c:	2b00      	cmp	r3, #0
 800910e:	d101      	bne.n	8009114 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009110:	2303      	movs	r3, #3
 8009112:	e014      	b.n	800913e <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800911a:	b2db      	uxtb	r3, r3
 800911c:	2b03      	cmp	r3, #3
 800911e:	d10d      	bne.n	800913c <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009126:	6a1b      	ldr	r3, [r3, #32]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d007      	beq.n	800913c <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009132:	6a1b      	ldr	r3, [r3, #32]
 8009134:	78fa      	ldrb	r2, [r7, #3]
 8009136:	4611      	mov	r1, r2
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800913c:	2300      	movs	r3, #0
}
 800913e:	4618      	mov	r0, r3
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b082      	sub	sp, #8
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	460b      	mov	r3, r1
 8009150:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009158:	2b00      	cmp	r3, #0
 800915a:	d101      	bne.n	8009160 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800915c:	2303      	movs	r3, #3
 800915e:	e014      	b.n	800918a <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009166:	b2db      	uxtb	r3, r3
 8009168:	2b03      	cmp	r3, #3
 800916a:	d10d      	bne.n	8009188 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009174:	2b00      	cmp	r3, #0
 8009176:	d007      	beq.n	8009188 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800917e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009180:	78fa      	ldrb	r2, [r7, #3]
 8009182:	4611      	mov	r1, r2
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009192:	b480      	push	{r7}
 8009194:	b083      	sub	sp, #12
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d009      	beq.n	80091d6 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	6852      	ldr	r2, [r2, #4]
 80091ce:	b2d2      	uxtb	r2, r2
 80091d0:	4611      	mov	r1, r2
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	4798      	blx	r3
  }

  return USBD_OK;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3708      	adds	r7, #8
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b087      	sub	sp, #28
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	3301      	adds	r3, #1
 80091f6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80091fe:	8a3b      	ldrh	r3, [r7, #16]
 8009200:	021b      	lsls	r3, r3, #8
 8009202:	b21a      	sxth	r2, r3
 8009204:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009208:	4313      	orrs	r3, r2
 800920a:	b21b      	sxth	r3, r3
 800920c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800920e:	89fb      	ldrh	r3, [r7, #14]
}
 8009210:	4618      	mov	r0, r3
 8009212:	371c      	adds	r7, #28
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009232:	2b40      	cmp	r3, #64	; 0x40
 8009234:	d005      	beq.n	8009242 <USBD_StdDevReq+0x26>
 8009236:	2b40      	cmp	r3, #64	; 0x40
 8009238:	d853      	bhi.n	80092e2 <USBD_StdDevReq+0xc6>
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00b      	beq.n	8009256 <USBD_StdDevReq+0x3a>
 800923e:	2b20      	cmp	r3, #32
 8009240:	d14f      	bne.n	80092e2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	6839      	ldr	r1, [r7, #0]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	4798      	blx	r3
 8009250:	4603      	mov	r3, r0
 8009252:	73fb      	strb	r3, [r7, #15]
      break;
 8009254:	e04a      	b.n	80092ec <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	785b      	ldrb	r3, [r3, #1]
 800925a:	2b09      	cmp	r3, #9
 800925c:	d83b      	bhi.n	80092d6 <USBD_StdDevReq+0xba>
 800925e:	a201      	add	r2, pc, #4	; (adr r2, 8009264 <USBD_StdDevReq+0x48>)
 8009260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009264:	080092b9 	.word	0x080092b9
 8009268:	080092cd 	.word	0x080092cd
 800926c:	080092d7 	.word	0x080092d7
 8009270:	080092c3 	.word	0x080092c3
 8009274:	080092d7 	.word	0x080092d7
 8009278:	08009297 	.word	0x08009297
 800927c:	0800928d 	.word	0x0800928d
 8009280:	080092d7 	.word	0x080092d7
 8009284:	080092af 	.word	0x080092af
 8009288:	080092a1 	.word	0x080092a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800928c:	6839      	ldr	r1, [r7, #0]
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 f9de 	bl	8009650 <USBD_GetDescriptor>
          break;
 8009294:	e024      	b.n	80092e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009296:	6839      	ldr	r1, [r7, #0]
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 fb43 	bl	8009924 <USBD_SetAddress>
          break;
 800929e:	e01f      	b.n	80092e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80092a0:	6839      	ldr	r1, [r7, #0]
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 fb82 	bl	80099ac <USBD_SetConfig>
 80092a8:	4603      	mov	r3, r0
 80092aa:	73fb      	strb	r3, [r7, #15]
          break;
 80092ac:	e018      	b.n	80092e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 fc21 	bl	8009af8 <USBD_GetConfig>
          break;
 80092b6:	e013      	b.n	80092e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80092b8:	6839      	ldr	r1, [r7, #0]
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 fc52 	bl	8009b64 <USBD_GetStatus>
          break;
 80092c0:	e00e      	b.n	80092e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80092c2:	6839      	ldr	r1, [r7, #0]
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 fc81 	bl	8009bcc <USBD_SetFeature>
          break;
 80092ca:	e009      	b.n	80092e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fc90 	bl	8009bf4 <USBD_ClrFeature>
          break;
 80092d4:	e004      	b.n	80092e0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80092d6:	6839      	ldr	r1, [r7, #0]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fce7 	bl	8009cac <USBD_CtlError>
          break;
 80092de:	bf00      	nop
      }
      break;
 80092e0:	e004      	b.n	80092ec <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80092e2:	6839      	ldr	r1, [r7, #0]
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 fce1 	bl	8009cac <USBD_CtlError>
      break;
 80092ea:	bf00      	nop
  }

  return ret;
 80092ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop

080092f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009302:	2300      	movs	r3, #0
 8009304:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800930e:	2b40      	cmp	r3, #64	; 0x40
 8009310:	d005      	beq.n	800931e <USBD_StdItfReq+0x26>
 8009312:	2b40      	cmp	r3, #64	; 0x40
 8009314:	d82f      	bhi.n	8009376 <USBD_StdItfReq+0x7e>
 8009316:	2b00      	cmp	r3, #0
 8009318:	d001      	beq.n	800931e <USBD_StdItfReq+0x26>
 800931a:	2b20      	cmp	r3, #32
 800931c:	d12b      	bne.n	8009376 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009324:	b2db      	uxtb	r3, r3
 8009326:	3b01      	subs	r3, #1
 8009328:	2b02      	cmp	r3, #2
 800932a:	d81d      	bhi.n	8009368 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	889b      	ldrh	r3, [r3, #4]
 8009330:	b2db      	uxtb	r3, r3
 8009332:	2b01      	cmp	r3, #1
 8009334:	d813      	bhi.n	800935e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	6839      	ldr	r1, [r7, #0]
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	4798      	blx	r3
 8009344:	4603      	mov	r3, r0
 8009346:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	88db      	ldrh	r3, [r3, #6]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d110      	bne.n	8009372 <USBD_StdItfReq+0x7a>
 8009350:	7bfb      	ldrb	r3, [r7, #15]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d10d      	bne.n	8009372 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fcf6 	bl	8009d48 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800935c:	e009      	b.n	8009372 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800935e:	6839      	ldr	r1, [r7, #0]
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 fca3 	bl	8009cac <USBD_CtlError>
          break;
 8009366:	e004      	b.n	8009372 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009368:	6839      	ldr	r1, [r7, #0]
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 fc9e 	bl	8009cac <USBD_CtlError>
          break;
 8009370:	e000      	b.n	8009374 <USBD_StdItfReq+0x7c>
          break;
 8009372:	bf00      	nop
      }
      break;
 8009374:	e004      	b.n	8009380 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009376:	6839      	ldr	r1, [r7, #0]
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 fc97 	bl	8009cac <USBD_CtlError>
      break;
 800937e:	bf00      	nop
  }

  return ret;
 8009380:	7bfb      	ldrb	r3, [r7, #15]
}
 8009382:	4618      	mov	r0, r3
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b084      	sub	sp, #16
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
 8009392:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009394:	2300      	movs	r3, #0
 8009396:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	889b      	ldrh	r3, [r3, #4]
 800939c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093a6:	2b40      	cmp	r3, #64	; 0x40
 80093a8:	d007      	beq.n	80093ba <USBD_StdEPReq+0x30>
 80093aa:	2b40      	cmp	r3, #64	; 0x40
 80093ac:	f200 8145 	bhi.w	800963a <USBD_StdEPReq+0x2b0>
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00c      	beq.n	80093ce <USBD_StdEPReq+0x44>
 80093b4:	2b20      	cmp	r3, #32
 80093b6:	f040 8140 	bne.w	800963a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	6839      	ldr	r1, [r7, #0]
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	4798      	blx	r3
 80093c8:	4603      	mov	r3, r0
 80093ca:	73fb      	strb	r3, [r7, #15]
      break;
 80093cc:	e13a      	b.n	8009644 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	785b      	ldrb	r3, [r3, #1]
 80093d2:	2b03      	cmp	r3, #3
 80093d4:	d007      	beq.n	80093e6 <USBD_StdEPReq+0x5c>
 80093d6:	2b03      	cmp	r3, #3
 80093d8:	f300 8129 	bgt.w	800962e <USBD_StdEPReq+0x2a4>
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d07f      	beq.n	80094e0 <USBD_StdEPReq+0x156>
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d03c      	beq.n	800945e <USBD_StdEPReq+0xd4>
 80093e4:	e123      	b.n	800962e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	d002      	beq.n	80093f8 <USBD_StdEPReq+0x6e>
 80093f2:	2b03      	cmp	r3, #3
 80093f4:	d016      	beq.n	8009424 <USBD_StdEPReq+0x9a>
 80093f6:	e02c      	b.n	8009452 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093f8:	7bbb      	ldrb	r3, [r7, #14]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00d      	beq.n	800941a <USBD_StdEPReq+0x90>
 80093fe:	7bbb      	ldrb	r3, [r7, #14]
 8009400:	2b80      	cmp	r3, #128	; 0x80
 8009402:	d00a      	beq.n	800941a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009404:	7bbb      	ldrb	r3, [r7, #14]
 8009406:	4619      	mov	r1, r3
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f003 fb6f 	bl	800caec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800940e:	2180      	movs	r1, #128	; 0x80
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f003 fb6b 	bl	800caec <USBD_LL_StallEP>
 8009416:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009418:	e020      	b.n	800945c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800941a:	6839      	ldr	r1, [r7, #0]
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fc45 	bl	8009cac <USBD_CtlError>
              break;
 8009422:	e01b      	b.n	800945c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	885b      	ldrh	r3, [r3, #2]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d10e      	bne.n	800944a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800942c:	7bbb      	ldrb	r3, [r7, #14]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d00b      	beq.n	800944a <USBD_StdEPReq+0xc0>
 8009432:	7bbb      	ldrb	r3, [r7, #14]
 8009434:	2b80      	cmp	r3, #128	; 0x80
 8009436:	d008      	beq.n	800944a <USBD_StdEPReq+0xc0>
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	88db      	ldrh	r3, [r3, #6]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d104      	bne.n	800944a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009440:	7bbb      	ldrb	r3, [r7, #14]
 8009442:	4619      	mov	r1, r3
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f003 fb51 	bl	800caec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fc7c 	bl	8009d48 <USBD_CtlSendStatus>

              break;
 8009450:	e004      	b.n	800945c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009452:	6839      	ldr	r1, [r7, #0]
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fc29 	bl	8009cac <USBD_CtlError>
              break;
 800945a:	bf00      	nop
          }
          break;
 800945c:	e0ec      	b.n	8009638 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009464:	b2db      	uxtb	r3, r3
 8009466:	2b02      	cmp	r3, #2
 8009468:	d002      	beq.n	8009470 <USBD_StdEPReq+0xe6>
 800946a:	2b03      	cmp	r3, #3
 800946c:	d016      	beq.n	800949c <USBD_StdEPReq+0x112>
 800946e:	e030      	b.n	80094d2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009470:	7bbb      	ldrb	r3, [r7, #14]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00d      	beq.n	8009492 <USBD_StdEPReq+0x108>
 8009476:	7bbb      	ldrb	r3, [r7, #14]
 8009478:	2b80      	cmp	r3, #128	; 0x80
 800947a:	d00a      	beq.n	8009492 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800947c:	7bbb      	ldrb	r3, [r7, #14]
 800947e:	4619      	mov	r1, r3
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f003 fb33 	bl	800caec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009486:	2180      	movs	r1, #128	; 0x80
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f003 fb2f 	bl	800caec <USBD_LL_StallEP>
 800948e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009490:	e025      	b.n	80094de <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009492:	6839      	ldr	r1, [r7, #0]
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fc09 	bl	8009cac <USBD_CtlError>
              break;
 800949a:	e020      	b.n	80094de <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	885b      	ldrh	r3, [r3, #2]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d11b      	bne.n	80094dc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80094a4:	7bbb      	ldrb	r3, [r7, #14]
 80094a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d004      	beq.n	80094b8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80094ae:	7bbb      	ldrb	r3, [r7, #14]
 80094b0:	4619      	mov	r1, r3
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f003 fb39 	bl	800cb2a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 fc45 	bl	8009d48 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	6839      	ldr	r1, [r7, #0]
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	4798      	blx	r3
 80094cc:	4603      	mov	r3, r0
 80094ce:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80094d0:	e004      	b.n	80094dc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80094d2:	6839      	ldr	r1, [r7, #0]
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 fbe9 	bl	8009cac <USBD_CtlError>
              break;
 80094da:	e000      	b.n	80094de <USBD_StdEPReq+0x154>
              break;
 80094dc:	bf00      	nop
          }
          break;
 80094de:	e0ab      	b.n	8009638 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	2b02      	cmp	r3, #2
 80094ea:	d002      	beq.n	80094f2 <USBD_StdEPReq+0x168>
 80094ec:	2b03      	cmp	r3, #3
 80094ee:	d032      	beq.n	8009556 <USBD_StdEPReq+0x1cc>
 80094f0:	e097      	b.n	8009622 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094f2:	7bbb      	ldrb	r3, [r7, #14]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d007      	beq.n	8009508 <USBD_StdEPReq+0x17e>
 80094f8:	7bbb      	ldrb	r3, [r7, #14]
 80094fa:	2b80      	cmp	r3, #128	; 0x80
 80094fc:	d004      	beq.n	8009508 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80094fe:	6839      	ldr	r1, [r7, #0]
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 fbd3 	bl	8009cac <USBD_CtlError>
                break;
 8009506:	e091      	b.n	800962c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009508:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800950c:	2b00      	cmp	r3, #0
 800950e:	da0b      	bge.n	8009528 <USBD_StdEPReq+0x19e>
 8009510:	7bbb      	ldrb	r3, [r7, #14]
 8009512:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009516:	4613      	mov	r3, r2
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	4413      	add	r3, r2
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	3310      	adds	r3, #16
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	4413      	add	r3, r2
 8009524:	3304      	adds	r3, #4
 8009526:	e00b      	b.n	8009540 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009528:	7bbb      	ldrb	r3, [r7, #14]
 800952a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800952e:	4613      	mov	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4413      	add	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	4413      	add	r3, r2
 800953e:	3304      	adds	r3, #4
 8009540:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	2200      	movs	r2, #0
 8009546:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	2202      	movs	r2, #2
 800954c:	4619      	mov	r1, r3
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 fbbd 	bl	8009cce <USBD_CtlSendData>
              break;
 8009554:	e06a      	b.n	800962c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009556:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800955a:	2b00      	cmp	r3, #0
 800955c:	da11      	bge.n	8009582 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800955e:	7bbb      	ldrb	r3, [r7, #14]
 8009560:	f003 020f 	and.w	r2, r3, #15
 8009564:	6879      	ldr	r1, [r7, #4]
 8009566:	4613      	mov	r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	4413      	add	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	440b      	add	r3, r1
 8009570:	3324      	adds	r3, #36	; 0x24
 8009572:	881b      	ldrh	r3, [r3, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d117      	bne.n	80095a8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009578:	6839      	ldr	r1, [r7, #0]
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fb96 	bl	8009cac <USBD_CtlError>
                  break;
 8009580:	e054      	b.n	800962c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009582:	7bbb      	ldrb	r3, [r7, #14]
 8009584:	f003 020f 	and.w	r2, r3, #15
 8009588:	6879      	ldr	r1, [r7, #4]
 800958a:	4613      	mov	r3, r2
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	4413      	add	r3, r2
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	440b      	add	r3, r1
 8009594:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009598:	881b      	ldrh	r3, [r3, #0]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d104      	bne.n	80095a8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800959e:	6839      	ldr	r1, [r7, #0]
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 fb83 	bl	8009cac <USBD_CtlError>
                  break;
 80095a6:	e041      	b.n	800962c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	da0b      	bge.n	80095c8 <USBD_StdEPReq+0x23e>
 80095b0:	7bbb      	ldrb	r3, [r7, #14]
 80095b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095b6:	4613      	mov	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4413      	add	r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	3310      	adds	r3, #16
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	4413      	add	r3, r2
 80095c4:	3304      	adds	r3, #4
 80095c6:	e00b      	b.n	80095e0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095c8:	7bbb      	ldrb	r3, [r7, #14]
 80095ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095ce:	4613      	mov	r3, r2
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	4413      	add	r3, r2
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	4413      	add	r3, r2
 80095de:	3304      	adds	r3, #4
 80095e0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80095e2:	7bbb      	ldrb	r3, [r7, #14]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d002      	beq.n	80095ee <USBD_StdEPReq+0x264>
 80095e8:	7bbb      	ldrb	r3, [r7, #14]
 80095ea:	2b80      	cmp	r3, #128	; 0x80
 80095ec:	d103      	bne.n	80095f6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	2200      	movs	r2, #0
 80095f2:	601a      	str	r2, [r3, #0]
 80095f4:	e00e      	b.n	8009614 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80095f6:	7bbb      	ldrb	r3, [r7, #14]
 80095f8:	4619      	mov	r1, r3
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f003 fab4 	bl	800cb68 <USBD_LL_IsStallEP>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d003      	beq.n	800960e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	2201      	movs	r2, #1
 800960a:	601a      	str	r2, [r3, #0]
 800960c:	e002      	b.n	8009614 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	2200      	movs	r2, #0
 8009612:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	2202      	movs	r2, #2
 8009618:	4619      	mov	r1, r3
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 fb57 	bl	8009cce <USBD_CtlSendData>
              break;
 8009620:	e004      	b.n	800962c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009622:	6839      	ldr	r1, [r7, #0]
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 fb41 	bl	8009cac <USBD_CtlError>
              break;
 800962a:	bf00      	nop
          }
          break;
 800962c:	e004      	b.n	8009638 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800962e:	6839      	ldr	r1, [r7, #0]
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 fb3b 	bl	8009cac <USBD_CtlError>
          break;
 8009636:	bf00      	nop
      }
      break;
 8009638:	e004      	b.n	8009644 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800963a:	6839      	ldr	r1, [r7, #0]
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 fb35 	bl	8009cac <USBD_CtlError>
      break;
 8009642:	bf00      	nop
  }

  return ret;
 8009644:	7bfb      	ldrb	r3, [r7, #15]
}
 8009646:	4618      	mov	r0, r3
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
	...

08009650 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800965a:	2300      	movs	r3, #0
 800965c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800965e:	2300      	movs	r3, #0
 8009660:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009662:	2300      	movs	r3, #0
 8009664:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	885b      	ldrh	r3, [r3, #2]
 800966a:	0a1b      	lsrs	r3, r3, #8
 800966c:	b29b      	uxth	r3, r3
 800966e:	3b01      	subs	r3, #1
 8009670:	2b06      	cmp	r3, #6
 8009672:	f200 8128 	bhi.w	80098c6 <USBD_GetDescriptor+0x276>
 8009676:	a201      	add	r2, pc, #4	; (adr r2, 800967c <USBD_GetDescriptor+0x2c>)
 8009678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967c:	08009699 	.word	0x08009699
 8009680:	080096b1 	.word	0x080096b1
 8009684:	080096f1 	.word	0x080096f1
 8009688:	080098c7 	.word	0x080098c7
 800968c:	080098c7 	.word	0x080098c7
 8009690:	08009867 	.word	0x08009867
 8009694:	08009893 	.word	0x08009893
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	7c12      	ldrb	r2, [r2, #16]
 80096a4:	f107 0108 	add.w	r1, r7, #8
 80096a8:	4610      	mov	r0, r2
 80096aa:	4798      	blx	r3
 80096ac:	60f8      	str	r0, [r7, #12]
      break;
 80096ae:	e112      	b.n	80098d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	7c1b      	ldrb	r3, [r3, #16]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d10d      	bne.n	80096d4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c0:	f107 0208 	add.w	r2, r7, #8
 80096c4:	4610      	mov	r0, r2
 80096c6:	4798      	blx	r3
 80096c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	3301      	adds	r3, #1
 80096ce:	2202      	movs	r2, #2
 80096d0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80096d2:	e100      	b.n	80098d6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096dc:	f107 0208 	add.w	r2, r7, #8
 80096e0:	4610      	mov	r0, r2
 80096e2:	4798      	blx	r3
 80096e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	3301      	adds	r3, #1
 80096ea:	2202      	movs	r2, #2
 80096ec:	701a      	strb	r2, [r3, #0]
      break;
 80096ee:	e0f2      	b.n	80098d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	885b      	ldrh	r3, [r3, #2]
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	2b05      	cmp	r3, #5
 80096f8:	f200 80ac 	bhi.w	8009854 <USBD_GetDescriptor+0x204>
 80096fc:	a201      	add	r2, pc, #4	; (adr r2, 8009704 <USBD_GetDescriptor+0xb4>)
 80096fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009702:	bf00      	nop
 8009704:	0800971d 	.word	0x0800971d
 8009708:	08009751 	.word	0x08009751
 800970c:	08009785 	.word	0x08009785
 8009710:	080097b9 	.word	0x080097b9
 8009714:	080097ed 	.word	0x080097ed
 8009718:	08009821 	.word	0x08009821
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00b      	beq.n	8009740 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	7c12      	ldrb	r2, [r2, #16]
 8009734:	f107 0108 	add.w	r1, r7, #8
 8009738:	4610      	mov	r0, r2
 800973a:	4798      	blx	r3
 800973c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800973e:	e091      	b.n	8009864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009740:	6839      	ldr	r1, [r7, #0]
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 fab2 	bl	8009cac <USBD_CtlError>
            err++;
 8009748:	7afb      	ldrb	r3, [r7, #11]
 800974a:	3301      	adds	r3, #1
 800974c:	72fb      	strb	r3, [r7, #11]
          break;
 800974e:	e089      	b.n	8009864 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00b      	beq.n	8009774 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	7c12      	ldrb	r2, [r2, #16]
 8009768:	f107 0108 	add.w	r1, r7, #8
 800976c:	4610      	mov	r0, r2
 800976e:	4798      	blx	r3
 8009770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009772:	e077      	b.n	8009864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009774:	6839      	ldr	r1, [r7, #0]
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 fa98 	bl	8009cac <USBD_CtlError>
            err++;
 800977c:	7afb      	ldrb	r3, [r7, #11]
 800977e:	3301      	adds	r3, #1
 8009780:	72fb      	strb	r3, [r7, #11]
          break;
 8009782:	e06f      	b.n	8009864 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00b      	beq.n	80097a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	7c12      	ldrb	r2, [r2, #16]
 800979c:	f107 0108 	add.w	r1, r7, #8
 80097a0:	4610      	mov	r0, r2
 80097a2:	4798      	blx	r3
 80097a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097a6:	e05d      	b.n	8009864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fa7e 	bl	8009cac <USBD_CtlError>
            err++;
 80097b0:	7afb      	ldrb	r3, [r7, #11]
 80097b2:	3301      	adds	r3, #1
 80097b4:	72fb      	strb	r3, [r7, #11]
          break;
 80097b6:	e055      	b.n	8009864 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d00b      	beq.n	80097dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ca:	691b      	ldr	r3, [r3, #16]
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	7c12      	ldrb	r2, [r2, #16]
 80097d0:	f107 0108 	add.w	r1, r7, #8
 80097d4:	4610      	mov	r0, r2
 80097d6:	4798      	blx	r3
 80097d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097da:	e043      	b.n	8009864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fa64 	bl	8009cac <USBD_CtlError>
            err++;
 80097e4:	7afb      	ldrb	r3, [r7, #11]
 80097e6:	3301      	adds	r3, #1
 80097e8:	72fb      	strb	r3, [r7, #11]
          break;
 80097ea:	e03b      	b.n	8009864 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097f2:	695b      	ldr	r3, [r3, #20]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00b      	beq.n	8009810 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097fe:	695b      	ldr	r3, [r3, #20]
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	7c12      	ldrb	r2, [r2, #16]
 8009804:	f107 0108 	add.w	r1, r7, #8
 8009808:	4610      	mov	r0, r2
 800980a:	4798      	blx	r3
 800980c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800980e:	e029      	b.n	8009864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009810:	6839      	ldr	r1, [r7, #0]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fa4a 	bl	8009cac <USBD_CtlError>
            err++;
 8009818:	7afb      	ldrb	r3, [r7, #11]
 800981a:	3301      	adds	r3, #1
 800981c:	72fb      	strb	r3, [r7, #11]
          break;
 800981e:	e021      	b.n	8009864 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009826:	699b      	ldr	r3, [r3, #24]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00b      	beq.n	8009844 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009832:	699b      	ldr	r3, [r3, #24]
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	7c12      	ldrb	r2, [r2, #16]
 8009838:	f107 0108 	add.w	r1, r7, #8
 800983c:	4610      	mov	r0, r2
 800983e:	4798      	blx	r3
 8009840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009842:	e00f      	b.n	8009864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fa30 	bl	8009cac <USBD_CtlError>
            err++;
 800984c:	7afb      	ldrb	r3, [r7, #11]
 800984e:	3301      	adds	r3, #1
 8009850:	72fb      	strb	r3, [r7, #11]
          break;
 8009852:	e007      	b.n	8009864 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fa28 	bl	8009cac <USBD_CtlError>
          err++;
 800985c:	7afb      	ldrb	r3, [r7, #11]
 800985e:	3301      	adds	r3, #1
 8009860:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009862:	bf00      	nop
      }
      break;
 8009864:	e037      	b.n	80098d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	7c1b      	ldrb	r3, [r3, #16]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d109      	bne.n	8009882 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009876:	f107 0208 	add.w	r2, r7, #8
 800987a:	4610      	mov	r0, r2
 800987c:	4798      	blx	r3
 800987e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009880:	e029      	b.n	80098d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009882:	6839      	ldr	r1, [r7, #0]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 fa11 	bl	8009cac <USBD_CtlError>
        err++;
 800988a:	7afb      	ldrb	r3, [r7, #11]
 800988c:	3301      	adds	r3, #1
 800988e:	72fb      	strb	r3, [r7, #11]
      break;
 8009890:	e021      	b.n	80098d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	7c1b      	ldrb	r3, [r3, #16]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d10d      	bne.n	80098b6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a2:	f107 0208 	add.w	r2, r7, #8
 80098a6:	4610      	mov	r0, r2
 80098a8:	4798      	blx	r3
 80098aa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	3301      	adds	r3, #1
 80098b0:	2207      	movs	r2, #7
 80098b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098b4:	e00f      	b.n	80098d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80098b6:	6839      	ldr	r1, [r7, #0]
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 f9f7 	bl	8009cac <USBD_CtlError>
        err++;
 80098be:	7afb      	ldrb	r3, [r7, #11]
 80098c0:	3301      	adds	r3, #1
 80098c2:	72fb      	strb	r3, [r7, #11]
      break;
 80098c4:	e007      	b.n	80098d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80098c6:	6839      	ldr	r1, [r7, #0]
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 f9ef 	bl	8009cac <USBD_CtlError>
      err++;
 80098ce:	7afb      	ldrb	r3, [r7, #11]
 80098d0:	3301      	adds	r3, #1
 80098d2:	72fb      	strb	r3, [r7, #11]
      break;
 80098d4:	bf00      	nop
  }

  if (err != 0U)
 80098d6:	7afb      	ldrb	r3, [r7, #11]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d11e      	bne.n	800991a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	88db      	ldrh	r3, [r3, #6]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d016      	beq.n	8009912 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80098e4:	893b      	ldrh	r3, [r7, #8]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00e      	beq.n	8009908 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	88da      	ldrh	r2, [r3, #6]
 80098ee:	893b      	ldrh	r3, [r7, #8]
 80098f0:	4293      	cmp	r3, r2
 80098f2:	bf28      	it	cs
 80098f4:	4613      	movcs	r3, r2
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80098fa:	893b      	ldrh	r3, [r7, #8]
 80098fc:	461a      	mov	r2, r3
 80098fe:	68f9      	ldr	r1, [r7, #12]
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 f9e4 	bl	8009cce <USBD_CtlSendData>
 8009906:	e009      	b.n	800991c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009908:	6839      	ldr	r1, [r7, #0]
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 f9ce 	bl	8009cac <USBD_CtlError>
 8009910:	e004      	b.n	800991c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 fa18 	bl	8009d48 <USBD_CtlSendStatus>
 8009918:	e000      	b.n	800991c <USBD_GetDescriptor+0x2cc>
    return;
 800991a:	bf00      	nop
  }
}
 800991c:	3710      	adds	r7, #16
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop

08009924 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	889b      	ldrh	r3, [r3, #4]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d131      	bne.n	800999a <USBD_SetAddress+0x76>
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	88db      	ldrh	r3, [r3, #6]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d12d      	bne.n	800999a <USBD_SetAddress+0x76>
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	885b      	ldrh	r3, [r3, #2]
 8009942:	2b7f      	cmp	r3, #127	; 0x7f
 8009944:	d829      	bhi.n	800999a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	885b      	ldrh	r3, [r3, #2]
 800994a:	b2db      	uxtb	r3, r3
 800994c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009950:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009958:	b2db      	uxtb	r3, r3
 800995a:	2b03      	cmp	r3, #3
 800995c:	d104      	bne.n	8009968 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800995e:	6839      	ldr	r1, [r7, #0]
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 f9a3 	bl	8009cac <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009966:	e01d      	b.n	80099a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	7bfa      	ldrb	r2, [r7, #15]
 800996c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009970:	7bfb      	ldrb	r3, [r7, #15]
 8009972:	4619      	mov	r1, r3
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f003 f923 	bl	800cbc0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 f9e4 	bl	8009d48 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009980:	7bfb      	ldrb	r3, [r7, #15]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d004      	beq.n	8009990 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2202      	movs	r2, #2
 800998a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800998e:	e009      	b.n	80099a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009998:	e004      	b.n	80099a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800999a:	6839      	ldr	r1, [r7, #0]
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f985 	bl	8009cac <USBD_CtlError>
  }
}
 80099a2:	bf00      	nop
 80099a4:	bf00      	nop
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099b6:	2300      	movs	r3, #0
 80099b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	885b      	ldrh	r3, [r3, #2]
 80099be:	b2da      	uxtb	r2, r3
 80099c0:	4b4c      	ldr	r3, [pc, #304]	; (8009af4 <USBD_SetConfig+0x148>)
 80099c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80099c4:	4b4b      	ldr	r3, [pc, #300]	; (8009af4 <USBD_SetConfig+0x148>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d905      	bls.n	80099d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80099cc:	6839      	ldr	r1, [r7, #0]
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f96c 	bl	8009cac <USBD_CtlError>
    return USBD_FAIL;
 80099d4:	2303      	movs	r3, #3
 80099d6:	e088      	b.n	8009aea <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	2b02      	cmp	r3, #2
 80099e2:	d002      	beq.n	80099ea <USBD_SetConfig+0x3e>
 80099e4:	2b03      	cmp	r3, #3
 80099e6:	d025      	beq.n	8009a34 <USBD_SetConfig+0x88>
 80099e8:	e071      	b.n	8009ace <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80099ea:	4b42      	ldr	r3, [pc, #264]	; (8009af4 <USBD_SetConfig+0x148>)
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d01c      	beq.n	8009a2c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80099f2:	4b40      	ldr	r3, [pc, #256]	; (8009af4 <USBD_SetConfig+0x148>)
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	461a      	mov	r2, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80099fc:	4b3d      	ldr	r3, [pc, #244]	; (8009af4 <USBD_SetConfig+0x148>)
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	4619      	mov	r1, r3
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f7ff f949 	bl	8008c9a <USBD_SetClassConfig>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009a0c:	7bfb      	ldrb	r3, [r7, #15]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d004      	beq.n	8009a1c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009a12:	6839      	ldr	r1, [r7, #0]
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 f949 	bl	8009cac <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a1a:	e065      	b.n	8009ae8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 f993 	bl	8009d48 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2203      	movs	r2, #3
 8009a26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009a2a:	e05d      	b.n	8009ae8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 f98b 	bl	8009d48 <USBD_CtlSendStatus>
      break;
 8009a32:	e059      	b.n	8009ae8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009a34:	4b2f      	ldr	r3, [pc, #188]	; (8009af4 <USBD_SetConfig+0x148>)
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d112      	bne.n	8009a62 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2202      	movs	r2, #2
 8009a40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009a44:	4b2b      	ldr	r3, [pc, #172]	; (8009af4 <USBD_SetConfig+0x148>)
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	461a      	mov	r2, r3
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a4e:	4b29      	ldr	r3, [pc, #164]	; (8009af4 <USBD_SetConfig+0x148>)
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	4619      	mov	r1, r3
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f7ff f93c 	bl	8008cd2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 f974 	bl	8009d48 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a60:	e042      	b.n	8009ae8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009a62:	4b24      	ldr	r3, [pc, #144]	; (8009af4 <USBD_SetConfig+0x148>)
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	461a      	mov	r2, r3
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d02a      	beq.n	8009ac6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	4619      	mov	r1, r3
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f7ff f92a 	bl	8008cd2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009a7e:	4b1d      	ldr	r3, [pc, #116]	; (8009af4 <USBD_SetConfig+0x148>)
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	461a      	mov	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a88:	4b1a      	ldr	r3, [pc, #104]	; (8009af4 <USBD_SetConfig+0x148>)
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7ff f903 	bl	8008c9a <USBD_SetClassConfig>
 8009a94:	4603      	mov	r3, r0
 8009a96:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009a98:	7bfb      	ldrb	r3, [r7, #15]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00f      	beq.n	8009abe <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009a9e:	6839      	ldr	r1, [r7, #0]
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 f903 	bl	8009cac <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	4619      	mov	r1, r3
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f7ff f90f 	bl	8008cd2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2202      	movs	r2, #2
 8009ab8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009abc:	e014      	b.n	8009ae8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 f942 	bl	8009d48 <USBD_CtlSendStatus>
      break;
 8009ac4:	e010      	b.n	8009ae8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 f93e 	bl	8009d48 <USBD_CtlSendStatus>
      break;
 8009acc:	e00c      	b.n	8009ae8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009ace:	6839      	ldr	r1, [r7, #0]
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f8eb 	bl	8009cac <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009ad6:	4b07      	ldr	r3, [pc, #28]	; (8009af4 <USBD_SetConfig+0x148>)
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	4619      	mov	r1, r3
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f7ff f8f8 	bl	8008cd2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009ae2:	2303      	movs	r3, #3
 8009ae4:	73fb      	strb	r3, [r7, #15]
      break;
 8009ae6:	bf00      	nop
  }

  return ret;
 8009ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3710      	adds	r7, #16
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	20000094 	.word	0x20000094

08009af8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	88db      	ldrh	r3, [r3, #6]
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d004      	beq.n	8009b14 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009b0a:	6839      	ldr	r1, [r7, #0]
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 f8cd 	bl	8009cac <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009b12:	e023      	b.n	8009b5c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	2b02      	cmp	r3, #2
 8009b1e:	dc02      	bgt.n	8009b26 <USBD_GetConfig+0x2e>
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	dc03      	bgt.n	8009b2c <USBD_GetConfig+0x34>
 8009b24:	e015      	b.n	8009b52 <USBD_GetConfig+0x5a>
 8009b26:	2b03      	cmp	r3, #3
 8009b28:	d00b      	beq.n	8009b42 <USBD_GetConfig+0x4a>
 8009b2a:	e012      	b.n	8009b52 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	3308      	adds	r3, #8
 8009b36:	2201      	movs	r2, #1
 8009b38:	4619      	mov	r1, r3
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 f8c7 	bl	8009cce <USBD_CtlSendData>
        break;
 8009b40:	e00c      	b.n	8009b5c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	3304      	adds	r3, #4
 8009b46:	2201      	movs	r2, #1
 8009b48:	4619      	mov	r1, r3
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 f8bf 	bl	8009cce <USBD_CtlSendData>
        break;
 8009b50:	e004      	b.n	8009b5c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009b52:	6839      	ldr	r1, [r7, #0]
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 f8a9 	bl	8009cac <USBD_CtlError>
        break;
 8009b5a:	bf00      	nop
}
 8009b5c:	bf00      	nop
 8009b5e:	3708      	adds	r7, #8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	3b01      	subs	r3, #1
 8009b78:	2b02      	cmp	r3, #2
 8009b7a:	d81e      	bhi.n	8009bba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	88db      	ldrh	r3, [r3, #6]
 8009b80:	2b02      	cmp	r3, #2
 8009b82:	d004      	beq.n	8009b8e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009b84:	6839      	ldr	r1, [r7, #0]
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 f890 	bl	8009cac <USBD_CtlError>
        break;
 8009b8c:	e01a      	b.n	8009bc4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2201      	movs	r2, #1
 8009b92:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d005      	beq.n	8009baa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	f043 0202 	orr.w	r2, r3, #2
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	330c      	adds	r3, #12
 8009bae:	2202      	movs	r2, #2
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 f88b 	bl	8009cce <USBD_CtlSendData>
      break;
 8009bb8:	e004      	b.n	8009bc4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009bba:	6839      	ldr	r1, [r7, #0]
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 f875 	bl	8009cac <USBD_CtlError>
      break;
 8009bc2:	bf00      	nop
  }
}
 8009bc4:	bf00      	nop
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	885b      	ldrh	r3, [r3, #2]
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d106      	bne.n	8009bec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2201      	movs	r2, #1
 8009be2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 f8ae 	bl	8009d48 <USBD_CtlSendStatus>
  }
}
 8009bec:	bf00      	nop
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	3b01      	subs	r3, #1
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	d80b      	bhi.n	8009c24 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	885b      	ldrh	r3, [r3, #2]
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d10c      	bne.n	8009c2e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 f893 	bl	8009d48 <USBD_CtlSendStatus>
      }
      break;
 8009c22:	e004      	b.n	8009c2e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009c24:	6839      	ldr	r1, [r7, #0]
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 f840 	bl	8009cac <USBD_CtlError>
      break;
 8009c2c:	e000      	b.n	8009c30 <USBD_ClrFeature+0x3c>
      break;
 8009c2e:	bf00      	nop
  }
}
 8009c30:	bf00      	nop
 8009c32:	3708      	adds	r7, #8
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	781a      	ldrb	r2, [r3, #0]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	3301      	adds	r3, #1
 8009c52:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	781a      	ldrb	r2, [r3, #0]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f7ff fabc 	bl	80091e0 <SWAPBYTE>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	3301      	adds	r3, #1
 8009c74:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	3301      	adds	r3, #1
 8009c7a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	f7ff faaf 	bl	80091e0 <SWAPBYTE>
 8009c82:	4603      	mov	r3, r0
 8009c84:	461a      	mov	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	3301      	adds	r3, #1
 8009c94:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009c96:	68f8      	ldr	r0, [r7, #12]
 8009c98:	f7ff faa2 	bl	80091e0 <SWAPBYTE>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	80da      	strh	r2, [r3, #6]
}
 8009ca4:	bf00      	nop
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cb6:	2180      	movs	r1, #128	; 0x80
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f002 ff17 	bl	800caec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009cbe:	2100      	movs	r1, #0
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f002 ff13 	bl	800caec <USBD_LL_StallEP>
}
 8009cc6:	bf00      	nop
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b084      	sub	sp, #16
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	60f8      	str	r0, [r7, #12]
 8009cd6:	60b9      	str	r1, [r7, #8]
 8009cd8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2202      	movs	r2, #2
 8009cde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	2100      	movs	r1, #0
 8009cf4:	68f8      	ldr	r0, [r7, #12]
 8009cf6:	f002 ff82 	bl	800cbfe <USBD_LL_Transmit>

  return USBD_OK;
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	68ba      	ldr	r2, [r7, #8]
 8009d14:	2100      	movs	r1, #0
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f002 ff71 	bl	800cbfe <USBD_LL_Transmit>

  return USBD_OK;
 8009d1c:	2300      	movs	r3, #0
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009d26:	b580      	push	{r7, lr}
 8009d28:	b084      	sub	sp, #16
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	60f8      	str	r0, [r7, #12]
 8009d2e:	60b9      	str	r1, [r7, #8]
 8009d30:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	68ba      	ldr	r2, [r7, #8]
 8009d36:	2100      	movs	r1, #0
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f002 ff81 	bl	800cc40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d3e:	2300      	movs	r3, #0
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3710      	adds	r7, #16
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2204      	movs	r2, #4
 8009d54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009d58:	2300      	movs	r3, #0
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f002 ff4d 	bl	800cbfe <USBD_LL_Transmit>

  return USBD_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3708      	adds	r7, #8
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b082      	sub	sp, #8
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2205      	movs	r2, #5
 8009d7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d7e:	2300      	movs	r3, #0
 8009d80:	2200      	movs	r2, #0
 8009d82:	2100      	movs	r1, #0
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f002 ff5b 	bl	800cc40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3708      	adds	r7, #8
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <__NVIC_SetPriority>:
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	6039      	str	r1, [r7, #0]
 8009d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	db0a      	blt.n	8009dbe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	b2da      	uxtb	r2, r3
 8009dac:	490c      	ldr	r1, [pc, #48]	; (8009de0 <__NVIC_SetPriority+0x4c>)
 8009dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009db2:	0112      	lsls	r2, r2, #4
 8009db4:	b2d2      	uxtb	r2, r2
 8009db6:	440b      	add	r3, r1
 8009db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009dbc:	e00a      	b.n	8009dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	b2da      	uxtb	r2, r3
 8009dc2:	4908      	ldr	r1, [pc, #32]	; (8009de4 <__NVIC_SetPriority+0x50>)
 8009dc4:	79fb      	ldrb	r3, [r7, #7]
 8009dc6:	f003 030f 	and.w	r3, r3, #15
 8009dca:	3b04      	subs	r3, #4
 8009dcc:	0112      	lsls	r2, r2, #4
 8009dce:	b2d2      	uxtb	r2, r2
 8009dd0:	440b      	add	r3, r1
 8009dd2:	761a      	strb	r2, [r3, #24]
}
 8009dd4:	bf00      	nop
 8009dd6:	370c      	adds	r7, #12
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr
 8009de0:	e000e100 	.word	0xe000e100
 8009de4:	e000ed00 	.word	0xe000ed00

08009de8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009de8:	b580      	push	{r7, lr}
 8009dea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009dec:	4b05      	ldr	r3, [pc, #20]	; (8009e04 <SysTick_Handler+0x1c>)
 8009dee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009df0:	f001 fcfe 	bl	800b7f0 <xTaskGetSchedulerState>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d001      	beq.n	8009dfe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009dfa:	f002 fae5 	bl	800c3c8 <xPortSysTickHandler>
  }
}
 8009dfe:	bf00      	nop
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop
 8009e04:	e000e010 	.word	0xe000e010

08009e08 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	f06f 0004 	mvn.w	r0, #4
 8009e12:	f7ff ffbf 	bl	8009d94 <__NVIC_SetPriority>
#endif
}
 8009e16:	bf00      	nop
 8009e18:	bd80      	pop	{r7, pc}
	...

08009e1c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e22:	f3ef 8305 	mrs	r3, IPSR
 8009e26:	603b      	str	r3, [r7, #0]
  return(result);
 8009e28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d003      	beq.n	8009e36 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009e2e:	f06f 0305 	mvn.w	r3, #5
 8009e32:	607b      	str	r3, [r7, #4]
 8009e34:	e00c      	b.n	8009e50 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009e36:	4b0a      	ldr	r3, [pc, #40]	; (8009e60 <osKernelInitialize+0x44>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d105      	bne.n	8009e4a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009e3e:	4b08      	ldr	r3, [pc, #32]	; (8009e60 <osKernelInitialize+0x44>)
 8009e40:	2201      	movs	r2, #1
 8009e42:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009e44:	2300      	movs	r3, #0
 8009e46:	607b      	str	r3, [r7, #4]
 8009e48:	e002      	b.n	8009e50 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009e50:	687b      	ldr	r3, [r7, #4]
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	370c      	adds	r7, #12
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr
 8009e5e:	bf00      	nop
 8009e60:	20000098 	.word	0x20000098

08009e64 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e6a:	f3ef 8305 	mrs	r3, IPSR
 8009e6e:	603b      	str	r3, [r7, #0]
  return(result);
 8009e70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d003      	beq.n	8009e7e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009e76:	f06f 0305 	mvn.w	r3, #5
 8009e7a:	607b      	str	r3, [r7, #4]
 8009e7c:	e010      	b.n	8009ea0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009e7e:	4b0b      	ldr	r3, [pc, #44]	; (8009eac <osKernelStart+0x48>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d109      	bne.n	8009e9a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009e86:	f7ff ffbf 	bl	8009e08 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009e8a:	4b08      	ldr	r3, [pc, #32]	; (8009eac <osKernelStart+0x48>)
 8009e8c:	2202      	movs	r2, #2
 8009e8e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009e90:	f001 f866 	bl	800af60 <vTaskStartScheduler>
      stat = osOK;
 8009e94:	2300      	movs	r3, #0
 8009e96:	607b      	str	r3, [r7, #4]
 8009e98:	e002      	b.n	8009ea0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009ea0:	687b      	ldr	r3, [r7, #4]
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3708      	adds	r7, #8
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	20000098 	.word	0x20000098

08009eb0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b08e      	sub	sp, #56	; 0x38
 8009eb4:	af04      	add	r7, sp, #16
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ec0:	f3ef 8305 	mrs	r3, IPSR
 8009ec4:	617b      	str	r3, [r7, #20]
  return(result);
 8009ec6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d17e      	bne.n	8009fca <osThreadNew+0x11a>
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d07b      	beq.n	8009fca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009ed2:	2380      	movs	r3, #128	; 0x80
 8009ed4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009ed6:	2318      	movs	r3, #24
 8009ed8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009eda:	2300      	movs	r3, #0
 8009edc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009ede:	f04f 33ff 	mov.w	r3, #4294967295
 8009ee2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d045      	beq.n	8009f76 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d002      	beq.n	8009ef8 <osThreadNew+0x48>
        name = attr->name;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	699b      	ldr	r3, [r3, #24]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d002      	beq.n	8009f06 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	699b      	ldr	r3, [r3, #24]
 8009f04:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009f06:	69fb      	ldr	r3, [r7, #28]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d008      	beq.n	8009f1e <osThreadNew+0x6e>
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	2b38      	cmp	r3, #56	; 0x38
 8009f10:	d805      	bhi.n	8009f1e <osThreadNew+0x6e>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	f003 0301 	and.w	r3, r3, #1
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d001      	beq.n	8009f22 <osThreadNew+0x72>
        return (NULL);
 8009f1e:	2300      	movs	r3, #0
 8009f20:	e054      	b.n	8009fcc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	695b      	ldr	r3, [r3, #20]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d003      	beq.n	8009f32 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	695b      	ldr	r3, [r3, #20]
 8009f2e:	089b      	lsrs	r3, r3, #2
 8009f30:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	689b      	ldr	r3, [r3, #8]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00e      	beq.n	8009f58 <osThreadNew+0xa8>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	2b5b      	cmp	r3, #91	; 0x5b
 8009f40:	d90a      	bls.n	8009f58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d006      	beq.n	8009f58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	695b      	ldr	r3, [r3, #20]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d002      	beq.n	8009f58 <osThreadNew+0xa8>
        mem = 1;
 8009f52:	2301      	movs	r3, #1
 8009f54:	61bb      	str	r3, [r7, #24]
 8009f56:	e010      	b.n	8009f7a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d10c      	bne.n	8009f7a <osThreadNew+0xca>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	68db      	ldr	r3, [r3, #12]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d108      	bne.n	8009f7a <osThreadNew+0xca>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	691b      	ldr	r3, [r3, #16]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d104      	bne.n	8009f7a <osThreadNew+0xca>
          mem = 0;
 8009f70:	2300      	movs	r3, #0
 8009f72:	61bb      	str	r3, [r7, #24]
 8009f74:	e001      	b.n	8009f7a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009f76:	2300      	movs	r3, #0
 8009f78:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009f7a:	69bb      	ldr	r3, [r7, #24]
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d110      	bne.n	8009fa2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f88:	9202      	str	r2, [sp, #8]
 8009f8a:	9301      	str	r3, [sp, #4]
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	9300      	str	r3, [sp, #0]
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	6a3a      	ldr	r2, [r7, #32]
 8009f94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f96:	68f8      	ldr	r0, [r7, #12]
 8009f98:	f000 fe0c 	bl	800abb4 <xTaskCreateStatic>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	613b      	str	r3, [r7, #16]
 8009fa0:	e013      	b.n	8009fca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d110      	bne.n	8009fca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009fa8:	6a3b      	ldr	r3, [r7, #32]
 8009faa:	b29a      	uxth	r2, r3
 8009fac:	f107 0310 	add.w	r3, r7, #16
 8009fb0:	9301      	str	r3, [sp, #4]
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	9300      	str	r3, [sp, #0]
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f000 fe57 	bl	800ac6e <xTaskCreate>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d001      	beq.n	8009fca <osThreadNew+0x11a>
            hTask = NULL;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009fca:	693b      	ldr	r3, [r7, #16]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3728      	adds	r7, #40	; 0x28
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fdc:	f3ef 8305 	mrs	r3, IPSR
 8009fe0:	60bb      	str	r3, [r7, #8]
  return(result);
 8009fe2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d003      	beq.n	8009ff0 <osDelay+0x1c>
    stat = osErrorISR;
 8009fe8:	f06f 0305 	mvn.w	r3, #5
 8009fec:	60fb      	str	r3, [r7, #12]
 8009fee:	e007      	b.n	800a000 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d002      	beq.n	800a000 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 ff7c 	bl	800aef8 <vTaskDelay>
    }
  }

  return (stat);
 800a000:	68fb      	ldr	r3, [r7, #12]
}
 800a002:	4618      	mov	r0, r3
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
	...

0800a00c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	4a07      	ldr	r2, [pc, #28]	; (800a038 <vApplicationGetIdleTaskMemory+0x2c>)
 800a01c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	4a06      	ldr	r2, [pc, #24]	; (800a03c <vApplicationGetIdleTaskMemory+0x30>)
 800a022:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2280      	movs	r2, #128	; 0x80
 800a028:	601a      	str	r2, [r3, #0]
}
 800a02a:	bf00      	nop
 800a02c:	3714      	adds	r7, #20
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	2000009c 	.word	0x2000009c
 800a03c:	200000f8 	.word	0x200000f8

0800a040 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a040:	b480      	push	{r7}
 800a042:	b085      	sub	sp, #20
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	4a07      	ldr	r2, [pc, #28]	; (800a06c <vApplicationGetTimerTaskMemory+0x2c>)
 800a050:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	4a06      	ldr	r2, [pc, #24]	; (800a070 <vApplicationGetTimerTaskMemory+0x30>)
 800a056:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a05e:	601a      	str	r2, [r3, #0]
}
 800a060:	bf00      	nop
 800a062:	3714      	adds	r7, #20
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr
 800a06c:	200002f8 	.word	0x200002f8
 800a070:	20000354 	.word	0x20000354

0800a074 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f103 0208 	add.w	r2, r3, #8
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f04f 32ff 	mov.w	r2, #4294967295
 800a08c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f103 0208 	add.w	r2, r3, #8
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f103 0208 	add.w	r2, r3, #8
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a0a8:	bf00      	nop
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a0c2:	bf00      	nop
 800a0c4:	370c      	adds	r7, #12
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr

0800a0ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	b085      	sub	sp, #20
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
 800a0d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	68fa      	ldr	r2, [r7, #12]
 800a0e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	689a      	ldr	r2, [r3, #8]
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	683a      	ldr	r2, [r7, #0]
 800a0f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	1c5a      	adds	r2, r3, #1
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	601a      	str	r2, [r3, #0]
}
 800a10a:	bf00      	nop
 800a10c:	3714      	adds	r7, #20
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr

0800a116 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a116:	b480      	push	{r7}
 800a118:	b085      	sub	sp, #20
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
 800a11e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a12c:	d103      	bne.n	800a136 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	691b      	ldr	r3, [r3, #16]
 800a132:	60fb      	str	r3, [r7, #12]
 800a134:	e00c      	b.n	800a150 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	3308      	adds	r3, #8
 800a13a:	60fb      	str	r3, [r7, #12]
 800a13c:	e002      	b.n	800a144 <vListInsert+0x2e>
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	60fb      	str	r3, [r7, #12]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	68ba      	ldr	r2, [r7, #8]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d2f6      	bcs.n	800a13e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	685a      	ldr	r2, [r3, #4]
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	683a      	ldr	r2, [r7, #0]
 800a15e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	683a      	ldr	r2, [r7, #0]
 800a16a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	1c5a      	adds	r2, r3, #1
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	601a      	str	r2, [r3, #0]
}
 800a17c:	bf00      	nop
 800a17e:	3714      	adds	r7, #20
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	691b      	ldr	r3, [r3, #16]
 800a194:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	6892      	ldr	r2, [r2, #8]
 800a19e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	6852      	ldr	r2, [r2, #4]
 800a1a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d103      	bne.n	800a1bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	689a      	ldr	r2, [r3, #8]
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	1e5a      	subs	r2, r3, #1
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3714      	adds	r7, #20
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d10a      	bne.n	800a206 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f4:	f383 8811 	msr	BASEPRI, r3
 800a1f8:	f3bf 8f6f 	isb	sy
 800a1fc:	f3bf 8f4f 	dsb	sy
 800a200:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a202:	bf00      	nop
 800a204:	e7fe      	b.n	800a204 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a206:	f002 f84d 	bl	800c2a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a212:	68f9      	ldr	r1, [r7, #12]
 800a214:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a216:	fb01 f303 	mul.w	r3, r1, r3
 800a21a:	441a      	add	r2, r3
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2200      	movs	r2, #0
 800a224:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a236:	3b01      	subs	r3, #1
 800a238:	68f9      	ldr	r1, [r7, #12]
 800a23a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a23c:	fb01 f303 	mul.w	r3, r1, r3
 800a240:	441a      	add	r2, r3
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	22ff      	movs	r2, #255	; 0xff
 800a24a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	22ff      	movs	r2, #255	; 0xff
 800a252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d114      	bne.n	800a286 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	691b      	ldr	r3, [r3, #16]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d01a      	beq.n	800a29a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	3310      	adds	r3, #16
 800a268:	4618      	mov	r0, r3
 800a26a:	f001 f903 	bl	800b474 <xTaskRemoveFromEventList>
 800a26e:	4603      	mov	r3, r0
 800a270:	2b00      	cmp	r3, #0
 800a272:	d012      	beq.n	800a29a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a274:	4b0c      	ldr	r3, [pc, #48]	; (800a2a8 <xQueueGenericReset+0xcc>)
 800a276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a27a:	601a      	str	r2, [r3, #0]
 800a27c:	f3bf 8f4f 	dsb	sy
 800a280:	f3bf 8f6f 	isb	sy
 800a284:	e009      	b.n	800a29a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	3310      	adds	r3, #16
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7ff fef2 	bl	800a074 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	3324      	adds	r3, #36	; 0x24
 800a294:	4618      	mov	r0, r3
 800a296:	f7ff feed 	bl	800a074 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a29a:	f002 f833 	bl	800c304 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a29e:	2301      	movs	r3, #1
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3710      	adds	r7, #16
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	e000ed04 	.word	0xe000ed04

0800a2ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b08e      	sub	sp, #56	; 0x38
 800a2b0:	af02      	add	r7, sp, #8
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	607a      	str	r2, [r7, #4]
 800a2b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d10a      	bne.n	800a2d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c4:	f383 8811 	msr	BASEPRI, r3
 800a2c8:	f3bf 8f6f 	isb	sy
 800a2cc:	f3bf 8f4f 	dsb	sy
 800a2d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a2d2:	bf00      	nop
 800a2d4:	e7fe      	b.n	800a2d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d10a      	bne.n	800a2f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e0:	f383 8811 	msr	BASEPRI, r3
 800a2e4:	f3bf 8f6f 	isb	sy
 800a2e8:	f3bf 8f4f 	dsb	sy
 800a2ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a2ee:	bf00      	nop
 800a2f0:	e7fe      	b.n	800a2f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d002      	beq.n	800a2fe <xQueueGenericCreateStatic+0x52>
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d001      	beq.n	800a302 <xQueueGenericCreateStatic+0x56>
 800a2fe:	2301      	movs	r3, #1
 800a300:	e000      	b.n	800a304 <xQueueGenericCreateStatic+0x58>
 800a302:	2300      	movs	r3, #0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d10a      	bne.n	800a31e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30c:	f383 8811 	msr	BASEPRI, r3
 800a310:	f3bf 8f6f 	isb	sy
 800a314:	f3bf 8f4f 	dsb	sy
 800a318:	623b      	str	r3, [r7, #32]
}
 800a31a:	bf00      	nop
 800a31c:	e7fe      	b.n	800a31c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d102      	bne.n	800a32a <xQueueGenericCreateStatic+0x7e>
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d101      	bne.n	800a32e <xQueueGenericCreateStatic+0x82>
 800a32a:	2301      	movs	r3, #1
 800a32c:	e000      	b.n	800a330 <xQueueGenericCreateStatic+0x84>
 800a32e:	2300      	movs	r3, #0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d10a      	bne.n	800a34a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a338:	f383 8811 	msr	BASEPRI, r3
 800a33c:	f3bf 8f6f 	isb	sy
 800a340:	f3bf 8f4f 	dsb	sy
 800a344:	61fb      	str	r3, [r7, #28]
}
 800a346:	bf00      	nop
 800a348:	e7fe      	b.n	800a348 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a34a:	2350      	movs	r3, #80	; 0x50
 800a34c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	2b50      	cmp	r3, #80	; 0x50
 800a352:	d00a      	beq.n	800a36a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a358:	f383 8811 	msr	BASEPRI, r3
 800a35c:	f3bf 8f6f 	isb	sy
 800a360:	f3bf 8f4f 	dsb	sy
 800a364:	61bb      	str	r3, [r7, #24]
}
 800a366:	bf00      	nop
 800a368:	e7fe      	b.n	800a368 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a36a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a372:	2b00      	cmp	r3, #0
 800a374:	d00d      	beq.n	800a392 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a378:	2201      	movs	r2, #1
 800a37a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a37e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a384:	9300      	str	r3, [sp, #0]
 800a386:	4613      	mov	r3, r2
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	68b9      	ldr	r1, [r7, #8]
 800a38c:	68f8      	ldr	r0, [r7, #12]
 800a38e:	f000 f805 	bl	800a39c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a394:	4618      	mov	r0, r3
 800a396:	3730      	adds	r7, #48	; 0x30
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]
 800a3a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d103      	bne.n	800a3b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a3b0:	69bb      	ldr	r3, [r7, #24]
 800a3b2:	69ba      	ldr	r2, [r7, #24]
 800a3b4:	601a      	str	r2, [r3, #0]
 800a3b6:	e002      	b.n	800a3be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a3b8:	69bb      	ldr	r3, [r7, #24]
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a3be:	69bb      	ldr	r3, [r7, #24]
 800a3c0:	68fa      	ldr	r2, [r7, #12]
 800a3c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	68ba      	ldr	r2, [r7, #8]
 800a3c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a3ca:	2101      	movs	r1, #1
 800a3cc:	69b8      	ldr	r0, [r7, #24]
 800a3ce:	f7ff ff05 	bl	800a1dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a3d2:	69bb      	ldr	r3, [r7, #24]
 800a3d4:	78fa      	ldrb	r2, [r7, #3]
 800a3d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a3da:	bf00      	nop
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
	...

0800a3e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b08e      	sub	sp, #56	; 0x38
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	607a      	str	r2, [r7, #4]
 800a3f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d10a      	bne.n	800a416 <xQueueGenericSend+0x32>
	__asm volatile
 800a400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a404:	f383 8811 	msr	BASEPRI, r3
 800a408:	f3bf 8f6f 	isb	sy
 800a40c:	f3bf 8f4f 	dsb	sy
 800a410:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a412:	bf00      	nop
 800a414:	e7fe      	b.n	800a414 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d103      	bne.n	800a424 <xQueueGenericSend+0x40>
 800a41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a420:	2b00      	cmp	r3, #0
 800a422:	d101      	bne.n	800a428 <xQueueGenericSend+0x44>
 800a424:	2301      	movs	r3, #1
 800a426:	e000      	b.n	800a42a <xQueueGenericSend+0x46>
 800a428:	2300      	movs	r3, #0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d10a      	bne.n	800a444 <xQueueGenericSend+0x60>
	__asm volatile
 800a42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a432:	f383 8811 	msr	BASEPRI, r3
 800a436:	f3bf 8f6f 	isb	sy
 800a43a:	f3bf 8f4f 	dsb	sy
 800a43e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a440:	bf00      	nop
 800a442:	e7fe      	b.n	800a442 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	2b02      	cmp	r3, #2
 800a448:	d103      	bne.n	800a452 <xQueueGenericSend+0x6e>
 800a44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d101      	bne.n	800a456 <xQueueGenericSend+0x72>
 800a452:	2301      	movs	r3, #1
 800a454:	e000      	b.n	800a458 <xQueueGenericSend+0x74>
 800a456:	2300      	movs	r3, #0
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d10a      	bne.n	800a472 <xQueueGenericSend+0x8e>
	__asm volatile
 800a45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a460:	f383 8811 	msr	BASEPRI, r3
 800a464:	f3bf 8f6f 	isb	sy
 800a468:	f3bf 8f4f 	dsb	sy
 800a46c:	623b      	str	r3, [r7, #32]
}
 800a46e:	bf00      	nop
 800a470:	e7fe      	b.n	800a470 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a472:	f001 f9bd 	bl	800b7f0 <xTaskGetSchedulerState>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d102      	bne.n	800a482 <xQueueGenericSend+0x9e>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d101      	bne.n	800a486 <xQueueGenericSend+0xa2>
 800a482:	2301      	movs	r3, #1
 800a484:	e000      	b.n	800a488 <xQueueGenericSend+0xa4>
 800a486:	2300      	movs	r3, #0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d10a      	bne.n	800a4a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800a48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a490:	f383 8811 	msr	BASEPRI, r3
 800a494:	f3bf 8f6f 	isb	sy
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	61fb      	str	r3, [r7, #28]
}
 800a49e:	bf00      	nop
 800a4a0:	e7fe      	b.n	800a4a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4a2:	f001 feff 	bl	800c2a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d302      	bcc.n	800a4b8 <xQueueGenericSend+0xd4>
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	2b02      	cmp	r3, #2
 800a4b6:	d129      	bne.n	800a50c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a4b8:	683a      	ldr	r2, [r7, #0]
 800a4ba:	68b9      	ldr	r1, [r7, #8]
 800a4bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4be:	f000 fa0b 	bl	800a8d8 <prvCopyDataToQueue>
 800a4c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d010      	beq.n	800a4ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ce:	3324      	adds	r3, #36	; 0x24
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f000 ffcf 	bl	800b474 <xTaskRemoveFromEventList>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d013      	beq.n	800a504 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a4dc:	4b3f      	ldr	r3, [pc, #252]	; (800a5dc <xQueueGenericSend+0x1f8>)
 800a4de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4e2:	601a      	str	r2, [r3, #0]
 800a4e4:	f3bf 8f4f 	dsb	sy
 800a4e8:	f3bf 8f6f 	isb	sy
 800a4ec:	e00a      	b.n	800a504 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d007      	beq.n	800a504 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a4f4:	4b39      	ldr	r3, [pc, #228]	; (800a5dc <xQueueGenericSend+0x1f8>)
 800a4f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4fa:	601a      	str	r2, [r3, #0]
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a504:	f001 fefe 	bl	800c304 <vPortExitCritical>
				return pdPASS;
 800a508:	2301      	movs	r3, #1
 800a50a:	e063      	b.n	800a5d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d103      	bne.n	800a51a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a512:	f001 fef7 	bl	800c304 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a516:	2300      	movs	r3, #0
 800a518:	e05c      	b.n	800a5d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a51a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d106      	bne.n	800a52e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a520:	f107 0314 	add.w	r3, r7, #20
 800a524:	4618      	mov	r0, r3
 800a526:	f001 f809 	bl	800b53c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a52a:	2301      	movs	r3, #1
 800a52c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a52e:	f001 fee9 	bl	800c304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a532:	f000 fd7b 	bl	800b02c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a536:	f001 feb5 	bl	800c2a4 <vPortEnterCritical>
 800a53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a540:	b25b      	sxtb	r3, r3
 800a542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a546:	d103      	bne.n	800a550 <xQueueGenericSend+0x16c>
 800a548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54a:	2200      	movs	r2, #0
 800a54c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a552:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a556:	b25b      	sxtb	r3, r3
 800a558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a55c:	d103      	bne.n	800a566 <xQueueGenericSend+0x182>
 800a55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a560:	2200      	movs	r2, #0
 800a562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a566:	f001 fecd 	bl	800c304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a56a:	1d3a      	adds	r2, r7, #4
 800a56c:	f107 0314 	add.w	r3, r7, #20
 800a570:	4611      	mov	r1, r2
 800a572:	4618      	mov	r0, r3
 800a574:	f000 fff8 	bl	800b568 <xTaskCheckForTimeOut>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d124      	bne.n	800a5c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a57e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a580:	f000 faa2 	bl	800aac8 <prvIsQueueFull>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d018      	beq.n	800a5bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58c:	3310      	adds	r3, #16
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	4611      	mov	r1, r2
 800a592:	4618      	mov	r0, r3
 800a594:	f000 ff1e 	bl	800b3d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a59a:	f000 fa2d 	bl	800a9f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a59e:	f000 fd53 	bl	800b048 <xTaskResumeAll>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f47f af7c 	bne.w	800a4a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a5aa:	4b0c      	ldr	r3, [pc, #48]	; (800a5dc <xQueueGenericSend+0x1f8>)
 800a5ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5b0:	601a      	str	r2, [r3, #0]
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	f3bf 8f6f 	isb	sy
 800a5ba:	e772      	b.n	800a4a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a5bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5be:	f000 fa1b 	bl	800a9f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a5c2:	f000 fd41 	bl	800b048 <xTaskResumeAll>
 800a5c6:	e76c      	b.n	800a4a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a5c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5ca:	f000 fa15 	bl	800a9f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5ce:	f000 fd3b 	bl	800b048 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a5d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3738      	adds	r7, #56	; 0x38
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	e000ed04 	.word	0xe000ed04

0800a5e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b090      	sub	sp, #64	; 0x40
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
 800a5ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d10a      	bne.n	800a60e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fc:	f383 8811 	msr	BASEPRI, r3
 800a600:	f3bf 8f6f 	isb	sy
 800a604:	f3bf 8f4f 	dsb	sy
 800a608:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a60a:	bf00      	nop
 800a60c:	e7fe      	b.n	800a60c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d103      	bne.n	800a61c <xQueueGenericSendFromISR+0x3c>
 800a614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d101      	bne.n	800a620 <xQueueGenericSendFromISR+0x40>
 800a61c:	2301      	movs	r3, #1
 800a61e:	e000      	b.n	800a622 <xQueueGenericSendFromISR+0x42>
 800a620:	2300      	movs	r3, #0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d10a      	bne.n	800a63c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62a:	f383 8811 	msr	BASEPRI, r3
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	f3bf 8f4f 	dsb	sy
 800a636:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a638:	bf00      	nop
 800a63a:	e7fe      	b.n	800a63a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	2b02      	cmp	r3, #2
 800a640:	d103      	bne.n	800a64a <xQueueGenericSendFromISR+0x6a>
 800a642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a646:	2b01      	cmp	r3, #1
 800a648:	d101      	bne.n	800a64e <xQueueGenericSendFromISR+0x6e>
 800a64a:	2301      	movs	r3, #1
 800a64c:	e000      	b.n	800a650 <xQueueGenericSendFromISR+0x70>
 800a64e:	2300      	movs	r3, #0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d10a      	bne.n	800a66a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a658:	f383 8811 	msr	BASEPRI, r3
 800a65c:	f3bf 8f6f 	isb	sy
 800a660:	f3bf 8f4f 	dsb	sy
 800a664:	623b      	str	r3, [r7, #32]
}
 800a666:	bf00      	nop
 800a668:	e7fe      	b.n	800a668 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a66a:	f001 fefd 	bl	800c468 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a66e:	f3ef 8211 	mrs	r2, BASEPRI
 800a672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a676:	f383 8811 	msr	BASEPRI, r3
 800a67a:	f3bf 8f6f 	isb	sy
 800a67e:	f3bf 8f4f 	dsb	sy
 800a682:	61fa      	str	r2, [r7, #28]
 800a684:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a686:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a688:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a692:	429a      	cmp	r2, r3
 800a694:	d302      	bcc.n	800a69c <xQueueGenericSendFromISR+0xbc>
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	2b02      	cmp	r3, #2
 800a69a:	d12f      	bne.n	800a6fc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6aa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6ac:	683a      	ldr	r2, [r7, #0]
 800a6ae:	68b9      	ldr	r1, [r7, #8]
 800a6b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a6b2:	f000 f911 	bl	800a8d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a6b6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a6ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6be:	d112      	bne.n	800a6e6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d016      	beq.n	800a6f6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ca:	3324      	adds	r3, #36	; 0x24
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f000 fed1 	bl	800b474 <xTaskRemoveFromEventList>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d00e      	beq.n	800a6f6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d00b      	beq.n	800a6f6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	601a      	str	r2, [r3, #0]
 800a6e4:	e007      	b.n	800a6f6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a6e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	b25a      	sxtb	r2, r3
 800a6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a6fa:	e001      	b.n	800a700 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a702:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a70a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a70c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3740      	adds	r7, #64	; 0x40
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
	...

0800a718 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b08c      	sub	sp, #48	; 0x30
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	60b9      	str	r1, [r7, #8]
 800a722:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a724:	2300      	movs	r3, #0
 800a726:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d10a      	bne.n	800a748 <xQueueReceive+0x30>
	__asm volatile
 800a732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a736:	f383 8811 	msr	BASEPRI, r3
 800a73a:	f3bf 8f6f 	isb	sy
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	623b      	str	r3, [r7, #32]
}
 800a744:	bf00      	nop
 800a746:	e7fe      	b.n	800a746 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d103      	bne.n	800a756 <xQueueReceive+0x3e>
 800a74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a752:	2b00      	cmp	r3, #0
 800a754:	d101      	bne.n	800a75a <xQueueReceive+0x42>
 800a756:	2301      	movs	r3, #1
 800a758:	e000      	b.n	800a75c <xQueueReceive+0x44>
 800a75a:	2300      	movs	r3, #0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d10a      	bne.n	800a776 <xQueueReceive+0x5e>
	__asm volatile
 800a760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a764:	f383 8811 	msr	BASEPRI, r3
 800a768:	f3bf 8f6f 	isb	sy
 800a76c:	f3bf 8f4f 	dsb	sy
 800a770:	61fb      	str	r3, [r7, #28]
}
 800a772:	bf00      	nop
 800a774:	e7fe      	b.n	800a774 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a776:	f001 f83b 	bl	800b7f0 <xTaskGetSchedulerState>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d102      	bne.n	800a786 <xQueueReceive+0x6e>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d101      	bne.n	800a78a <xQueueReceive+0x72>
 800a786:	2301      	movs	r3, #1
 800a788:	e000      	b.n	800a78c <xQueueReceive+0x74>
 800a78a:	2300      	movs	r3, #0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d10a      	bne.n	800a7a6 <xQueueReceive+0x8e>
	__asm volatile
 800a790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a794:	f383 8811 	msr	BASEPRI, r3
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	61bb      	str	r3, [r7, #24]
}
 800a7a2:	bf00      	nop
 800a7a4:	e7fe      	b.n	800a7a4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7a6:	f001 fd7d 	bl	800c2a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d01f      	beq.n	800a7f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a7b6:	68b9      	ldr	r1, [r7, #8]
 800a7b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7ba:	f000 f8f7 	bl	800a9ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c0:	1e5a      	subs	r2, r3, #1
 800a7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00f      	beq.n	800a7ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d0:	3310      	adds	r3, #16
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f000 fe4e 	bl	800b474 <xTaskRemoveFromEventList>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d007      	beq.n	800a7ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a7de:	4b3d      	ldr	r3, [pc, #244]	; (800a8d4 <xQueueReceive+0x1bc>)
 800a7e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7e4:	601a      	str	r2, [r3, #0]
 800a7e6:	f3bf 8f4f 	dsb	sy
 800a7ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a7ee:	f001 fd89 	bl	800c304 <vPortExitCritical>
				return pdPASS;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e069      	b.n	800a8ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d103      	bne.n	800a804 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a7fc:	f001 fd82 	bl	800c304 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a800:	2300      	movs	r3, #0
 800a802:	e062      	b.n	800a8ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a806:	2b00      	cmp	r3, #0
 800a808:	d106      	bne.n	800a818 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a80a:	f107 0310 	add.w	r3, r7, #16
 800a80e:	4618      	mov	r0, r3
 800a810:	f000 fe94 	bl	800b53c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a814:	2301      	movs	r3, #1
 800a816:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a818:	f001 fd74 	bl	800c304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a81c:	f000 fc06 	bl	800b02c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a820:	f001 fd40 	bl	800c2a4 <vPortEnterCritical>
 800a824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a826:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a82a:	b25b      	sxtb	r3, r3
 800a82c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a830:	d103      	bne.n	800a83a <xQueueReceive+0x122>
 800a832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a834:	2200      	movs	r2, #0
 800a836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a840:	b25b      	sxtb	r3, r3
 800a842:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a846:	d103      	bne.n	800a850 <xQueueReceive+0x138>
 800a848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84a:	2200      	movs	r2, #0
 800a84c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a850:	f001 fd58 	bl	800c304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a854:	1d3a      	adds	r2, r7, #4
 800a856:	f107 0310 	add.w	r3, r7, #16
 800a85a:	4611      	mov	r1, r2
 800a85c:	4618      	mov	r0, r3
 800a85e:	f000 fe83 	bl	800b568 <xTaskCheckForTimeOut>
 800a862:	4603      	mov	r3, r0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d123      	bne.n	800a8b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a86a:	f000 f917 	bl	800aa9c <prvIsQueueEmpty>
 800a86e:	4603      	mov	r3, r0
 800a870:	2b00      	cmp	r3, #0
 800a872:	d017      	beq.n	800a8a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a876:	3324      	adds	r3, #36	; 0x24
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	4611      	mov	r1, r2
 800a87c:	4618      	mov	r0, r3
 800a87e:	f000 fda9 	bl	800b3d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a884:	f000 f8b8 	bl	800a9f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a888:	f000 fbde 	bl	800b048 <xTaskResumeAll>
 800a88c:	4603      	mov	r3, r0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d189      	bne.n	800a7a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a892:	4b10      	ldr	r3, [pc, #64]	; (800a8d4 <xQueueReceive+0x1bc>)
 800a894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a898:	601a      	str	r2, [r3, #0]
 800a89a:	f3bf 8f4f 	dsb	sy
 800a89e:	f3bf 8f6f 	isb	sy
 800a8a2:	e780      	b.n	800a7a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a8a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8a6:	f000 f8a7 	bl	800a9f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8aa:	f000 fbcd 	bl	800b048 <xTaskResumeAll>
 800a8ae:	e77a      	b.n	800a7a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a8b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8b2:	f000 f8a1 	bl	800a9f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a8b6:	f000 fbc7 	bl	800b048 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8bc:	f000 f8ee 	bl	800aa9c <prvIsQueueEmpty>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	f43f af6f 	beq.w	800a7a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a8c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3730      	adds	r7, #48	; 0x30
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	e000ed04 	.word	0xe000ed04

0800a8d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b086      	sub	sp, #24
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	60f8      	str	r0, [r7, #12]
 800a8e0:	60b9      	str	r1, [r7, #8]
 800a8e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d10d      	bne.n	800a912 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d14d      	bne.n	800a99a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	4618      	mov	r0, r3
 800a904:	f000 ff92 	bl	800b82c <xTaskPriorityDisinherit>
 800a908:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2200      	movs	r2, #0
 800a90e:	609a      	str	r2, [r3, #8]
 800a910:	e043      	b.n	800a99a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d119      	bne.n	800a94c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	6858      	ldr	r0, [r3, #4]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a920:	461a      	mov	r2, r3
 800a922:	68b9      	ldr	r1, [r7, #8]
 800a924:	f002 f9fe 	bl	800cd24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	685a      	ldr	r2, [r3, #4]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a930:	441a      	add	r2, r3
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	685a      	ldr	r2, [r3, #4]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	429a      	cmp	r2, r3
 800a940:	d32b      	bcc.n	800a99a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	605a      	str	r2, [r3, #4]
 800a94a:	e026      	b.n	800a99a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	68d8      	ldr	r0, [r3, #12]
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a954:	461a      	mov	r2, r3
 800a956:	68b9      	ldr	r1, [r7, #8]
 800a958:	f002 f9e4 	bl	800cd24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	68da      	ldr	r2, [r3, #12]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a964:	425b      	negs	r3, r3
 800a966:	441a      	add	r2, r3
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	68da      	ldr	r2, [r3, #12]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	429a      	cmp	r2, r3
 800a976:	d207      	bcs.n	800a988 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	689a      	ldr	r2, [r3, #8]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a980:	425b      	negs	r3, r3
 800a982:	441a      	add	r2, r3
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2b02      	cmp	r3, #2
 800a98c:	d105      	bne.n	800a99a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d002      	beq.n	800a99a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	3b01      	subs	r3, #1
 800a998:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	1c5a      	adds	r2, r3, #1
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a9a2:	697b      	ldr	r3, [r7, #20]
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3718      	adds	r7, #24
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d018      	beq.n	800a9f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	68da      	ldr	r2, [r3, #12]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9c6:	441a      	add	r2, r3
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	68da      	ldr	r2, [r3, #12]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	689b      	ldr	r3, [r3, #8]
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d303      	bcc.n	800a9e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	68d9      	ldr	r1, [r3, #12]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	6838      	ldr	r0, [r7, #0]
 800a9ec:	f002 f99a 	bl	800cd24 <memcpy>
	}
}
 800a9f0:	bf00      	nop
 800a9f2:	3708      	adds	r7, #8
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aa00:	f001 fc50 	bl	800c2a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa0c:	e011      	b.n	800aa32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d012      	beq.n	800aa3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	3324      	adds	r3, #36	; 0x24
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f000 fd2a 	bl	800b474 <xTaskRemoveFromEventList>
 800aa20:	4603      	mov	r3, r0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d001      	beq.n	800aa2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aa26:	f000 fe01 	bl	800b62c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aa2a:	7bfb      	ldrb	r3, [r7, #15]
 800aa2c:	3b01      	subs	r3, #1
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	dce9      	bgt.n	800aa0e <prvUnlockQueue+0x16>
 800aa3a:	e000      	b.n	800aa3e <prvUnlockQueue+0x46>
					break;
 800aa3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	22ff      	movs	r2, #255	; 0xff
 800aa42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aa46:	f001 fc5d 	bl	800c304 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aa4a:	f001 fc2b 	bl	800c2a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa56:	e011      	b.n	800aa7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	691b      	ldr	r3, [r3, #16]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d012      	beq.n	800aa86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	3310      	adds	r3, #16
 800aa64:	4618      	mov	r0, r3
 800aa66:	f000 fd05 	bl	800b474 <xTaskRemoveFromEventList>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d001      	beq.n	800aa74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aa70:	f000 fddc 	bl	800b62c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aa74:	7bbb      	ldrb	r3, [r7, #14]
 800aa76:	3b01      	subs	r3, #1
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	dce9      	bgt.n	800aa58 <prvUnlockQueue+0x60>
 800aa84:	e000      	b.n	800aa88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aa86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	22ff      	movs	r2, #255	; 0xff
 800aa8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aa90:	f001 fc38 	bl	800c304 <vPortExitCritical>
}
 800aa94:	bf00      	nop
 800aa96:	3710      	adds	r7, #16
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aaa4:	f001 fbfe 	bl	800c2a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d102      	bne.n	800aab6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aab0:	2301      	movs	r3, #1
 800aab2:	60fb      	str	r3, [r7, #12]
 800aab4:	e001      	b.n	800aaba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aab6:	2300      	movs	r3, #0
 800aab8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aaba:	f001 fc23 	bl	800c304 <vPortExitCritical>

	return xReturn;
 800aabe:	68fb      	ldr	r3, [r7, #12]
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3710      	adds	r7, #16
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aad0:	f001 fbe8 	bl	800c2a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aadc:	429a      	cmp	r2, r3
 800aade:	d102      	bne.n	800aae6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aae0:	2301      	movs	r3, #1
 800aae2:	60fb      	str	r3, [r7, #12]
 800aae4:	e001      	b.n	800aaea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aae6:	2300      	movs	r3, #0
 800aae8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aaea:	f001 fc0b 	bl	800c304 <vPortExitCritical>

	return xReturn;
 800aaee:	68fb      	ldr	r3, [r7, #12]
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3710      	adds	r7, #16
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aaf8:	b480      	push	{r7}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab02:	2300      	movs	r3, #0
 800ab04:	60fb      	str	r3, [r7, #12]
 800ab06:	e014      	b.n	800ab32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ab08:	4a0f      	ldr	r2, [pc, #60]	; (800ab48 <vQueueAddToRegistry+0x50>)
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d10b      	bne.n	800ab2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ab14:	490c      	ldr	r1, [pc, #48]	; (800ab48 <vQueueAddToRegistry+0x50>)
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	683a      	ldr	r2, [r7, #0]
 800ab1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ab1e:	4a0a      	ldr	r2, [pc, #40]	; (800ab48 <vQueueAddToRegistry+0x50>)
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	00db      	lsls	r3, r3, #3
 800ab24:	4413      	add	r3, r2
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ab2a:	e006      	b.n	800ab3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	3301      	adds	r3, #1
 800ab30:	60fb      	str	r3, [r7, #12]
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2b07      	cmp	r3, #7
 800ab36:	d9e7      	bls.n	800ab08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ab38:	bf00      	nop
 800ab3a:	bf00      	nop
 800ab3c:	3714      	adds	r7, #20
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr
 800ab46:	bf00      	nop
 800ab48:	20004f48 	.word	0x20004f48

0800ab4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b086      	sub	sp, #24
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ab5c:	f001 fba2 	bl	800c2a4 <vPortEnterCritical>
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab66:	b25b      	sxtb	r3, r3
 800ab68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab6c:	d103      	bne.n	800ab76 <vQueueWaitForMessageRestricted+0x2a>
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	2200      	movs	r2, #0
 800ab72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab7c:	b25b      	sxtb	r3, r3
 800ab7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab82:	d103      	bne.n	800ab8c <vQueueWaitForMessageRestricted+0x40>
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	2200      	movs	r2, #0
 800ab88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab8c:	f001 fbba 	bl	800c304 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d106      	bne.n	800aba6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	3324      	adds	r3, #36	; 0x24
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	68b9      	ldr	r1, [r7, #8]
 800aba0:	4618      	mov	r0, r3
 800aba2:	f000 fc3b 	bl	800b41c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aba6:	6978      	ldr	r0, [r7, #20]
 800aba8:	f7ff ff26 	bl	800a9f8 <prvUnlockQueue>
	}
 800abac:	bf00      	nop
 800abae:	3718      	adds	r7, #24
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b08e      	sub	sp, #56	; 0x38
 800abb8:	af04      	add	r7, sp, #16
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
 800abbe:	607a      	str	r2, [r7, #4]
 800abc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800abc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d10a      	bne.n	800abde <xTaskCreateStatic+0x2a>
	__asm volatile
 800abc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abcc:	f383 8811 	msr	BASEPRI, r3
 800abd0:	f3bf 8f6f 	isb	sy
 800abd4:	f3bf 8f4f 	dsb	sy
 800abd8:	623b      	str	r3, [r7, #32]
}
 800abda:	bf00      	nop
 800abdc:	e7fe      	b.n	800abdc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800abde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d10a      	bne.n	800abfa <xTaskCreateStatic+0x46>
	__asm volatile
 800abe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe8:	f383 8811 	msr	BASEPRI, r3
 800abec:	f3bf 8f6f 	isb	sy
 800abf0:	f3bf 8f4f 	dsb	sy
 800abf4:	61fb      	str	r3, [r7, #28]
}
 800abf6:	bf00      	nop
 800abf8:	e7fe      	b.n	800abf8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800abfa:	235c      	movs	r3, #92	; 0x5c
 800abfc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	2b5c      	cmp	r3, #92	; 0x5c
 800ac02:	d00a      	beq.n	800ac1a <xTaskCreateStatic+0x66>
	__asm volatile
 800ac04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac08:	f383 8811 	msr	BASEPRI, r3
 800ac0c:	f3bf 8f6f 	isb	sy
 800ac10:	f3bf 8f4f 	dsb	sy
 800ac14:	61bb      	str	r3, [r7, #24]
}
 800ac16:	bf00      	nop
 800ac18:	e7fe      	b.n	800ac18 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ac1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ac1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d01e      	beq.n	800ac60 <xTaskCreateStatic+0xac>
 800ac22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d01b      	beq.n	800ac60 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ac2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ac32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac34:	2202      	movs	r2, #2
 800ac36:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	9303      	str	r3, [sp, #12]
 800ac3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac40:	9302      	str	r3, [sp, #8]
 800ac42:	f107 0314 	add.w	r3, r7, #20
 800ac46:	9301      	str	r3, [sp, #4]
 800ac48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4a:	9300      	str	r3, [sp, #0]
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	68b9      	ldr	r1, [r7, #8]
 800ac52:	68f8      	ldr	r0, [r7, #12]
 800ac54:	f000 f850 	bl	800acf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac5a:	f000 f8dd 	bl	800ae18 <prvAddNewTaskToReadyList>
 800ac5e:	e001      	b.n	800ac64 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ac60:	2300      	movs	r3, #0
 800ac62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ac64:	697b      	ldr	r3, [r7, #20]
	}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3728      	adds	r7, #40	; 0x28
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b08c      	sub	sp, #48	; 0x30
 800ac72:	af04      	add	r7, sp, #16
 800ac74:	60f8      	str	r0, [r7, #12]
 800ac76:	60b9      	str	r1, [r7, #8]
 800ac78:	603b      	str	r3, [r7, #0]
 800ac7a:	4613      	mov	r3, r2
 800ac7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ac7e:	88fb      	ldrh	r3, [r7, #6]
 800ac80:	009b      	lsls	r3, r3, #2
 800ac82:	4618      	mov	r0, r3
 800ac84:	f001 fc30 	bl	800c4e8 <pvPortMalloc>
 800ac88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d00e      	beq.n	800acae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ac90:	205c      	movs	r0, #92	; 0x5c
 800ac92:	f001 fc29 	bl	800c4e8 <pvPortMalloc>
 800ac96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ac98:	69fb      	ldr	r3, [r7, #28]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d003      	beq.n	800aca6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ac9e:	69fb      	ldr	r3, [r7, #28]
 800aca0:	697a      	ldr	r2, [r7, #20]
 800aca2:	631a      	str	r2, [r3, #48]	; 0x30
 800aca4:	e005      	b.n	800acb2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aca6:	6978      	ldr	r0, [r7, #20]
 800aca8:	f001 fcea 	bl	800c680 <vPortFree>
 800acac:	e001      	b.n	800acb2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800acae:	2300      	movs	r3, #0
 800acb0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800acb2:	69fb      	ldr	r3, [r7, #28]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d017      	beq.n	800ace8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800acb8:	69fb      	ldr	r3, [r7, #28]
 800acba:	2200      	movs	r2, #0
 800acbc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800acc0:	88fa      	ldrh	r2, [r7, #6]
 800acc2:	2300      	movs	r3, #0
 800acc4:	9303      	str	r3, [sp, #12]
 800acc6:	69fb      	ldr	r3, [r7, #28]
 800acc8:	9302      	str	r3, [sp, #8]
 800acca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800accc:	9301      	str	r3, [sp, #4]
 800acce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd0:	9300      	str	r3, [sp, #0]
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	68b9      	ldr	r1, [r7, #8]
 800acd6:	68f8      	ldr	r0, [r7, #12]
 800acd8:	f000 f80e 	bl	800acf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800acdc:	69f8      	ldr	r0, [r7, #28]
 800acde:	f000 f89b 	bl	800ae18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ace2:	2301      	movs	r3, #1
 800ace4:	61bb      	str	r3, [r7, #24]
 800ace6:	e002      	b.n	800acee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ace8:	f04f 33ff 	mov.w	r3, #4294967295
 800acec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800acee:	69bb      	ldr	r3, [r7, #24]
	}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3720      	adds	r7, #32
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b088      	sub	sp, #32
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	607a      	str	r2, [r7, #4]
 800ad04:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ad06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad08:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	461a      	mov	r2, r3
 800ad10:	21a5      	movs	r1, #165	; 0xa5
 800ad12:	f002 f815 	bl	800cd40 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ad16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ad20:	3b01      	subs	r3, #1
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	4413      	add	r3, r2
 800ad26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	f023 0307 	bic.w	r3, r3, #7
 800ad2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	f003 0307 	and.w	r3, r3, #7
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d00a      	beq.n	800ad50 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ad3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3e:	f383 8811 	msr	BASEPRI, r3
 800ad42:	f3bf 8f6f 	isb	sy
 800ad46:	f3bf 8f4f 	dsb	sy
 800ad4a:	617b      	str	r3, [r7, #20]
}
 800ad4c:	bf00      	nop
 800ad4e:	e7fe      	b.n	800ad4e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d01f      	beq.n	800ad96 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad56:	2300      	movs	r3, #0
 800ad58:	61fb      	str	r3, [r7, #28]
 800ad5a:	e012      	b.n	800ad82 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ad5c:	68ba      	ldr	r2, [r7, #8]
 800ad5e:	69fb      	ldr	r3, [r7, #28]
 800ad60:	4413      	add	r3, r2
 800ad62:	7819      	ldrb	r1, [r3, #0]
 800ad64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad66:	69fb      	ldr	r3, [r7, #28]
 800ad68:	4413      	add	r3, r2
 800ad6a:	3334      	adds	r3, #52	; 0x34
 800ad6c:	460a      	mov	r2, r1
 800ad6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ad70:	68ba      	ldr	r2, [r7, #8]
 800ad72:	69fb      	ldr	r3, [r7, #28]
 800ad74:	4413      	add	r3, r2
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d006      	beq.n	800ad8a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	61fb      	str	r3, [r7, #28]
 800ad82:	69fb      	ldr	r3, [r7, #28]
 800ad84:	2b0f      	cmp	r3, #15
 800ad86:	d9e9      	bls.n	800ad5c <prvInitialiseNewTask+0x64>
 800ad88:	e000      	b.n	800ad8c <prvInitialiseNewTask+0x94>
			{
				break;
 800ad8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ad8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ad94:	e003      	b.n	800ad9e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ad96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ad9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada0:	2b37      	cmp	r3, #55	; 0x37
 800ada2:	d901      	bls.n	800ada8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ada4:	2337      	movs	r3, #55	; 0x37
 800ada6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ada8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800adae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adb2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800adb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb6:	2200      	movs	r2, #0
 800adb8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800adba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adbc:	3304      	adds	r3, #4
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7ff f978 	bl	800a0b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800adc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc6:	3318      	adds	r3, #24
 800adc8:	4618      	mov	r0, r3
 800adca:	f7ff f973 	bl	800a0b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800adce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800add2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800add4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800adda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800addc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800adde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ade2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ade4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade6:	2200      	movs	r2, #0
 800ade8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800adea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adec:	2200      	movs	r2, #0
 800adee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800adf2:	683a      	ldr	r2, [r7, #0]
 800adf4:	68f9      	ldr	r1, [r7, #12]
 800adf6:	69b8      	ldr	r0, [r7, #24]
 800adf8:	f001 f928 	bl	800c04c <pxPortInitialiseStack>
 800adfc:	4602      	mov	r2, r0
 800adfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae00:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ae02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d002      	beq.n	800ae0e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ae08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae0e:	bf00      	nop
 800ae10:	3720      	adds	r7, #32
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
	...

0800ae18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ae20:	f001 fa40 	bl	800c2a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ae24:	4b2d      	ldr	r3, [pc, #180]	; (800aedc <prvAddNewTaskToReadyList+0xc4>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	3301      	adds	r3, #1
 800ae2a:	4a2c      	ldr	r2, [pc, #176]	; (800aedc <prvAddNewTaskToReadyList+0xc4>)
 800ae2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ae2e:	4b2c      	ldr	r3, [pc, #176]	; (800aee0 <prvAddNewTaskToReadyList+0xc8>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d109      	bne.n	800ae4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ae36:	4a2a      	ldr	r2, [pc, #168]	; (800aee0 <prvAddNewTaskToReadyList+0xc8>)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ae3c:	4b27      	ldr	r3, [pc, #156]	; (800aedc <prvAddNewTaskToReadyList+0xc4>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d110      	bne.n	800ae66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ae44:	f000 fc16 	bl	800b674 <prvInitialiseTaskLists>
 800ae48:	e00d      	b.n	800ae66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ae4a:	4b26      	ldr	r3, [pc, #152]	; (800aee4 <prvAddNewTaskToReadyList+0xcc>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d109      	bne.n	800ae66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ae52:	4b23      	ldr	r3, [pc, #140]	; (800aee0 <prvAddNewTaskToReadyList+0xc8>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d802      	bhi.n	800ae66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ae60:	4a1f      	ldr	r2, [pc, #124]	; (800aee0 <prvAddNewTaskToReadyList+0xc8>)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ae66:	4b20      	ldr	r3, [pc, #128]	; (800aee8 <prvAddNewTaskToReadyList+0xd0>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	4a1e      	ldr	r2, [pc, #120]	; (800aee8 <prvAddNewTaskToReadyList+0xd0>)
 800ae6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ae70:	4b1d      	ldr	r3, [pc, #116]	; (800aee8 <prvAddNewTaskToReadyList+0xd0>)
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae7c:	4b1b      	ldr	r3, [pc, #108]	; (800aeec <prvAddNewTaskToReadyList+0xd4>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d903      	bls.n	800ae8c <prvAddNewTaskToReadyList+0x74>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae88:	4a18      	ldr	r2, [pc, #96]	; (800aeec <prvAddNewTaskToReadyList+0xd4>)
 800ae8a:	6013      	str	r3, [r2, #0]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae90:	4613      	mov	r3, r2
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	4413      	add	r3, r2
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	4a15      	ldr	r2, [pc, #84]	; (800aef0 <prvAddNewTaskToReadyList+0xd8>)
 800ae9a:	441a      	add	r2, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	3304      	adds	r3, #4
 800aea0:	4619      	mov	r1, r3
 800aea2:	4610      	mov	r0, r2
 800aea4:	f7ff f913 	bl	800a0ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aea8:	f001 fa2c 	bl	800c304 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aeac:	4b0d      	ldr	r3, [pc, #52]	; (800aee4 <prvAddNewTaskToReadyList+0xcc>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d00e      	beq.n	800aed2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aeb4:	4b0a      	ldr	r3, [pc, #40]	; (800aee0 <prvAddNewTaskToReadyList+0xc8>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d207      	bcs.n	800aed2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aec2:	4b0c      	ldr	r3, [pc, #48]	; (800aef4 <prvAddNewTaskToReadyList+0xdc>)
 800aec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aec8:	601a      	str	r2, [r3, #0]
 800aeca:	f3bf 8f4f 	dsb	sy
 800aece:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aed2:	bf00      	nop
 800aed4:	3708      	adds	r7, #8
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	20000c28 	.word	0x20000c28
 800aee0:	20000754 	.word	0x20000754
 800aee4:	20000c34 	.word	0x20000c34
 800aee8:	20000c44 	.word	0x20000c44
 800aeec:	20000c30 	.word	0x20000c30
 800aef0:	20000758 	.word	0x20000758
 800aef4:	e000ed04 	.word	0xe000ed04

0800aef8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800af00:	2300      	movs	r3, #0
 800af02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d017      	beq.n	800af3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800af0a:	4b13      	ldr	r3, [pc, #76]	; (800af58 <vTaskDelay+0x60>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d00a      	beq.n	800af28 <vTaskDelay+0x30>
	__asm volatile
 800af12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af16:	f383 8811 	msr	BASEPRI, r3
 800af1a:	f3bf 8f6f 	isb	sy
 800af1e:	f3bf 8f4f 	dsb	sy
 800af22:	60bb      	str	r3, [r7, #8]
}
 800af24:	bf00      	nop
 800af26:	e7fe      	b.n	800af26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800af28:	f000 f880 	bl	800b02c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800af2c:	2100      	movs	r1, #0
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 fcea 	bl	800b908 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800af34:	f000 f888 	bl	800b048 <xTaskResumeAll>
 800af38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d107      	bne.n	800af50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800af40:	4b06      	ldr	r3, [pc, #24]	; (800af5c <vTaskDelay+0x64>)
 800af42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af46:	601a      	str	r2, [r3, #0]
 800af48:	f3bf 8f4f 	dsb	sy
 800af4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af50:	bf00      	nop
 800af52:	3710      	adds	r7, #16
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}
 800af58:	20000c50 	.word	0x20000c50
 800af5c:	e000ed04 	.word	0xe000ed04

0800af60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b08a      	sub	sp, #40	; 0x28
 800af64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800af66:	2300      	movs	r3, #0
 800af68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800af6a:	2300      	movs	r3, #0
 800af6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800af6e:	463a      	mov	r2, r7
 800af70:	1d39      	adds	r1, r7, #4
 800af72:	f107 0308 	add.w	r3, r7, #8
 800af76:	4618      	mov	r0, r3
 800af78:	f7ff f848 	bl	800a00c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800af7c:	6839      	ldr	r1, [r7, #0]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	68ba      	ldr	r2, [r7, #8]
 800af82:	9202      	str	r2, [sp, #8]
 800af84:	9301      	str	r3, [sp, #4]
 800af86:	2300      	movs	r3, #0
 800af88:	9300      	str	r3, [sp, #0]
 800af8a:	2300      	movs	r3, #0
 800af8c:	460a      	mov	r2, r1
 800af8e:	4921      	ldr	r1, [pc, #132]	; (800b014 <vTaskStartScheduler+0xb4>)
 800af90:	4821      	ldr	r0, [pc, #132]	; (800b018 <vTaskStartScheduler+0xb8>)
 800af92:	f7ff fe0f 	bl	800abb4 <xTaskCreateStatic>
 800af96:	4603      	mov	r3, r0
 800af98:	4a20      	ldr	r2, [pc, #128]	; (800b01c <vTaskStartScheduler+0xbc>)
 800af9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800af9c:	4b1f      	ldr	r3, [pc, #124]	; (800b01c <vTaskStartScheduler+0xbc>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d002      	beq.n	800afaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800afa4:	2301      	movs	r3, #1
 800afa6:	617b      	str	r3, [r7, #20]
 800afa8:	e001      	b.n	800afae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800afaa:	2300      	movs	r3, #0
 800afac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d102      	bne.n	800afba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800afb4:	f000 fcfc 	bl	800b9b0 <xTimerCreateTimerTask>
 800afb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d116      	bne.n	800afee <vTaskStartScheduler+0x8e>
	__asm volatile
 800afc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc4:	f383 8811 	msr	BASEPRI, r3
 800afc8:	f3bf 8f6f 	isb	sy
 800afcc:	f3bf 8f4f 	dsb	sy
 800afd0:	613b      	str	r3, [r7, #16]
}
 800afd2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800afd4:	4b12      	ldr	r3, [pc, #72]	; (800b020 <vTaskStartScheduler+0xc0>)
 800afd6:	f04f 32ff 	mov.w	r2, #4294967295
 800afda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800afdc:	4b11      	ldr	r3, [pc, #68]	; (800b024 <vTaskStartScheduler+0xc4>)
 800afde:	2201      	movs	r2, #1
 800afe0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800afe2:	4b11      	ldr	r3, [pc, #68]	; (800b028 <vTaskStartScheduler+0xc8>)
 800afe4:	2200      	movs	r2, #0
 800afe6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800afe8:	f001 f8ba 	bl	800c160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800afec:	e00e      	b.n	800b00c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff4:	d10a      	bne.n	800b00c <vTaskStartScheduler+0xac>
	__asm volatile
 800aff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800affa:	f383 8811 	msr	BASEPRI, r3
 800affe:	f3bf 8f6f 	isb	sy
 800b002:	f3bf 8f4f 	dsb	sy
 800b006:	60fb      	str	r3, [r7, #12]
}
 800b008:	bf00      	nop
 800b00a:	e7fe      	b.n	800b00a <vTaskStartScheduler+0xaa>
}
 800b00c:	bf00      	nop
 800b00e:	3718      	adds	r7, #24
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}
 800b014:	0800cd7c 	.word	0x0800cd7c
 800b018:	0800b645 	.word	0x0800b645
 800b01c:	20000c4c 	.word	0x20000c4c
 800b020:	20000c48 	.word	0x20000c48
 800b024:	20000c34 	.word	0x20000c34
 800b028:	20000c2c 	.word	0x20000c2c

0800b02c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b02c:	b480      	push	{r7}
 800b02e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b030:	4b04      	ldr	r3, [pc, #16]	; (800b044 <vTaskSuspendAll+0x18>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	3301      	adds	r3, #1
 800b036:	4a03      	ldr	r2, [pc, #12]	; (800b044 <vTaskSuspendAll+0x18>)
 800b038:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b03a:	bf00      	nop
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr
 800b044:	20000c50 	.word	0x20000c50

0800b048 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b084      	sub	sp, #16
 800b04c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b04e:	2300      	movs	r3, #0
 800b050:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b052:	2300      	movs	r3, #0
 800b054:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b056:	4b42      	ldr	r3, [pc, #264]	; (800b160 <xTaskResumeAll+0x118>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d10a      	bne.n	800b074 <xTaskResumeAll+0x2c>
	__asm volatile
 800b05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b062:	f383 8811 	msr	BASEPRI, r3
 800b066:	f3bf 8f6f 	isb	sy
 800b06a:	f3bf 8f4f 	dsb	sy
 800b06e:	603b      	str	r3, [r7, #0]
}
 800b070:	bf00      	nop
 800b072:	e7fe      	b.n	800b072 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b074:	f001 f916 	bl	800c2a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b078:	4b39      	ldr	r3, [pc, #228]	; (800b160 <xTaskResumeAll+0x118>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	3b01      	subs	r3, #1
 800b07e:	4a38      	ldr	r2, [pc, #224]	; (800b160 <xTaskResumeAll+0x118>)
 800b080:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b082:	4b37      	ldr	r3, [pc, #220]	; (800b160 <xTaskResumeAll+0x118>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d162      	bne.n	800b150 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b08a:	4b36      	ldr	r3, [pc, #216]	; (800b164 <xTaskResumeAll+0x11c>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d05e      	beq.n	800b150 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b092:	e02f      	b.n	800b0f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b094:	4b34      	ldr	r3, [pc, #208]	; (800b168 <xTaskResumeAll+0x120>)
 800b096:	68db      	ldr	r3, [r3, #12]
 800b098:	68db      	ldr	r3, [r3, #12]
 800b09a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	3318      	adds	r3, #24
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f7ff f871 	bl	800a188 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	3304      	adds	r3, #4
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f7ff f86c 	bl	800a188 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0b4:	4b2d      	ldr	r3, [pc, #180]	; (800b16c <xTaskResumeAll+0x124>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d903      	bls.n	800b0c4 <xTaskResumeAll+0x7c>
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c0:	4a2a      	ldr	r2, [pc, #168]	; (800b16c <xTaskResumeAll+0x124>)
 800b0c2:	6013      	str	r3, [r2, #0]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0c8:	4613      	mov	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4413      	add	r3, r2
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	4a27      	ldr	r2, [pc, #156]	; (800b170 <xTaskResumeAll+0x128>)
 800b0d2:	441a      	add	r2, r3
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	3304      	adds	r3, #4
 800b0d8:	4619      	mov	r1, r3
 800b0da:	4610      	mov	r0, r2
 800b0dc:	f7fe fff7 	bl	800a0ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0e4:	4b23      	ldr	r3, [pc, #140]	; (800b174 <xTaskResumeAll+0x12c>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d302      	bcc.n	800b0f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b0ee:	4b22      	ldr	r3, [pc, #136]	; (800b178 <xTaskResumeAll+0x130>)
 800b0f0:	2201      	movs	r2, #1
 800b0f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b0f4:	4b1c      	ldr	r3, [pc, #112]	; (800b168 <xTaskResumeAll+0x120>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d1cb      	bne.n	800b094 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d001      	beq.n	800b106 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b102:	f000 fb55 	bl	800b7b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b106:	4b1d      	ldr	r3, [pc, #116]	; (800b17c <xTaskResumeAll+0x134>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d010      	beq.n	800b134 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b112:	f000 f847 	bl	800b1a4 <xTaskIncrementTick>
 800b116:	4603      	mov	r3, r0
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d002      	beq.n	800b122 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b11c:	4b16      	ldr	r3, [pc, #88]	; (800b178 <xTaskResumeAll+0x130>)
 800b11e:	2201      	movs	r2, #1
 800b120:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	3b01      	subs	r3, #1
 800b126:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d1f1      	bne.n	800b112 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b12e:	4b13      	ldr	r3, [pc, #76]	; (800b17c <xTaskResumeAll+0x134>)
 800b130:	2200      	movs	r2, #0
 800b132:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b134:	4b10      	ldr	r3, [pc, #64]	; (800b178 <xTaskResumeAll+0x130>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d009      	beq.n	800b150 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b13c:	2301      	movs	r3, #1
 800b13e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b140:	4b0f      	ldr	r3, [pc, #60]	; (800b180 <xTaskResumeAll+0x138>)
 800b142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b146:	601a      	str	r2, [r3, #0]
 800b148:	f3bf 8f4f 	dsb	sy
 800b14c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b150:	f001 f8d8 	bl	800c304 <vPortExitCritical>

	return xAlreadyYielded;
 800b154:	68bb      	ldr	r3, [r7, #8]
}
 800b156:	4618      	mov	r0, r3
 800b158:	3710      	adds	r7, #16
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	20000c50 	.word	0x20000c50
 800b164:	20000c28 	.word	0x20000c28
 800b168:	20000be8 	.word	0x20000be8
 800b16c:	20000c30 	.word	0x20000c30
 800b170:	20000758 	.word	0x20000758
 800b174:	20000754 	.word	0x20000754
 800b178:	20000c3c 	.word	0x20000c3c
 800b17c:	20000c38 	.word	0x20000c38
 800b180:	e000ed04 	.word	0xe000ed04

0800b184 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b18a:	4b05      	ldr	r3, [pc, #20]	; (800b1a0 <xTaskGetTickCount+0x1c>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b190:	687b      	ldr	r3, [r7, #4]
}
 800b192:	4618      	mov	r0, r3
 800b194:	370c      	adds	r7, #12
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr
 800b19e:	bf00      	nop
 800b1a0:	20000c2c 	.word	0x20000c2c

0800b1a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b086      	sub	sp, #24
 800b1a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1ae:	4b4f      	ldr	r3, [pc, #316]	; (800b2ec <xTaskIncrementTick+0x148>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	f040 808f 	bne.w	800b2d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b1b8:	4b4d      	ldr	r3, [pc, #308]	; (800b2f0 <xTaskIncrementTick+0x14c>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	3301      	adds	r3, #1
 800b1be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b1c0:	4a4b      	ldr	r2, [pc, #300]	; (800b2f0 <xTaskIncrementTick+0x14c>)
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d120      	bne.n	800b20e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b1cc:	4b49      	ldr	r3, [pc, #292]	; (800b2f4 <xTaskIncrementTick+0x150>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00a      	beq.n	800b1ec <xTaskIncrementTick+0x48>
	__asm volatile
 800b1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1da:	f383 8811 	msr	BASEPRI, r3
 800b1de:	f3bf 8f6f 	isb	sy
 800b1e2:	f3bf 8f4f 	dsb	sy
 800b1e6:	603b      	str	r3, [r7, #0]
}
 800b1e8:	bf00      	nop
 800b1ea:	e7fe      	b.n	800b1ea <xTaskIncrementTick+0x46>
 800b1ec:	4b41      	ldr	r3, [pc, #260]	; (800b2f4 <xTaskIncrementTick+0x150>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	60fb      	str	r3, [r7, #12]
 800b1f2:	4b41      	ldr	r3, [pc, #260]	; (800b2f8 <xTaskIncrementTick+0x154>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4a3f      	ldr	r2, [pc, #252]	; (800b2f4 <xTaskIncrementTick+0x150>)
 800b1f8:	6013      	str	r3, [r2, #0]
 800b1fa:	4a3f      	ldr	r2, [pc, #252]	; (800b2f8 <xTaskIncrementTick+0x154>)
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6013      	str	r3, [r2, #0]
 800b200:	4b3e      	ldr	r3, [pc, #248]	; (800b2fc <xTaskIncrementTick+0x158>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	3301      	adds	r3, #1
 800b206:	4a3d      	ldr	r2, [pc, #244]	; (800b2fc <xTaskIncrementTick+0x158>)
 800b208:	6013      	str	r3, [r2, #0]
 800b20a:	f000 fad1 	bl	800b7b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b20e:	4b3c      	ldr	r3, [pc, #240]	; (800b300 <xTaskIncrementTick+0x15c>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	693a      	ldr	r2, [r7, #16]
 800b214:	429a      	cmp	r2, r3
 800b216:	d349      	bcc.n	800b2ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b218:	4b36      	ldr	r3, [pc, #216]	; (800b2f4 <xTaskIncrementTick+0x150>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d104      	bne.n	800b22c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b222:	4b37      	ldr	r3, [pc, #220]	; (800b300 <xTaskIncrementTick+0x15c>)
 800b224:	f04f 32ff 	mov.w	r2, #4294967295
 800b228:	601a      	str	r2, [r3, #0]
					break;
 800b22a:	e03f      	b.n	800b2ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b22c:	4b31      	ldr	r3, [pc, #196]	; (800b2f4 <xTaskIncrementTick+0x150>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	68db      	ldr	r3, [r3, #12]
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b23c:	693a      	ldr	r2, [r7, #16]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	429a      	cmp	r2, r3
 800b242:	d203      	bcs.n	800b24c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b244:	4a2e      	ldr	r2, [pc, #184]	; (800b300 <xTaskIncrementTick+0x15c>)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b24a:	e02f      	b.n	800b2ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	3304      	adds	r3, #4
 800b250:	4618      	mov	r0, r3
 800b252:	f7fe ff99 	bl	800a188 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d004      	beq.n	800b268 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	3318      	adds	r3, #24
 800b262:	4618      	mov	r0, r3
 800b264:	f7fe ff90 	bl	800a188 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b26c:	4b25      	ldr	r3, [pc, #148]	; (800b304 <xTaskIncrementTick+0x160>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	429a      	cmp	r2, r3
 800b272:	d903      	bls.n	800b27c <xTaskIncrementTick+0xd8>
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b278:	4a22      	ldr	r2, [pc, #136]	; (800b304 <xTaskIncrementTick+0x160>)
 800b27a:	6013      	str	r3, [r2, #0]
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b280:	4613      	mov	r3, r2
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	4413      	add	r3, r2
 800b286:	009b      	lsls	r3, r3, #2
 800b288:	4a1f      	ldr	r2, [pc, #124]	; (800b308 <xTaskIncrementTick+0x164>)
 800b28a:	441a      	add	r2, r3
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	3304      	adds	r3, #4
 800b290:	4619      	mov	r1, r3
 800b292:	4610      	mov	r0, r2
 800b294:	f7fe ff1b 	bl	800a0ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b29c:	4b1b      	ldr	r3, [pc, #108]	; (800b30c <xTaskIncrementTick+0x168>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d3b8      	bcc.n	800b218 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2aa:	e7b5      	b.n	800b218 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b2ac:	4b17      	ldr	r3, [pc, #92]	; (800b30c <xTaskIncrementTick+0x168>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2b2:	4915      	ldr	r1, [pc, #84]	; (800b308 <xTaskIncrementTick+0x164>)
 800b2b4:	4613      	mov	r3, r2
 800b2b6:	009b      	lsls	r3, r3, #2
 800b2b8:	4413      	add	r3, r2
 800b2ba:	009b      	lsls	r3, r3, #2
 800b2bc:	440b      	add	r3, r1
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d901      	bls.n	800b2c8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b2c8:	4b11      	ldr	r3, [pc, #68]	; (800b310 <xTaskIncrementTick+0x16c>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d007      	beq.n	800b2e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	617b      	str	r3, [r7, #20]
 800b2d4:	e004      	b.n	800b2e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b2d6:	4b0f      	ldr	r3, [pc, #60]	; (800b314 <xTaskIncrementTick+0x170>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	4a0d      	ldr	r2, [pc, #52]	; (800b314 <xTaskIncrementTick+0x170>)
 800b2de:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b2e0:	697b      	ldr	r3, [r7, #20]
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3718      	adds	r7, #24
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	20000c50 	.word	0x20000c50
 800b2f0:	20000c2c 	.word	0x20000c2c
 800b2f4:	20000be0 	.word	0x20000be0
 800b2f8:	20000be4 	.word	0x20000be4
 800b2fc:	20000c40 	.word	0x20000c40
 800b300:	20000c48 	.word	0x20000c48
 800b304:	20000c30 	.word	0x20000c30
 800b308:	20000758 	.word	0x20000758
 800b30c:	20000754 	.word	0x20000754
 800b310:	20000c3c 	.word	0x20000c3c
 800b314:	20000c38 	.word	0x20000c38

0800b318 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b318:	b480      	push	{r7}
 800b31a:	b085      	sub	sp, #20
 800b31c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b31e:	4b28      	ldr	r3, [pc, #160]	; (800b3c0 <vTaskSwitchContext+0xa8>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d003      	beq.n	800b32e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b326:	4b27      	ldr	r3, [pc, #156]	; (800b3c4 <vTaskSwitchContext+0xac>)
 800b328:	2201      	movs	r2, #1
 800b32a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b32c:	e041      	b.n	800b3b2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b32e:	4b25      	ldr	r3, [pc, #148]	; (800b3c4 <vTaskSwitchContext+0xac>)
 800b330:	2200      	movs	r2, #0
 800b332:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b334:	4b24      	ldr	r3, [pc, #144]	; (800b3c8 <vTaskSwitchContext+0xb0>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	60fb      	str	r3, [r7, #12]
 800b33a:	e010      	b.n	800b35e <vTaskSwitchContext+0x46>
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d10a      	bne.n	800b358 <vTaskSwitchContext+0x40>
	__asm volatile
 800b342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b346:	f383 8811 	msr	BASEPRI, r3
 800b34a:	f3bf 8f6f 	isb	sy
 800b34e:	f3bf 8f4f 	dsb	sy
 800b352:	607b      	str	r3, [r7, #4]
}
 800b354:	bf00      	nop
 800b356:	e7fe      	b.n	800b356 <vTaskSwitchContext+0x3e>
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	3b01      	subs	r3, #1
 800b35c:	60fb      	str	r3, [r7, #12]
 800b35e:	491b      	ldr	r1, [pc, #108]	; (800b3cc <vTaskSwitchContext+0xb4>)
 800b360:	68fa      	ldr	r2, [r7, #12]
 800b362:	4613      	mov	r3, r2
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	4413      	add	r3, r2
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	440b      	add	r3, r1
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d0e4      	beq.n	800b33c <vTaskSwitchContext+0x24>
 800b372:	68fa      	ldr	r2, [r7, #12]
 800b374:	4613      	mov	r3, r2
 800b376:	009b      	lsls	r3, r3, #2
 800b378:	4413      	add	r3, r2
 800b37a:	009b      	lsls	r3, r3, #2
 800b37c:	4a13      	ldr	r2, [pc, #76]	; (800b3cc <vTaskSwitchContext+0xb4>)
 800b37e:	4413      	add	r3, r2
 800b380:	60bb      	str	r3, [r7, #8]
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	685a      	ldr	r2, [r3, #4]
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	605a      	str	r2, [r3, #4]
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	685a      	ldr	r2, [r3, #4]
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	3308      	adds	r3, #8
 800b394:	429a      	cmp	r2, r3
 800b396:	d104      	bne.n	800b3a2 <vTaskSwitchContext+0x8a>
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	685a      	ldr	r2, [r3, #4]
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	605a      	str	r2, [r3, #4]
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	68db      	ldr	r3, [r3, #12]
 800b3a8:	4a09      	ldr	r2, [pc, #36]	; (800b3d0 <vTaskSwitchContext+0xb8>)
 800b3aa:	6013      	str	r3, [r2, #0]
 800b3ac:	4a06      	ldr	r2, [pc, #24]	; (800b3c8 <vTaskSwitchContext+0xb0>)
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	6013      	str	r3, [r2, #0]
}
 800b3b2:	bf00      	nop
 800b3b4:	3714      	adds	r7, #20
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr
 800b3be:	bf00      	nop
 800b3c0:	20000c50 	.word	0x20000c50
 800b3c4:	20000c3c 	.word	0x20000c3c
 800b3c8:	20000c30 	.word	0x20000c30
 800b3cc:	20000758 	.word	0x20000758
 800b3d0:	20000754 	.word	0x20000754

0800b3d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d10a      	bne.n	800b3fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e8:	f383 8811 	msr	BASEPRI, r3
 800b3ec:	f3bf 8f6f 	isb	sy
 800b3f0:	f3bf 8f4f 	dsb	sy
 800b3f4:	60fb      	str	r3, [r7, #12]
}
 800b3f6:	bf00      	nop
 800b3f8:	e7fe      	b.n	800b3f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b3fa:	4b07      	ldr	r3, [pc, #28]	; (800b418 <vTaskPlaceOnEventList+0x44>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	3318      	adds	r3, #24
 800b400:	4619      	mov	r1, r3
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f7fe fe87 	bl	800a116 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b408:	2101      	movs	r1, #1
 800b40a:	6838      	ldr	r0, [r7, #0]
 800b40c:	f000 fa7c 	bl	800b908 <prvAddCurrentTaskToDelayedList>
}
 800b410:	bf00      	nop
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	20000754 	.word	0x20000754

0800b41c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b086      	sub	sp, #24
 800b420:	af00      	add	r7, sp, #0
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d10a      	bne.n	800b444 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b432:	f383 8811 	msr	BASEPRI, r3
 800b436:	f3bf 8f6f 	isb	sy
 800b43a:	f3bf 8f4f 	dsb	sy
 800b43e:	617b      	str	r3, [r7, #20]
}
 800b440:	bf00      	nop
 800b442:	e7fe      	b.n	800b442 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b444:	4b0a      	ldr	r3, [pc, #40]	; (800b470 <vTaskPlaceOnEventListRestricted+0x54>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	3318      	adds	r3, #24
 800b44a:	4619      	mov	r1, r3
 800b44c:	68f8      	ldr	r0, [r7, #12]
 800b44e:	f7fe fe3e 	bl	800a0ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d002      	beq.n	800b45e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b458:	f04f 33ff 	mov.w	r3, #4294967295
 800b45c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b45e:	6879      	ldr	r1, [r7, #4]
 800b460:	68b8      	ldr	r0, [r7, #8]
 800b462:	f000 fa51 	bl	800b908 <prvAddCurrentTaskToDelayedList>
	}
 800b466:	bf00      	nop
 800b468:	3718      	adds	r7, #24
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	20000754 	.word	0x20000754

0800b474 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b086      	sub	sp, #24
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	68db      	ldr	r3, [r3, #12]
 800b480:	68db      	ldr	r3, [r3, #12]
 800b482:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d10a      	bne.n	800b4a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b48e:	f383 8811 	msr	BASEPRI, r3
 800b492:	f3bf 8f6f 	isb	sy
 800b496:	f3bf 8f4f 	dsb	sy
 800b49a:	60fb      	str	r3, [r7, #12]
}
 800b49c:	bf00      	nop
 800b49e:	e7fe      	b.n	800b49e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	3318      	adds	r3, #24
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7fe fe6f 	bl	800a188 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4aa:	4b1e      	ldr	r3, [pc, #120]	; (800b524 <xTaskRemoveFromEventList+0xb0>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d11d      	bne.n	800b4ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	3304      	adds	r3, #4
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7fe fe66 	bl	800a188 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4c0:	4b19      	ldr	r3, [pc, #100]	; (800b528 <xTaskRemoveFromEventList+0xb4>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d903      	bls.n	800b4d0 <xTaskRemoveFromEventList+0x5c>
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4cc:	4a16      	ldr	r2, [pc, #88]	; (800b528 <xTaskRemoveFromEventList+0xb4>)
 800b4ce:	6013      	str	r3, [r2, #0]
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4d4:	4613      	mov	r3, r2
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	4413      	add	r3, r2
 800b4da:	009b      	lsls	r3, r3, #2
 800b4dc:	4a13      	ldr	r2, [pc, #76]	; (800b52c <xTaskRemoveFromEventList+0xb8>)
 800b4de:	441a      	add	r2, r3
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	3304      	adds	r3, #4
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	4610      	mov	r0, r2
 800b4e8:	f7fe fdf1 	bl	800a0ce <vListInsertEnd>
 800b4ec:	e005      	b.n	800b4fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	3318      	adds	r3, #24
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	480e      	ldr	r0, [pc, #56]	; (800b530 <xTaskRemoveFromEventList+0xbc>)
 800b4f6:	f7fe fdea 	bl	800a0ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4fe:	4b0d      	ldr	r3, [pc, #52]	; (800b534 <xTaskRemoveFromEventList+0xc0>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b504:	429a      	cmp	r2, r3
 800b506:	d905      	bls.n	800b514 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b508:	2301      	movs	r3, #1
 800b50a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b50c:	4b0a      	ldr	r3, [pc, #40]	; (800b538 <xTaskRemoveFromEventList+0xc4>)
 800b50e:	2201      	movs	r2, #1
 800b510:	601a      	str	r2, [r3, #0]
 800b512:	e001      	b.n	800b518 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b514:	2300      	movs	r3, #0
 800b516:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b518:	697b      	ldr	r3, [r7, #20]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3718      	adds	r7, #24
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	20000c50 	.word	0x20000c50
 800b528:	20000c30 	.word	0x20000c30
 800b52c:	20000758 	.word	0x20000758
 800b530:	20000be8 	.word	0x20000be8
 800b534:	20000754 	.word	0x20000754
 800b538:	20000c3c 	.word	0x20000c3c

0800b53c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b53c:	b480      	push	{r7}
 800b53e:	b083      	sub	sp, #12
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b544:	4b06      	ldr	r3, [pc, #24]	; (800b560 <vTaskInternalSetTimeOutState+0x24>)
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b54c:	4b05      	ldr	r3, [pc, #20]	; (800b564 <vTaskInternalSetTimeOutState+0x28>)
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	605a      	str	r2, [r3, #4]
}
 800b554:	bf00      	nop
 800b556:	370c      	adds	r7, #12
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr
 800b560:	20000c40 	.word	0x20000c40
 800b564:	20000c2c 	.word	0x20000c2c

0800b568 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b088      	sub	sp, #32
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d10a      	bne.n	800b58e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57c:	f383 8811 	msr	BASEPRI, r3
 800b580:	f3bf 8f6f 	isb	sy
 800b584:	f3bf 8f4f 	dsb	sy
 800b588:	613b      	str	r3, [r7, #16]
}
 800b58a:	bf00      	nop
 800b58c:	e7fe      	b.n	800b58c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d10a      	bne.n	800b5aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b598:	f383 8811 	msr	BASEPRI, r3
 800b59c:	f3bf 8f6f 	isb	sy
 800b5a0:	f3bf 8f4f 	dsb	sy
 800b5a4:	60fb      	str	r3, [r7, #12]
}
 800b5a6:	bf00      	nop
 800b5a8:	e7fe      	b.n	800b5a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b5aa:	f000 fe7b 	bl	800c2a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b5ae:	4b1d      	ldr	r3, [pc, #116]	; (800b624 <xTaskCheckForTimeOut+0xbc>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	69ba      	ldr	r2, [r7, #24]
 800b5ba:	1ad3      	subs	r3, r2, r3
 800b5bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5c6:	d102      	bne.n	800b5ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	61fb      	str	r3, [r7, #28]
 800b5cc:	e023      	b.n	800b616 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681a      	ldr	r2, [r3, #0]
 800b5d2:	4b15      	ldr	r3, [pc, #84]	; (800b628 <xTaskCheckForTimeOut+0xc0>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d007      	beq.n	800b5ea <xTaskCheckForTimeOut+0x82>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	69ba      	ldr	r2, [r7, #24]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d302      	bcc.n	800b5ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	61fb      	str	r3, [r7, #28]
 800b5e8:	e015      	b.n	800b616 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	697a      	ldr	r2, [r7, #20]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d20b      	bcs.n	800b60c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	681a      	ldr	r2, [r3, #0]
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	1ad2      	subs	r2, r2, r3
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f7ff ff9b 	bl	800b53c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b606:	2300      	movs	r3, #0
 800b608:	61fb      	str	r3, [r7, #28]
 800b60a:	e004      	b.n	800b616 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	2200      	movs	r2, #0
 800b610:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b612:	2301      	movs	r3, #1
 800b614:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b616:	f000 fe75 	bl	800c304 <vPortExitCritical>

	return xReturn;
 800b61a:	69fb      	ldr	r3, [r7, #28]
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3720      	adds	r7, #32
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}
 800b624:	20000c2c 	.word	0x20000c2c
 800b628:	20000c40 	.word	0x20000c40

0800b62c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b62c:	b480      	push	{r7}
 800b62e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b630:	4b03      	ldr	r3, [pc, #12]	; (800b640 <vTaskMissedYield+0x14>)
 800b632:	2201      	movs	r2, #1
 800b634:	601a      	str	r2, [r3, #0]
}
 800b636:	bf00      	nop
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr
 800b640:	20000c3c 	.word	0x20000c3c

0800b644 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b64c:	f000 f852 	bl	800b6f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b650:	4b06      	ldr	r3, [pc, #24]	; (800b66c <prvIdleTask+0x28>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	2b01      	cmp	r3, #1
 800b656:	d9f9      	bls.n	800b64c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b658:	4b05      	ldr	r3, [pc, #20]	; (800b670 <prvIdleTask+0x2c>)
 800b65a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b65e:	601a      	str	r2, [r3, #0]
 800b660:	f3bf 8f4f 	dsb	sy
 800b664:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b668:	e7f0      	b.n	800b64c <prvIdleTask+0x8>
 800b66a:	bf00      	nop
 800b66c:	20000758 	.word	0x20000758
 800b670:	e000ed04 	.word	0xe000ed04

0800b674 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b082      	sub	sp, #8
 800b678:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b67a:	2300      	movs	r3, #0
 800b67c:	607b      	str	r3, [r7, #4]
 800b67e:	e00c      	b.n	800b69a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	4613      	mov	r3, r2
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	4413      	add	r3, r2
 800b688:	009b      	lsls	r3, r3, #2
 800b68a:	4a12      	ldr	r2, [pc, #72]	; (800b6d4 <prvInitialiseTaskLists+0x60>)
 800b68c:	4413      	add	r3, r2
 800b68e:	4618      	mov	r0, r3
 800b690:	f7fe fcf0 	bl	800a074 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	3301      	adds	r3, #1
 800b698:	607b      	str	r3, [r7, #4]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2b37      	cmp	r3, #55	; 0x37
 800b69e:	d9ef      	bls.n	800b680 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b6a0:	480d      	ldr	r0, [pc, #52]	; (800b6d8 <prvInitialiseTaskLists+0x64>)
 800b6a2:	f7fe fce7 	bl	800a074 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b6a6:	480d      	ldr	r0, [pc, #52]	; (800b6dc <prvInitialiseTaskLists+0x68>)
 800b6a8:	f7fe fce4 	bl	800a074 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b6ac:	480c      	ldr	r0, [pc, #48]	; (800b6e0 <prvInitialiseTaskLists+0x6c>)
 800b6ae:	f7fe fce1 	bl	800a074 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b6b2:	480c      	ldr	r0, [pc, #48]	; (800b6e4 <prvInitialiseTaskLists+0x70>)
 800b6b4:	f7fe fcde 	bl	800a074 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b6b8:	480b      	ldr	r0, [pc, #44]	; (800b6e8 <prvInitialiseTaskLists+0x74>)
 800b6ba:	f7fe fcdb 	bl	800a074 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b6be:	4b0b      	ldr	r3, [pc, #44]	; (800b6ec <prvInitialiseTaskLists+0x78>)
 800b6c0:	4a05      	ldr	r2, [pc, #20]	; (800b6d8 <prvInitialiseTaskLists+0x64>)
 800b6c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b6c4:	4b0a      	ldr	r3, [pc, #40]	; (800b6f0 <prvInitialiseTaskLists+0x7c>)
 800b6c6:	4a05      	ldr	r2, [pc, #20]	; (800b6dc <prvInitialiseTaskLists+0x68>)
 800b6c8:	601a      	str	r2, [r3, #0]
}
 800b6ca:	bf00      	nop
 800b6cc:	3708      	adds	r7, #8
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
 800b6d2:	bf00      	nop
 800b6d4:	20000758 	.word	0x20000758
 800b6d8:	20000bb8 	.word	0x20000bb8
 800b6dc:	20000bcc 	.word	0x20000bcc
 800b6e0:	20000be8 	.word	0x20000be8
 800b6e4:	20000bfc 	.word	0x20000bfc
 800b6e8:	20000c14 	.word	0x20000c14
 800b6ec:	20000be0 	.word	0x20000be0
 800b6f0:	20000be4 	.word	0x20000be4

0800b6f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b082      	sub	sp, #8
 800b6f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b6fa:	e019      	b.n	800b730 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b6fc:	f000 fdd2 	bl	800c2a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b700:	4b10      	ldr	r3, [pc, #64]	; (800b744 <prvCheckTasksWaitingTermination+0x50>)
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	68db      	ldr	r3, [r3, #12]
 800b706:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	3304      	adds	r3, #4
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7fe fd3b 	bl	800a188 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b712:	4b0d      	ldr	r3, [pc, #52]	; (800b748 <prvCheckTasksWaitingTermination+0x54>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	3b01      	subs	r3, #1
 800b718:	4a0b      	ldr	r2, [pc, #44]	; (800b748 <prvCheckTasksWaitingTermination+0x54>)
 800b71a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b71c:	4b0b      	ldr	r3, [pc, #44]	; (800b74c <prvCheckTasksWaitingTermination+0x58>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	3b01      	subs	r3, #1
 800b722:	4a0a      	ldr	r2, [pc, #40]	; (800b74c <prvCheckTasksWaitingTermination+0x58>)
 800b724:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b726:	f000 fded 	bl	800c304 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 f810 	bl	800b750 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b730:	4b06      	ldr	r3, [pc, #24]	; (800b74c <prvCheckTasksWaitingTermination+0x58>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d1e1      	bne.n	800b6fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b738:	bf00      	nop
 800b73a:	bf00      	nop
 800b73c:	3708      	adds	r7, #8
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	20000bfc 	.word	0x20000bfc
 800b748:	20000c28 	.word	0x20000c28
 800b74c:	20000c10 	.word	0x20000c10

0800b750 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d108      	bne.n	800b774 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b766:	4618      	mov	r0, r3
 800b768:	f000 ff8a 	bl	800c680 <vPortFree>
				vPortFree( pxTCB );
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 ff87 	bl	800c680 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b772:	e018      	b.n	800b7a6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d103      	bne.n	800b786 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 ff7e 	bl	800c680 <vPortFree>
	}
 800b784:	e00f      	b.n	800b7a6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b78c:	2b02      	cmp	r3, #2
 800b78e:	d00a      	beq.n	800b7a6 <prvDeleteTCB+0x56>
	__asm volatile
 800b790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b794:	f383 8811 	msr	BASEPRI, r3
 800b798:	f3bf 8f6f 	isb	sy
 800b79c:	f3bf 8f4f 	dsb	sy
 800b7a0:	60fb      	str	r3, [r7, #12]
}
 800b7a2:	bf00      	nop
 800b7a4:	e7fe      	b.n	800b7a4 <prvDeleteTCB+0x54>
	}
 800b7a6:	bf00      	nop
 800b7a8:	3710      	adds	r7, #16
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
	...

0800b7b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b083      	sub	sp, #12
 800b7b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7b6:	4b0c      	ldr	r3, [pc, #48]	; (800b7e8 <prvResetNextTaskUnblockTime+0x38>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d104      	bne.n	800b7ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b7c0:	4b0a      	ldr	r3, [pc, #40]	; (800b7ec <prvResetNextTaskUnblockTime+0x3c>)
 800b7c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b7c8:	e008      	b.n	800b7dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7ca:	4b07      	ldr	r3, [pc, #28]	; (800b7e8 <prvResetNextTaskUnblockTime+0x38>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	68db      	ldr	r3, [r3, #12]
 800b7d0:	68db      	ldr	r3, [r3, #12]
 800b7d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	4a04      	ldr	r2, [pc, #16]	; (800b7ec <prvResetNextTaskUnblockTime+0x3c>)
 800b7da:	6013      	str	r3, [r2, #0]
}
 800b7dc:	bf00      	nop
 800b7de:	370c      	adds	r7, #12
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr
 800b7e8:	20000be0 	.word	0x20000be0
 800b7ec:	20000c48 	.word	0x20000c48

0800b7f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b083      	sub	sp, #12
 800b7f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b7f6:	4b0b      	ldr	r3, [pc, #44]	; (800b824 <xTaskGetSchedulerState+0x34>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d102      	bne.n	800b804 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b7fe:	2301      	movs	r3, #1
 800b800:	607b      	str	r3, [r7, #4]
 800b802:	e008      	b.n	800b816 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b804:	4b08      	ldr	r3, [pc, #32]	; (800b828 <xTaskGetSchedulerState+0x38>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d102      	bne.n	800b812 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b80c:	2302      	movs	r3, #2
 800b80e:	607b      	str	r3, [r7, #4]
 800b810:	e001      	b.n	800b816 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b812:	2300      	movs	r3, #0
 800b814:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b816:	687b      	ldr	r3, [r7, #4]
	}
 800b818:	4618      	mov	r0, r3
 800b81a:	370c      	adds	r7, #12
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr
 800b824:	20000c34 	.word	0x20000c34
 800b828:	20000c50 	.word	0x20000c50

0800b82c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b086      	sub	sp, #24
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b838:	2300      	movs	r3, #0
 800b83a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d056      	beq.n	800b8f0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b842:	4b2e      	ldr	r3, [pc, #184]	; (800b8fc <xTaskPriorityDisinherit+0xd0>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	693a      	ldr	r2, [r7, #16]
 800b848:	429a      	cmp	r2, r3
 800b84a:	d00a      	beq.n	800b862 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b850:	f383 8811 	msr	BASEPRI, r3
 800b854:	f3bf 8f6f 	isb	sy
 800b858:	f3bf 8f4f 	dsb	sy
 800b85c:	60fb      	str	r3, [r7, #12]
}
 800b85e:	bf00      	nop
 800b860:	e7fe      	b.n	800b860 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b866:	2b00      	cmp	r3, #0
 800b868:	d10a      	bne.n	800b880 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b86e:	f383 8811 	msr	BASEPRI, r3
 800b872:	f3bf 8f6f 	isb	sy
 800b876:	f3bf 8f4f 	dsb	sy
 800b87a:	60bb      	str	r3, [r7, #8]
}
 800b87c:	bf00      	nop
 800b87e:	e7fe      	b.n	800b87e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b884:	1e5a      	subs	r2, r3, #1
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b892:	429a      	cmp	r2, r3
 800b894:	d02c      	beq.n	800b8f0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d128      	bne.n	800b8f0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	3304      	adds	r3, #4
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7fe fc70 	bl	800a188 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8c0:	4b0f      	ldr	r3, [pc, #60]	; (800b900 <xTaskPriorityDisinherit+0xd4>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d903      	bls.n	800b8d0 <xTaskPriorityDisinherit+0xa4>
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8cc:	4a0c      	ldr	r2, [pc, #48]	; (800b900 <xTaskPriorityDisinherit+0xd4>)
 800b8ce:	6013      	str	r3, [r2, #0]
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8d4:	4613      	mov	r3, r2
 800b8d6:	009b      	lsls	r3, r3, #2
 800b8d8:	4413      	add	r3, r2
 800b8da:	009b      	lsls	r3, r3, #2
 800b8dc:	4a09      	ldr	r2, [pc, #36]	; (800b904 <xTaskPriorityDisinherit+0xd8>)
 800b8de:	441a      	add	r2, r3
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	3304      	adds	r3, #4
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	4610      	mov	r0, r2
 800b8e8:	f7fe fbf1 	bl	800a0ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b8f0:	697b      	ldr	r3, [r7, #20]
	}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3718      	adds	r7, #24
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	bf00      	nop
 800b8fc:	20000754 	.word	0x20000754
 800b900:	20000c30 	.word	0x20000c30
 800b904:	20000758 	.word	0x20000758

0800b908 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b912:	4b21      	ldr	r3, [pc, #132]	; (800b998 <prvAddCurrentTaskToDelayedList+0x90>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b918:	4b20      	ldr	r3, [pc, #128]	; (800b99c <prvAddCurrentTaskToDelayedList+0x94>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	3304      	adds	r3, #4
 800b91e:	4618      	mov	r0, r3
 800b920:	f7fe fc32 	bl	800a188 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b92a:	d10a      	bne.n	800b942 <prvAddCurrentTaskToDelayedList+0x3a>
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d007      	beq.n	800b942 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b932:	4b1a      	ldr	r3, [pc, #104]	; (800b99c <prvAddCurrentTaskToDelayedList+0x94>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	3304      	adds	r3, #4
 800b938:	4619      	mov	r1, r3
 800b93a:	4819      	ldr	r0, [pc, #100]	; (800b9a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800b93c:	f7fe fbc7 	bl	800a0ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b940:	e026      	b.n	800b990 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b942:	68fa      	ldr	r2, [r7, #12]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	4413      	add	r3, r2
 800b948:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b94a:	4b14      	ldr	r3, [pc, #80]	; (800b99c <prvAddCurrentTaskToDelayedList+0x94>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	68ba      	ldr	r2, [r7, #8]
 800b950:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b952:	68ba      	ldr	r2, [r7, #8]
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	429a      	cmp	r2, r3
 800b958:	d209      	bcs.n	800b96e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b95a:	4b12      	ldr	r3, [pc, #72]	; (800b9a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b95c:	681a      	ldr	r2, [r3, #0]
 800b95e:	4b0f      	ldr	r3, [pc, #60]	; (800b99c <prvAddCurrentTaskToDelayedList+0x94>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	3304      	adds	r3, #4
 800b964:	4619      	mov	r1, r3
 800b966:	4610      	mov	r0, r2
 800b968:	f7fe fbd5 	bl	800a116 <vListInsert>
}
 800b96c:	e010      	b.n	800b990 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b96e:	4b0e      	ldr	r3, [pc, #56]	; (800b9a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	4b0a      	ldr	r3, [pc, #40]	; (800b99c <prvAddCurrentTaskToDelayedList+0x94>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	3304      	adds	r3, #4
 800b978:	4619      	mov	r1, r3
 800b97a:	4610      	mov	r0, r2
 800b97c:	f7fe fbcb 	bl	800a116 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b980:	4b0a      	ldr	r3, [pc, #40]	; (800b9ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	68ba      	ldr	r2, [r7, #8]
 800b986:	429a      	cmp	r2, r3
 800b988:	d202      	bcs.n	800b990 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b98a:	4a08      	ldr	r2, [pc, #32]	; (800b9ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	6013      	str	r3, [r2, #0]
}
 800b990:	bf00      	nop
 800b992:	3710      	adds	r7, #16
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}
 800b998:	20000c2c 	.word	0x20000c2c
 800b99c:	20000754 	.word	0x20000754
 800b9a0:	20000c14 	.word	0x20000c14
 800b9a4:	20000be4 	.word	0x20000be4
 800b9a8:	20000be0 	.word	0x20000be0
 800b9ac:	20000c48 	.word	0x20000c48

0800b9b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b08a      	sub	sp, #40	; 0x28
 800b9b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b9ba:	f000 fb07 	bl	800bfcc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b9be:	4b1c      	ldr	r3, [pc, #112]	; (800ba30 <xTimerCreateTimerTask+0x80>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d021      	beq.n	800ba0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b9ce:	1d3a      	adds	r2, r7, #4
 800b9d0:	f107 0108 	add.w	r1, r7, #8
 800b9d4:	f107 030c 	add.w	r3, r7, #12
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7fe fb31 	bl	800a040 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b9de:	6879      	ldr	r1, [r7, #4]
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	68fa      	ldr	r2, [r7, #12]
 800b9e4:	9202      	str	r2, [sp, #8]
 800b9e6:	9301      	str	r3, [sp, #4]
 800b9e8:	2302      	movs	r3, #2
 800b9ea:	9300      	str	r3, [sp, #0]
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	460a      	mov	r2, r1
 800b9f0:	4910      	ldr	r1, [pc, #64]	; (800ba34 <xTimerCreateTimerTask+0x84>)
 800b9f2:	4811      	ldr	r0, [pc, #68]	; (800ba38 <xTimerCreateTimerTask+0x88>)
 800b9f4:	f7ff f8de 	bl	800abb4 <xTaskCreateStatic>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	4a10      	ldr	r2, [pc, #64]	; (800ba3c <xTimerCreateTimerTask+0x8c>)
 800b9fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b9fe:	4b0f      	ldr	r3, [pc, #60]	; (800ba3c <xTimerCreateTimerTask+0x8c>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d001      	beq.n	800ba0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ba06:	2301      	movs	r3, #1
 800ba08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d10a      	bne.n	800ba26 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ba10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba14:	f383 8811 	msr	BASEPRI, r3
 800ba18:	f3bf 8f6f 	isb	sy
 800ba1c:	f3bf 8f4f 	dsb	sy
 800ba20:	613b      	str	r3, [r7, #16]
}
 800ba22:	bf00      	nop
 800ba24:	e7fe      	b.n	800ba24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ba26:	697b      	ldr	r3, [r7, #20]
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3718      	adds	r7, #24
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}
 800ba30:	20000c84 	.word	0x20000c84
 800ba34:	0800cd84 	.word	0x0800cd84
 800ba38:	0800bb75 	.word	0x0800bb75
 800ba3c:	20000c88 	.word	0x20000c88

0800ba40 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b08a      	sub	sp, #40	; 0x28
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	607a      	str	r2, [r7, #4]
 800ba4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d10a      	bne.n	800ba6e <xTimerGenericCommand+0x2e>
	__asm volatile
 800ba58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5c:	f383 8811 	msr	BASEPRI, r3
 800ba60:	f3bf 8f6f 	isb	sy
 800ba64:	f3bf 8f4f 	dsb	sy
 800ba68:	623b      	str	r3, [r7, #32]
}
 800ba6a:	bf00      	nop
 800ba6c:	e7fe      	b.n	800ba6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ba6e:	4b1a      	ldr	r3, [pc, #104]	; (800bad8 <xTimerGenericCommand+0x98>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d02a      	beq.n	800bacc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	2b05      	cmp	r3, #5
 800ba86:	dc18      	bgt.n	800baba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ba88:	f7ff feb2 	bl	800b7f0 <xTaskGetSchedulerState>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	2b02      	cmp	r3, #2
 800ba90:	d109      	bne.n	800baa6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ba92:	4b11      	ldr	r3, [pc, #68]	; (800bad8 <xTimerGenericCommand+0x98>)
 800ba94:	6818      	ldr	r0, [r3, #0]
 800ba96:	f107 0110 	add.w	r1, r7, #16
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba9e:	f7fe fca1 	bl	800a3e4 <xQueueGenericSend>
 800baa2:	6278      	str	r0, [r7, #36]	; 0x24
 800baa4:	e012      	b.n	800bacc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800baa6:	4b0c      	ldr	r3, [pc, #48]	; (800bad8 <xTimerGenericCommand+0x98>)
 800baa8:	6818      	ldr	r0, [r3, #0]
 800baaa:	f107 0110 	add.w	r1, r7, #16
 800baae:	2300      	movs	r3, #0
 800bab0:	2200      	movs	r2, #0
 800bab2:	f7fe fc97 	bl	800a3e4 <xQueueGenericSend>
 800bab6:	6278      	str	r0, [r7, #36]	; 0x24
 800bab8:	e008      	b.n	800bacc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800baba:	4b07      	ldr	r3, [pc, #28]	; (800bad8 <xTimerGenericCommand+0x98>)
 800babc:	6818      	ldr	r0, [r3, #0]
 800babe:	f107 0110 	add.w	r1, r7, #16
 800bac2:	2300      	movs	r3, #0
 800bac4:	683a      	ldr	r2, [r7, #0]
 800bac6:	f7fe fd8b 	bl	800a5e0 <xQueueGenericSendFromISR>
 800baca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3728      	adds	r7, #40	; 0x28
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop
 800bad8:	20000c84 	.word	0x20000c84

0800badc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b088      	sub	sp, #32
 800bae0:	af02      	add	r7, sp, #8
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bae6:	4b22      	ldr	r3, [pc, #136]	; (800bb70 <prvProcessExpiredTimer+0x94>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	68db      	ldr	r3, [r3, #12]
 800baec:	68db      	ldr	r3, [r3, #12]
 800baee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	3304      	adds	r3, #4
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7fe fb47 	bl	800a188 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb00:	f003 0304 	and.w	r3, r3, #4
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d022      	beq.n	800bb4e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	699a      	ldr	r2, [r3, #24]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	18d1      	adds	r1, r2, r3
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	683a      	ldr	r2, [r7, #0]
 800bb14:	6978      	ldr	r0, [r7, #20]
 800bb16:	f000 f8d1 	bl	800bcbc <prvInsertTimerInActiveList>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d01f      	beq.n	800bb60 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb20:	2300      	movs	r3, #0
 800bb22:	9300      	str	r3, [sp, #0]
 800bb24:	2300      	movs	r3, #0
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	2100      	movs	r1, #0
 800bb2a:	6978      	ldr	r0, [r7, #20]
 800bb2c:	f7ff ff88 	bl	800ba40 <xTimerGenericCommand>
 800bb30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d113      	bne.n	800bb60 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bb38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb3c:	f383 8811 	msr	BASEPRI, r3
 800bb40:	f3bf 8f6f 	isb	sy
 800bb44:	f3bf 8f4f 	dsb	sy
 800bb48:	60fb      	str	r3, [r7, #12]
}
 800bb4a:	bf00      	nop
 800bb4c:	e7fe      	b.n	800bb4c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb54:	f023 0301 	bic.w	r3, r3, #1
 800bb58:	b2da      	uxtb	r2, r3
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	6a1b      	ldr	r3, [r3, #32]
 800bb64:	6978      	ldr	r0, [r7, #20]
 800bb66:	4798      	blx	r3
}
 800bb68:	bf00      	nop
 800bb6a:	3718      	adds	r7, #24
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	20000c7c 	.word	0x20000c7c

0800bb74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bb7c:	f107 0308 	add.w	r3, r7, #8
 800bb80:	4618      	mov	r0, r3
 800bb82:	f000 f857 	bl	800bc34 <prvGetNextExpireTime>
 800bb86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	68f8      	ldr	r0, [r7, #12]
 800bb8e:	f000 f803 	bl	800bb98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bb92:	f000 f8d5 	bl	800bd40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bb96:	e7f1      	b.n	800bb7c <prvTimerTask+0x8>

0800bb98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bba2:	f7ff fa43 	bl	800b02c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bba6:	f107 0308 	add.w	r3, r7, #8
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f000 f866 	bl	800bc7c <prvSampleTimeNow>
 800bbb0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d130      	bne.n	800bc1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d10a      	bne.n	800bbd4 <prvProcessTimerOrBlockTask+0x3c>
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d806      	bhi.n	800bbd4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bbc6:	f7ff fa3f 	bl	800b048 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bbca:	68f9      	ldr	r1, [r7, #12]
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f7ff ff85 	bl	800badc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bbd2:	e024      	b.n	800bc1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d008      	beq.n	800bbec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bbda:	4b13      	ldr	r3, [pc, #76]	; (800bc28 <prvProcessTimerOrBlockTask+0x90>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d101      	bne.n	800bbe8 <prvProcessTimerOrBlockTask+0x50>
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	e000      	b.n	800bbea <prvProcessTimerOrBlockTask+0x52>
 800bbe8:	2300      	movs	r3, #0
 800bbea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bbec:	4b0f      	ldr	r3, [pc, #60]	; (800bc2c <prvProcessTimerOrBlockTask+0x94>)
 800bbee:	6818      	ldr	r0, [r3, #0]
 800bbf0:	687a      	ldr	r2, [r7, #4]
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	1ad3      	subs	r3, r2, r3
 800bbf6:	683a      	ldr	r2, [r7, #0]
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	f7fe ffa7 	bl	800ab4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bbfe:	f7ff fa23 	bl	800b048 <xTaskResumeAll>
 800bc02:	4603      	mov	r3, r0
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d10a      	bne.n	800bc1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bc08:	4b09      	ldr	r3, [pc, #36]	; (800bc30 <prvProcessTimerOrBlockTask+0x98>)
 800bc0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc0e:	601a      	str	r2, [r3, #0]
 800bc10:	f3bf 8f4f 	dsb	sy
 800bc14:	f3bf 8f6f 	isb	sy
}
 800bc18:	e001      	b.n	800bc1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bc1a:	f7ff fa15 	bl	800b048 <xTaskResumeAll>
}
 800bc1e:	bf00      	nop
 800bc20:	3710      	adds	r7, #16
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
 800bc26:	bf00      	nop
 800bc28:	20000c80 	.word	0x20000c80
 800bc2c:	20000c84 	.word	0x20000c84
 800bc30:	e000ed04 	.word	0xe000ed04

0800bc34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bc34:	b480      	push	{r7}
 800bc36:	b085      	sub	sp, #20
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bc3c:	4b0e      	ldr	r3, [pc, #56]	; (800bc78 <prvGetNextExpireTime+0x44>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d101      	bne.n	800bc4a <prvGetNextExpireTime+0x16>
 800bc46:	2201      	movs	r2, #1
 800bc48:	e000      	b.n	800bc4c <prvGetNextExpireTime+0x18>
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d105      	bne.n	800bc64 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc58:	4b07      	ldr	r3, [pc, #28]	; (800bc78 <prvGetNextExpireTime+0x44>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	68db      	ldr	r3, [r3, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	60fb      	str	r3, [r7, #12]
 800bc62:	e001      	b.n	800bc68 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bc64:	2300      	movs	r3, #0
 800bc66:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bc68:	68fb      	ldr	r3, [r7, #12]
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3714      	adds	r7, #20
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr
 800bc76:	bf00      	nop
 800bc78:	20000c7c 	.word	0x20000c7c

0800bc7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bc84:	f7ff fa7e 	bl	800b184 <xTaskGetTickCount>
 800bc88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bc8a:	4b0b      	ldr	r3, [pc, #44]	; (800bcb8 <prvSampleTimeNow+0x3c>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	429a      	cmp	r2, r3
 800bc92:	d205      	bcs.n	800bca0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bc94:	f000 f936 	bl	800bf04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	601a      	str	r2, [r3, #0]
 800bc9e:	e002      	b.n	800bca6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2200      	movs	r2, #0
 800bca4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bca6:	4a04      	ldr	r2, [pc, #16]	; (800bcb8 <prvSampleTimeNow+0x3c>)
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bcac:	68fb      	ldr	r3, [r7, #12]
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3710      	adds	r7, #16
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	20000c8c 	.word	0x20000c8c

0800bcbc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b086      	sub	sp, #24
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	607a      	str	r2, [r7, #4]
 800bcc8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bcca:	2300      	movs	r3, #0
 800bccc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	68ba      	ldr	r2, [r7, #8]
 800bcd2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	68fa      	ldr	r2, [r7, #12]
 800bcd8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bcda:	68ba      	ldr	r2, [r7, #8]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d812      	bhi.n	800bd08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	1ad2      	subs	r2, r2, r3
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	699b      	ldr	r3, [r3, #24]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d302      	bcc.n	800bcf6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	617b      	str	r3, [r7, #20]
 800bcf4:	e01b      	b.n	800bd2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bcf6:	4b10      	ldr	r3, [pc, #64]	; (800bd38 <prvInsertTimerInActiveList+0x7c>)
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	3304      	adds	r3, #4
 800bcfe:	4619      	mov	r1, r3
 800bd00:	4610      	mov	r0, r2
 800bd02:	f7fe fa08 	bl	800a116 <vListInsert>
 800bd06:	e012      	b.n	800bd2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d206      	bcs.n	800bd1e <prvInsertTimerInActiveList+0x62>
 800bd10:	68ba      	ldr	r2, [r7, #8]
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d302      	bcc.n	800bd1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	617b      	str	r3, [r7, #20]
 800bd1c:	e007      	b.n	800bd2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd1e:	4b07      	ldr	r3, [pc, #28]	; (800bd3c <prvInsertTimerInActiveList+0x80>)
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	3304      	adds	r3, #4
 800bd26:	4619      	mov	r1, r3
 800bd28:	4610      	mov	r0, r2
 800bd2a:	f7fe f9f4 	bl	800a116 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bd2e:	697b      	ldr	r3, [r7, #20]
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3718      	adds	r7, #24
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	20000c80 	.word	0x20000c80
 800bd3c:	20000c7c 	.word	0x20000c7c

0800bd40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b08e      	sub	sp, #56	; 0x38
 800bd44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd46:	e0ca      	b.n	800bede <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	da18      	bge.n	800bd80 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bd4e:	1d3b      	adds	r3, r7, #4
 800bd50:	3304      	adds	r3, #4
 800bd52:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d10a      	bne.n	800bd70 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5e:	f383 8811 	msr	BASEPRI, r3
 800bd62:	f3bf 8f6f 	isb	sy
 800bd66:	f3bf 8f4f 	dsb	sy
 800bd6a:	61fb      	str	r3, [r7, #28]
}
 800bd6c:	bf00      	nop
 800bd6e:	e7fe      	b.n	800bd6e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd76:	6850      	ldr	r0, [r2, #4]
 800bd78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd7a:	6892      	ldr	r2, [r2, #8]
 800bd7c:	4611      	mov	r1, r2
 800bd7e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	f2c0 80aa 	blt.w	800bedc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8e:	695b      	ldr	r3, [r3, #20]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d004      	beq.n	800bd9e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd96:	3304      	adds	r3, #4
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7fe f9f5 	bl	800a188 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd9e:	463b      	mov	r3, r7
 800bda0:	4618      	mov	r0, r3
 800bda2:	f7ff ff6b 	bl	800bc7c <prvSampleTimeNow>
 800bda6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2b09      	cmp	r3, #9
 800bdac:	f200 8097 	bhi.w	800bede <prvProcessReceivedCommands+0x19e>
 800bdb0:	a201      	add	r2, pc, #4	; (adr r2, 800bdb8 <prvProcessReceivedCommands+0x78>)
 800bdb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdb6:	bf00      	nop
 800bdb8:	0800bde1 	.word	0x0800bde1
 800bdbc:	0800bde1 	.word	0x0800bde1
 800bdc0:	0800bde1 	.word	0x0800bde1
 800bdc4:	0800be55 	.word	0x0800be55
 800bdc8:	0800be69 	.word	0x0800be69
 800bdcc:	0800beb3 	.word	0x0800beb3
 800bdd0:	0800bde1 	.word	0x0800bde1
 800bdd4:	0800bde1 	.word	0x0800bde1
 800bdd8:	0800be55 	.word	0x0800be55
 800bddc:	0800be69 	.word	0x0800be69
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bde0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bde6:	f043 0301 	orr.w	r3, r3, #1
 800bdea:	b2da      	uxtb	r2, r3
 800bdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bdf2:	68ba      	ldr	r2, [r7, #8]
 800bdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf6:	699b      	ldr	r3, [r3, #24]
 800bdf8:	18d1      	adds	r1, r2, r3
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be00:	f7ff ff5c 	bl	800bcbc <prvInsertTimerInActiveList>
 800be04:	4603      	mov	r3, r0
 800be06:	2b00      	cmp	r3, #0
 800be08:	d069      	beq.n	800bede <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be0c:	6a1b      	ldr	r3, [r3, #32]
 800be0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be10:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be18:	f003 0304 	and.w	r3, r3, #4
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d05e      	beq.n	800bede <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800be20:	68ba      	ldr	r2, [r7, #8]
 800be22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be24:	699b      	ldr	r3, [r3, #24]
 800be26:	441a      	add	r2, r3
 800be28:	2300      	movs	r3, #0
 800be2a:	9300      	str	r3, [sp, #0]
 800be2c:	2300      	movs	r3, #0
 800be2e:	2100      	movs	r1, #0
 800be30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be32:	f7ff fe05 	bl	800ba40 <xTimerGenericCommand>
 800be36:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800be38:	6a3b      	ldr	r3, [r7, #32]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d14f      	bne.n	800bede <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800be3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be42:	f383 8811 	msr	BASEPRI, r3
 800be46:	f3bf 8f6f 	isb	sy
 800be4a:	f3bf 8f4f 	dsb	sy
 800be4e:	61bb      	str	r3, [r7, #24]
}
 800be50:	bf00      	nop
 800be52:	e7fe      	b.n	800be52 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be5a:	f023 0301 	bic.w	r3, r3, #1
 800be5e:	b2da      	uxtb	r2, r3
 800be60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800be66:	e03a      	b.n	800bede <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be6e:	f043 0301 	orr.w	r3, r3, #1
 800be72:	b2da      	uxtb	r2, r3
 800be74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800be7a:	68ba      	ldr	r2, [r7, #8]
 800be7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800be80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be82:	699b      	ldr	r3, [r3, #24]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d10a      	bne.n	800be9e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800be88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8c:	f383 8811 	msr	BASEPRI, r3
 800be90:	f3bf 8f6f 	isb	sy
 800be94:	f3bf 8f4f 	dsb	sy
 800be98:	617b      	str	r3, [r7, #20]
}
 800be9a:	bf00      	nop
 800be9c:	e7fe      	b.n	800be9c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800be9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea0:	699a      	ldr	r2, [r3, #24]
 800bea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea4:	18d1      	adds	r1, r2, r3
 800bea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beac:	f7ff ff06 	bl	800bcbc <prvInsertTimerInActiveList>
					break;
 800beb0:	e015      	b.n	800bede <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800beb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800beb8:	f003 0302 	and.w	r3, r3, #2
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d103      	bne.n	800bec8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bec2:	f000 fbdd 	bl	800c680 <vPortFree>
 800bec6:	e00a      	b.n	800bede <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bece:	f023 0301 	bic.w	r3, r3, #1
 800bed2:	b2da      	uxtb	r2, r3
 800bed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800beda:	e000      	b.n	800bede <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bedc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bede:	4b08      	ldr	r3, [pc, #32]	; (800bf00 <prvProcessReceivedCommands+0x1c0>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	1d39      	adds	r1, r7, #4
 800bee4:	2200      	movs	r2, #0
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7fe fc16 	bl	800a718 <xQueueReceive>
 800beec:	4603      	mov	r3, r0
 800beee:	2b00      	cmp	r3, #0
 800bef0:	f47f af2a 	bne.w	800bd48 <prvProcessReceivedCommands+0x8>
	}
}
 800bef4:	bf00      	nop
 800bef6:	bf00      	nop
 800bef8:	3730      	adds	r7, #48	; 0x30
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	20000c84 	.word	0x20000c84

0800bf04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b088      	sub	sp, #32
 800bf08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf0a:	e048      	b.n	800bf9e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf0c:	4b2d      	ldr	r3, [pc, #180]	; (800bfc4 <prvSwitchTimerLists+0xc0>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	68db      	ldr	r3, [r3, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf16:	4b2b      	ldr	r3, [pc, #172]	; (800bfc4 <prvSwitchTimerLists+0xc0>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	68db      	ldr	r3, [r3, #12]
 800bf1c:	68db      	ldr	r3, [r3, #12]
 800bf1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	3304      	adds	r3, #4
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7fe f92f 	bl	800a188 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	6a1b      	ldr	r3, [r3, #32]
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf38:	f003 0304 	and.w	r3, r3, #4
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d02e      	beq.n	800bf9e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	699b      	ldr	r3, [r3, #24]
 800bf44:	693a      	ldr	r2, [r7, #16]
 800bf46:	4413      	add	r3, r2
 800bf48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bf4a:	68ba      	ldr	r2, [r7, #8]
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d90e      	bls.n	800bf70 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	68ba      	ldr	r2, [r7, #8]
 800bf56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	68fa      	ldr	r2, [r7, #12]
 800bf5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bf5e:	4b19      	ldr	r3, [pc, #100]	; (800bfc4 <prvSwitchTimerLists+0xc0>)
 800bf60:	681a      	ldr	r2, [r3, #0]
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	3304      	adds	r3, #4
 800bf66:	4619      	mov	r1, r3
 800bf68:	4610      	mov	r0, r2
 800bf6a:	f7fe f8d4 	bl	800a116 <vListInsert>
 800bf6e:	e016      	b.n	800bf9e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf70:	2300      	movs	r3, #0
 800bf72:	9300      	str	r3, [sp, #0]
 800bf74:	2300      	movs	r3, #0
 800bf76:	693a      	ldr	r2, [r7, #16]
 800bf78:	2100      	movs	r1, #0
 800bf7a:	68f8      	ldr	r0, [r7, #12]
 800bf7c:	f7ff fd60 	bl	800ba40 <xTimerGenericCommand>
 800bf80:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d10a      	bne.n	800bf9e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bf88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf8c:	f383 8811 	msr	BASEPRI, r3
 800bf90:	f3bf 8f6f 	isb	sy
 800bf94:	f3bf 8f4f 	dsb	sy
 800bf98:	603b      	str	r3, [r7, #0]
}
 800bf9a:	bf00      	nop
 800bf9c:	e7fe      	b.n	800bf9c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf9e:	4b09      	ldr	r3, [pc, #36]	; (800bfc4 <prvSwitchTimerLists+0xc0>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d1b1      	bne.n	800bf0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bfa8:	4b06      	ldr	r3, [pc, #24]	; (800bfc4 <prvSwitchTimerLists+0xc0>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bfae:	4b06      	ldr	r3, [pc, #24]	; (800bfc8 <prvSwitchTimerLists+0xc4>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	4a04      	ldr	r2, [pc, #16]	; (800bfc4 <prvSwitchTimerLists+0xc0>)
 800bfb4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bfb6:	4a04      	ldr	r2, [pc, #16]	; (800bfc8 <prvSwitchTimerLists+0xc4>)
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	6013      	str	r3, [r2, #0]
}
 800bfbc:	bf00      	nop
 800bfbe:	3718      	adds	r7, #24
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}
 800bfc4:	20000c7c 	.word	0x20000c7c
 800bfc8:	20000c80 	.word	0x20000c80

0800bfcc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b082      	sub	sp, #8
 800bfd0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bfd2:	f000 f967 	bl	800c2a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bfd6:	4b15      	ldr	r3, [pc, #84]	; (800c02c <prvCheckForValidListAndQueue+0x60>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d120      	bne.n	800c020 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bfde:	4814      	ldr	r0, [pc, #80]	; (800c030 <prvCheckForValidListAndQueue+0x64>)
 800bfe0:	f7fe f848 	bl	800a074 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bfe4:	4813      	ldr	r0, [pc, #76]	; (800c034 <prvCheckForValidListAndQueue+0x68>)
 800bfe6:	f7fe f845 	bl	800a074 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bfea:	4b13      	ldr	r3, [pc, #76]	; (800c038 <prvCheckForValidListAndQueue+0x6c>)
 800bfec:	4a10      	ldr	r2, [pc, #64]	; (800c030 <prvCheckForValidListAndQueue+0x64>)
 800bfee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bff0:	4b12      	ldr	r3, [pc, #72]	; (800c03c <prvCheckForValidListAndQueue+0x70>)
 800bff2:	4a10      	ldr	r2, [pc, #64]	; (800c034 <prvCheckForValidListAndQueue+0x68>)
 800bff4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bff6:	2300      	movs	r3, #0
 800bff8:	9300      	str	r3, [sp, #0]
 800bffa:	4b11      	ldr	r3, [pc, #68]	; (800c040 <prvCheckForValidListAndQueue+0x74>)
 800bffc:	4a11      	ldr	r2, [pc, #68]	; (800c044 <prvCheckForValidListAndQueue+0x78>)
 800bffe:	2110      	movs	r1, #16
 800c000:	200a      	movs	r0, #10
 800c002:	f7fe f953 	bl	800a2ac <xQueueGenericCreateStatic>
 800c006:	4603      	mov	r3, r0
 800c008:	4a08      	ldr	r2, [pc, #32]	; (800c02c <prvCheckForValidListAndQueue+0x60>)
 800c00a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c00c:	4b07      	ldr	r3, [pc, #28]	; (800c02c <prvCheckForValidListAndQueue+0x60>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d005      	beq.n	800c020 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c014:	4b05      	ldr	r3, [pc, #20]	; (800c02c <prvCheckForValidListAndQueue+0x60>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	490b      	ldr	r1, [pc, #44]	; (800c048 <prvCheckForValidListAndQueue+0x7c>)
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7fe fd6c 	bl	800aaf8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c020:	f000 f970 	bl	800c304 <vPortExitCritical>
}
 800c024:	bf00      	nop
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}
 800c02a:	bf00      	nop
 800c02c:	20000c84 	.word	0x20000c84
 800c030:	20000c54 	.word	0x20000c54
 800c034:	20000c68 	.word	0x20000c68
 800c038:	20000c7c 	.word	0x20000c7c
 800c03c:	20000c80 	.word	0x20000c80
 800c040:	20000d30 	.word	0x20000d30
 800c044:	20000c90 	.word	0x20000c90
 800c048:	0800cd8c 	.word	0x0800cd8c

0800c04c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c04c:	b480      	push	{r7}
 800c04e:	b085      	sub	sp, #20
 800c050:	af00      	add	r7, sp, #0
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	3b04      	subs	r3, #4
 800c05c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c064:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	3b04      	subs	r3, #4
 800c06a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	f023 0201 	bic.w	r2, r3, #1
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	3b04      	subs	r3, #4
 800c07a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c07c:	4a0c      	ldr	r2, [pc, #48]	; (800c0b0 <pxPortInitialiseStack+0x64>)
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	3b14      	subs	r3, #20
 800c086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	3b04      	subs	r3, #4
 800c092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f06f 0202 	mvn.w	r2, #2
 800c09a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	3b20      	subs	r3, #32
 800c0a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3714      	adds	r7, #20
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ae:	4770      	bx	lr
 800c0b0:	0800c0b5 	.word	0x0800c0b5

0800c0b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b085      	sub	sp, #20
 800c0b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c0be:	4b12      	ldr	r3, [pc, #72]	; (800c108 <prvTaskExitError+0x54>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c6:	d00a      	beq.n	800c0de <prvTaskExitError+0x2a>
	__asm volatile
 800c0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0cc:	f383 8811 	msr	BASEPRI, r3
 800c0d0:	f3bf 8f6f 	isb	sy
 800c0d4:	f3bf 8f4f 	dsb	sy
 800c0d8:	60fb      	str	r3, [r7, #12]
}
 800c0da:	bf00      	nop
 800c0dc:	e7fe      	b.n	800c0dc <prvTaskExitError+0x28>
	__asm volatile
 800c0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e2:	f383 8811 	msr	BASEPRI, r3
 800c0e6:	f3bf 8f6f 	isb	sy
 800c0ea:	f3bf 8f4f 	dsb	sy
 800c0ee:	60bb      	str	r3, [r7, #8]
}
 800c0f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c0f2:	bf00      	nop
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d0fc      	beq.n	800c0f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c0fa:	bf00      	nop
 800c0fc:	bf00      	nop
 800c0fe:	3714      	adds	r7, #20
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr
 800c108:	2000000c 	.word	0x2000000c
 800c10c:	00000000 	.word	0x00000000

0800c110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c110:	4b07      	ldr	r3, [pc, #28]	; (800c130 <pxCurrentTCBConst2>)
 800c112:	6819      	ldr	r1, [r3, #0]
 800c114:	6808      	ldr	r0, [r1, #0]
 800c116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c11a:	f380 8809 	msr	PSP, r0
 800c11e:	f3bf 8f6f 	isb	sy
 800c122:	f04f 0000 	mov.w	r0, #0
 800c126:	f380 8811 	msr	BASEPRI, r0
 800c12a:	4770      	bx	lr
 800c12c:	f3af 8000 	nop.w

0800c130 <pxCurrentTCBConst2>:
 800c130:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c134:	bf00      	nop
 800c136:	bf00      	nop

0800c138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c138:	4808      	ldr	r0, [pc, #32]	; (800c15c <prvPortStartFirstTask+0x24>)
 800c13a:	6800      	ldr	r0, [r0, #0]
 800c13c:	6800      	ldr	r0, [r0, #0]
 800c13e:	f380 8808 	msr	MSP, r0
 800c142:	f04f 0000 	mov.w	r0, #0
 800c146:	f380 8814 	msr	CONTROL, r0
 800c14a:	b662      	cpsie	i
 800c14c:	b661      	cpsie	f
 800c14e:	f3bf 8f4f 	dsb	sy
 800c152:	f3bf 8f6f 	isb	sy
 800c156:	df00      	svc	0
 800c158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c15a:	bf00      	nop
 800c15c:	e000ed08 	.word	0xe000ed08

0800c160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b086      	sub	sp, #24
 800c164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c166:	4b46      	ldr	r3, [pc, #280]	; (800c280 <xPortStartScheduler+0x120>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	4a46      	ldr	r2, [pc, #280]	; (800c284 <xPortStartScheduler+0x124>)
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d10a      	bne.n	800c186 <xPortStartScheduler+0x26>
	__asm volatile
 800c170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c174:	f383 8811 	msr	BASEPRI, r3
 800c178:	f3bf 8f6f 	isb	sy
 800c17c:	f3bf 8f4f 	dsb	sy
 800c180:	613b      	str	r3, [r7, #16]
}
 800c182:	bf00      	nop
 800c184:	e7fe      	b.n	800c184 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c186:	4b3e      	ldr	r3, [pc, #248]	; (800c280 <xPortStartScheduler+0x120>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	4a3f      	ldr	r2, [pc, #252]	; (800c288 <xPortStartScheduler+0x128>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d10a      	bne.n	800c1a6 <xPortStartScheduler+0x46>
	__asm volatile
 800c190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c194:	f383 8811 	msr	BASEPRI, r3
 800c198:	f3bf 8f6f 	isb	sy
 800c19c:	f3bf 8f4f 	dsb	sy
 800c1a0:	60fb      	str	r3, [r7, #12]
}
 800c1a2:	bf00      	nop
 800c1a4:	e7fe      	b.n	800c1a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c1a6:	4b39      	ldr	r3, [pc, #228]	; (800c28c <xPortStartScheduler+0x12c>)
 800c1a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	b2db      	uxtb	r3, r3
 800c1b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	22ff      	movs	r2, #255	; 0xff
 800c1b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c1c0:	78fb      	ldrb	r3, [r7, #3]
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c1c8:	b2da      	uxtb	r2, r3
 800c1ca:	4b31      	ldr	r3, [pc, #196]	; (800c290 <xPortStartScheduler+0x130>)
 800c1cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c1ce:	4b31      	ldr	r3, [pc, #196]	; (800c294 <xPortStartScheduler+0x134>)
 800c1d0:	2207      	movs	r2, #7
 800c1d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c1d4:	e009      	b.n	800c1ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c1d6:	4b2f      	ldr	r3, [pc, #188]	; (800c294 <xPortStartScheduler+0x134>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	3b01      	subs	r3, #1
 800c1dc:	4a2d      	ldr	r2, [pc, #180]	; (800c294 <xPortStartScheduler+0x134>)
 800c1de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c1e0:	78fb      	ldrb	r3, [r7, #3]
 800c1e2:	b2db      	uxtb	r3, r3
 800c1e4:	005b      	lsls	r3, r3, #1
 800c1e6:	b2db      	uxtb	r3, r3
 800c1e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c1ea:	78fb      	ldrb	r3, [r7, #3]
 800c1ec:	b2db      	uxtb	r3, r3
 800c1ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1f2:	2b80      	cmp	r3, #128	; 0x80
 800c1f4:	d0ef      	beq.n	800c1d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c1f6:	4b27      	ldr	r3, [pc, #156]	; (800c294 <xPortStartScheduler+0x134>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f1c3 0307 	rsb	r3, r3, #7
 800c1fe:	2b04      	cmp	r3, #4
 800c200:	d00a      	beq.n	800c218 <xPortStartScheduler+0xb8>
	__asm volatile
 800c202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c206:	f383 8811 	msr	BASEPRI, r3
 800c20a:	f3bf 8f6f 	isb	sy
 800c20e:	f3bf 8f4f 	dsb	sy
 800c212:	60bb      	str	r3, [r7, #8]
}
 800c214:	bf00      	nop
 800c216:	e7fe      	b.n	800c216 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c218:	4b1e      	ldr	r3, [pc, #120]	; (800c294 <xPortStartScheduler+0x134>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	021b      	lsls	r3, r3, #8
 800c21e:	4a1d      	ldr	r2, [pc, #116]	; (800c294 <xPortStartScheduler+0x134>)
 800c220:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c222:	4b1c      	ldr	r3, [pc, #112]	; (800c294 <xPortStartScheduler+0x134>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c22a:	4a1a      	ldr	r2, [pc, #104]	; (800c294 <xPortStartScheduler+0x134>)
 800c22c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	b2da      	uxtb	r2, r3
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c236:	4b18      	ldr	r3, [pc, #96]	; (800c298 <xPortStartScheduler+0x138>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	4a17      	ldr	r2, [pc, #92]	; (800c298 <xPortStartScheduler+0x138>)
 800c23c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c240:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c242:	4b15      	ldr	r3, [pc, #84]	; (800c298 <xPortStartScheduler+0x138>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	4a14      	ldr	r2, [pc, #80]	; (800c298 <xPortStartScheduler+0x138>)
 800c248:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c24c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c24e:	f000 f8dd 	bl	800c40c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c252:	4b12      	ldr	r3, [pc, #72]	; (800c29c <xPortStartScheduler+0x13c>)
 800c254:	2200      	movs	r2, #0
 800c256:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c258:	f000 f8fc 	bl	800c454 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c25c:	4b10      	ldr	r3, [pc, #64]	; (800c2a0 <xPortStartScheduler+0x140>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4a0f      	ldr	r2, [pc, #60]	; (800c2a0 <xPortStartScheduler+0x140>)
 800c262:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c266:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c268:	f7ff ff66 	bl	800c138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c26c:	f7ff f854 	bl	800b318 <vTaskSwitchContext>
	prvTaskExitError();
 800c270:	f7ff ff20 	bl	800c0b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c274:	2300      	movs	r3, #0
}
 800c276:	4618      	mov	r0, r3
 800c278:	3718      	adds	r7, #24
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	e000ed00 	.word	0xe000ed00
 800c284:	410fc271 	.word	0x410fc271
 800c288:	410fc270 	.word	0x410fc270
 800c28c:	e000e400 	.word	0xe000e400
 800c290:	20000d80 	.word	0x20000d80
 800c294:	20000d84 	.word	0x20000d84
 800c298:	e000ed20 	.word	0xe000ed20
 800c29c:	2000000c 	.word	0x2000000c
 800c2a0:	e000ef34 	.word	0xe000ef34

0800c2a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b083      	sub	sp, #12
 800c2a8:	af00      	add	r7, sp, #0
	__asm volatile
 800c2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ae:	f383 8811 	msr	BASEPRI, r3
 800c2b2:	f3bf 8f6f 	isb	sy
 800c2b6:	f3bf 8f4f 	dsb	sy
 800c2ba:	607b      	str	r3, [r7, #4]
}
 800c2bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c2be:	4b0f      	ldr	r3, [pc, #60]	; (800c2fc <vPortEnterCritical+0x58>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	4a0d      	ldr	r2, [pc, #52]	; (800c2fc <vPortEnterCritical+0x58>)
 800c2c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c2c8:	4b0c      	ldr	r3, [pc, #48]	; (800c2fc <vPortEnterCritical+0x58>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d10f      	bne.n	800c2f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c2d0:	4b0b      	ldr	r3, [pc, #44]	; (800c300 <vPortEnterCritical+0x5c>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	b2db      	uxtb	r3, r3
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d00a      	beq.n	800c2f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2de:	f383 8811 	msr	BASEPRI, r3
 800c2e2:	f3bf 8f6f 	isb	sy
 800c2e6:	f3bf 8f4f 	dsb	sy
 800c2ea:	603b      	str	r3, [r7, #0]
}
 800c2ec:	bf00      	nop
 800c2ee:	e7fe      	b.n	800c2ee <vPortEnterCritical+0x4a>
	}
}
 800c2f0:	bf00      	nop
 800c2f2:	370c      	adds	r7, #12
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr
 800c2fc:	2000000c 	.word	0x2000000c
 800c300:	e000ed04 	.word	0xe000ed04

0800c304 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c304:	b480      	push	{r7}
 800c306:	b083      	sub	sp, #12
 800c308:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c30a:	4b12      	ldr	r3, [pc, #72]	; (800c354 <vPortExitCritical+0x50>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d10a      	bne.n	800c328 <vPortExitCritical+0x24>
	__asm volatile
 800c312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c316:	f383 8811 	msr	BASEPRI, r3
 800c31a:	f3bf 8f6f 	isb	sy
 800c31e:	f3bf 8f4f 	dsb	sy
 800c322:	607b      	str	r3, [r7, #4]
}
 800c324:	bf00      	nop
 800c326:	e7fe      	b.n	800c326 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c328:	4b0a      	ldr	r3, [pc, #40]	; (800c354 <vPortExitCritical+0x50>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	3b01      	subs	r3, #1
 800c32e:	4a09      	ldr	r2, [pc, #36]	; (800c354 <vPortExitCritical+0x50>)
 800c330:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c332:	4b08      	ldr	r3, [pc, #32]	; (800c354 <vPortExitCritical+0x50>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d105      	bne.n	800c346 <vPortExitCritical+0x42>
 800c33a:	2300      	movs	r3, #0
 800c33c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	f383 8811 	msr	BASEPRI, r3
}
 800c344:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c346:	bf00      	nop
 800c348:	370c      	adds	r7, #12
 800c34a:	46bd      	mov	sp, r7
 800c34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c350:	4770      	bx	lr
 800c352:	bf00      	nop
 800c354:	2000000c 	.word	0x2000000c
	...

0800c360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c360:	f3ef 8009 	mrs	r0, PSP
 800c364:	f3bf 8f6f 	isb	sy
 800c368:	4b15      	ldr	r3, [pc, #84]	; (800c3c0 <pxCurrentTCBConst>)
 800c36a:	681a      	ldr	r2, [r3, #0]
 800c36c:	f01e 0f10 	tst.w	lr, #16
 800c370:	bf08      	it	eq
 800c372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c37a:	6010      	str	r0, [r2, #0]
 800c37c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c380:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c384:	f380 8811 	msr	BASEPRI, r0
 800c388:	f3bf 8f4f 	dsb	sy
 800c38c:	f3bf 8f6f 	isb	sy
 800c390:	f7fe ffc2 	bl	800b318 <vTaskSwitchContext>
 800c394:	f04f 0000 	mov.w	r0, #0
 800c398:	f380 8811 	msr	BASEPRI, r0
 800c39c:	bc09      	pop	{r0, r3}
 800c39e:	6819      	ldr	r1, [r3, #0]
 800c3a0:	6808      	ldr	r0, [r1, #0]
 800c3a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3a6:	f01e 0f10 	tst.w	lr, #16
 800c3aa:	bf08      	it	eq
 800c3ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c3b0:	f380 8809 	msr	PSP, r0
 800c3b4:	f3bf 8f6f 	isb	sy
 800c3b8:	4770      	bx	lr
 800c3ba:	bf00      	nop
 800c3bc:	f3af 8000 	nop.w

0800c3c0 <pxCurrentTCBConst>:
 800c3c0:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c3c4:	bf00      	nop
 800c3c6:	bf00      	nop

0800c3c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	af00      	add	r7, sp, #0
	__asm volatile
 800c3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d2:	f383 8811 	msr	BASEPRI, r3
 800c3d6:	f3bf 8f6f 	isb	sy
 800c3da:	f3bf 8f4f 	dsb	sy
 800c3de:	607b      	str	r3, [r7, #4]
}
 800c3e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c3e2:	f7fe fedf 	bl	800b1a4 <xTaskIncrementTick>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d003      	beq.n	800c3f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c3ec:	4b06      	ldr	r3, [pc, #24]	; (800c408 <xPortSysTickHandler+0x40>)
 800c3ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3f2:	601a      	str	r2, [r3, #0]
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	f383 8811 	msr	BASEPRI, r3
}
 800c3fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c400:	bf00      	nop
 800c402:	3708      	adds	r7, #8
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}
 800c408:	e000ed04 	.word	0xe000ed04

0800c40c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c40c:	b480      	push	{r7}
 800c40e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c410:	4b0b      	ldr	r3, [pc, #44]	; (800c440 <vPortSetupTimerInterrupt+0x34>)
 800c412:	2200      	movs	r2, #0
 800c414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c416:	4b0b      	ldr	r3, [pc, #44]	; (800c444 <vPortSetupTimerInterrupt+0x38>)
 800c418:	2200      	movs	r2, #0
 800c41a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c41c:	4b0a      	ldr	r3, [pc, #40]	; (800c448 <vPortSetupTimerInterrupt+0x3c>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4a0a      	ldr	r2, [pc, #40]	; (800c44c <vPortSetupTimerInterrupt+0x40>)
 800c422:	fba2 2303 	umull	r2, r3, r2, r3
 800c426:	099b      	lsrs	r3, r3, #6
 800c428:	4a09      	ldr	r2, [pc, #36]	; (800c450 <vPortSetupTimerInterrupt+0x44>)
 800c42a:	3b01      	subs	r3, #1
 800c42c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c42e:	4b04      	ldr	r3, [pc, #16]	; (800c440 <vPortSetupTimerInterrupt+0x34>)
 800c430:	2207      	movs	r2, #7
 800c432:	601a      	str	r2, [r3, #0]
}
 800c434:	bf00      	nop
 800c436:	46bd      	mov	sp, r7
 800c438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43c:	4770      	bx	lr
 800c43e:	bf00      	nop
 800c440:	e000e010 	.word	0xe000e010
 800c444:	e000e018 	.word	0xe000e018
 800c448:	20000000 	.word	0x20000000
 800c44c:	10624dd3 	.word	0x10624dd3
 800c450:	e000e014 	.word	0xe000e014

0800c454 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c454:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c464 <vPortEnableVFP+0x10>
 800c458:	6801      	ldr	r1, [r0, #0]
 800c45a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c45e:	6001      	str	r1, [r0, #0]
 800c460:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c462:	bf00      	nop
 800c464:	e000ed88 	.word	0xe000ed88

0800c468 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c468:	b480      	push	{r7}
 800c46a:	b085      	sub	sp, #20
 800c46c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c46e:	f3ef 8305 	mrs	r3, IPSR
 800c472:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	2b0f      	cmp	r3, #15
 800c478:	d914      	bls.n	800c4a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c47a:	4a17      	ldr	r2, [pc, #92]	; (800c4d8 <vPortValidateInterruptPriority+0x70>)
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	4413      	add	r3, r2
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c484:	4b15      	ldr	r3, [pc, #84]	; (800c4dc <vPortValidateInterruptPriority+0x74>)
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	7afa      	ldrb	r2, [r7, #11]
 800c48a:	429a      	cmp	r2, r3
 800c48c:	d20a      	bcs.n	800c4a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c492:	f383 8811 	msr	BASEPRI, r3
 800c496:	f3bf 8f6f 	isb	sy
 800c49a:	f3bf 8f4f 	dsb	sy
 800c49e:	607b      	str	r3, [r7, #4]
}
 800c4a0:	bf00      	nop
 800c4a2:	e7fe      	b.n	800c4a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c4a4:	4b0e      	ldr	r3, [pc, #56]	; (800c4e0 <vPortValidateInterruptPriority+0x78>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c4ac:	4b0d      	ldr	r3, [pc, #52]	; (800c4e4 <vPortValidateInterruptPriority+0x7c>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d90a      	bls.n	800c4ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b8:	f383 8811 	msr	BASEPRI, r3
 800c4bc:	f3bf 8f6f 	isb	sy
 800c4c0:	f3bf 8f4f 	dsb	sy
 800c4c4:	603b      	str	r3, [r7, #0]
}
 800c4c6:	bf00      	nop
 800c4c8:	e7fe      	b.n	800c4c8 <vPortValidateInterruptPriority+0x60>
	}
 800c4ca:	bf00      	nop
 800c4cc:	3714      	adds	r7, #20
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d4:	4770      	bx	lr
 800c4d6:	bf00      	nop
 800c4d8:	e000e3f0 	.word	0xe000e3f0
 800c4dc:	20000d80 	.word	0x20000d80
 800c4e0:	e000ed0c 	.word	0xe000ed0c
 800c4e4:	20000d84 	.word	0x20000d84

0800c4e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b08a      	sub	sp, #40	; 0x28
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c4f4:	f7fe fd9a 	bl	800b02c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c4f8:	4b5b      	ldr	r3, [pc, #364]	; (800c668 <pvPortMalloc+0x180>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d101      	bne.n	800c504 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c500:	f000 f920 	bl	800c744 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c504:	4b59      	ldr	r3, [pc, #356]	; (800c66c <pvPortMalloc+0x184>)
 800c506:	681a      	ldr	r2, [r3, #0]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	4013      	ands	r3, r2
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	f040 8093 	bne.w	800c638 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d01d      	beq.n	800c554 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c518:	2208      	movs	r2, #8
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	4413      	add	r3, r2
 800c51e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f003 0307 	and.w	r3, r3, #7
 800c526:	2b00      	cmp	r3, #0
 800c528:	d014      	beq.n	800c554 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f023 0307 	bic.w	r3, r3, #7
 800c530:	3308      	adds	r3, #8
 800c532:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f003 0307 	and.w	r3, r3, #7
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d00a      	beq.n	800c554 <pvPortMalloc+0x6c>
	__asm volatile
 800c53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c542:	f383 8811 	msr	BASEPRI, r3
 800c546:	f3bf 8f6f 	isb	sy
 800c54a:	f3bf 8f4f 	dsb	sy
 800c54e:	617b      	str	r3, [r7, #20]
}
 800c550:	bf00      	nop
 800c552:	e7fe      	b.n	800c552 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d06e      	beq.n	800c638 <pvPortMalloc+0x150>
 800c55a:	4b45      	ldr	r3, [pc, #276]	; (800c670 <pvPortMalloc+0x188>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	429a      	cmp	r2, r3
 800c562:	d869      	bhi.n	800c638 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c564:	4b43      	ldr	r3, [pc, #268]	; (800c674 <pvPortMalloc+0x18c>)
 800c566:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c568:	4b42      	ldr	r3, [pc, #264]	; (800c674 <pvPortMalloc+0x18c>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c56e:	e004      	b.n	800c57a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c572:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	429a      	cmp	r2, r3
 800c582:	d903      	bls.n	800c58c <pvPortMalloc+0xa4>
 800c584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d1f1      	bne.n	800c570 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c58c:	4b36      	ldr	r3, [pc, #216]	; (800c668 <pvPortMalloc+0x180>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c592:	429a      	cmp	r2, r3
 800c594:	d050      	beq.n	800c638 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c596:	6a3b      	ldr	r3, [r7, #32]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	2208      	movs	r2, #8
 800c59c:	4413      	add	r3, r2
 800c59e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a2:	681a      	ldr	r2, [r3, #0]
 800c5a4:	6a3b      	ldr	r3, [r7, #32]
 800c5a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5aa:	685a      	ldr	r2, [r3, #4]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	1ad2      	subs	r2, r2, r3
 800c5b0:	2308      	movs	r3, #8
 800c5b2:	005b      	lsls	r3, r3, #1
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d91f      	bls.n	800c5f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c5b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	4413      	add	r3, r2
 800c5be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5c0:	69bb      	ldr	r3, [r7, #24]
 800c5c2:	f003 0307 	and.w	r3, r3, #7
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d00a      	beq.n	800c5e0 <pvPortMalloc+0xf8>
	__asm volatile
 800c5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ce:	f383 8811 	msr	BASEPRI, r3
 800c5d2:	f3bf 8f6f 	isb	sy
 800c5d6:	f3bf 8f4f 	dsb	sy
 800c5da:	613b      	str	r3, [r7, #16]
}
 800c5dc:	bf00      	nop
 800c5de:	e7fe      	b.n	800c5de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e2:	685a      	ldr	r2, [r3, #4]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	1ad2      	subs	r2, r2, r3
 800c5e8:	69bb      	ldr	r3, [r7, #24]
 800c5ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ee:	687a      	ldr	r2, [r7, #4]
 800c5f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c5f2:	69b8      	ldr	r0, [r7, #24]
 800c5f4:	f000 f908 	bl	800c808 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c5f8:	4b1d      	ldr	r3, [pc, #116]	; (800c670 <pvPortMalloc+0x188>)
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	1ad3      	subs	r3, r2, r3
 800c602:	4a1b      	ldr	r2, [pc, #108]	; (800c670 <pvPortMalloc+0x188>)
 800c604:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c606:	4b1a      	ldr	r3, [pc, #104]	; (800c670 <pvPortMalloc+0x188>)
 800c608:	681a      	ldr	r2, [r3, #0]
 800c60a:	4b1b      	ldr	r3, [pc, #108]	; (800c678 <pvPortMalloc+0x190>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	429a      	cmp	r2, r3
 800c610:	d203      	bcs.n	800c61a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c612:	4b17      	ldr	r3, [pc, #92]	; (800c670 <pvPortMalloc+0x188>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	4a18      	ldr	r2, [pc, #96]	; (800c678 <pvPortMalloc+0x190>)
 800c618:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61c:	685a      	ldr	r2, [r3, #4]
 800c61e:	4b13      	ldr	r3, [pc, #76]	; (800c66c <pvPortMalloc+0x184>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	431a      	orrs	r2, r3
 800c624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c626:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c62a:	2200      	movs	r2, #0
 800c62c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c62e:	4b13      	ldr	r3, [pc, #76]	; (800c67c <pvPortMalloc+0x194>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	3301      	adds	r3, #1
 800c634:	4a11      	ldr	r2, [pc, #68]	; (800c67c <pvPortMalloc+0x194>)
 800c636:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c638:	f7fe fd06 	bl	800b048 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	f003 0307 	and.w	r3, r3, #7
 800c642:	2b00      	cmp	r3, #0
 800c644:	d00a      	beq.n	800c65c <pvPortMalloc+0x174>
	__asm volatile
 800c646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c64a:	f383 8811 	msr	BASEPRI, r3
 800c64e:	f3bf 8f6f 	isb	sy
 800c652:	f3bf 8f4f 	dsb	sy
 800c656:	60fb      	str	r3, [r7, #12]
}
 800c658:	bf00      	nop
 800c65a:	e7fe      	b.n	800c65a <pvPortMalloc+0x172>
	return pvReturn;
 800c65c:	69fb      	ldr	r3, [r7, #28]
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3728      	adds	r7, #40	; 0x28
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	20004990 	.word	0x20004990
 800c66c:	200049a4 	.word	0x200049a4
 800c670:	20004994 	.word	0x20004994
 800c674:	20004988 	.word	0x20004988
 800c678:	20004998 	.word	0x20004998
 800c67c:	2000499c 	.word	0x2000499c

0800c680 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b086      	sub	sp, #24
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d04d      	beq.n	800c72e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c692:	2308      	movs	r3, #8
 800c694:	425b      	negs	r3, r3
 800c696:	697a      	ldr	r2, [r7, #20]
 800c698:	4413      	add	r3, r2
 800c69a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	685a      	ldr	r2, [r3, #4]
 800c6a4:	4b24      	ldr	r3, [pc, #144]	; (800c738 <vPortFree+0xb8>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	4013      	ands	r3, r2
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d10a      	bne.n	800c6c4 <vPortFree+0x44>
	__asm volatile
 800c6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b2:	f383 8811 	msr	BASEPRI, r3
 800c6b6:	f3bf 8f6f 	isb	sy
 800c6ba:	f3bf 8f4f 	dsb	sy
 800c6be:	60fb      	str	r3, [r7, #12]
}
 800c6c0:	bf00      	nop
 800c6c2:	e7fe      	b.n	800c6c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d00a      	beq.n	800c6e2 <vPortFree+0x62>
	__asm volatile
 800c6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d0:	f383 8811 	msr	BASEPRI, r3
 800c6d4:	f3bf 8f6f 	isb	sy
 800c6d8:	f3bf 8f4f 	dsb	sy
 800c6dc:	60bb      	str	r3, [r7, #8]
}
 800c6de:	bf00      	nop
 800c6e0:	e7fe      	b.n	800c6e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	685a      	ldr	r2, [r3, #4]
 800c6e6:	4b14      	ldr	r3, [pc, #80]	; (800c738 <vPortFree+0xb8>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4013      	ands	r3, r2
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d01e      	beq.n	800c72e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d11a      	bne.n	800c72e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	685a      	ldr	r2, [r3, #4]
 800c6fc:	4b0e      	ldr	r3, [pc, #56]	; (800c738 <vPortFree+0xb8>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	43db      	mvns	r3, r3
 800c702:	401a      	ands	r2, r3
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c708:	f7fe fc90 	bl	800b02c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	685a      	ldr	r2, [r3, #4]
 800c710:	4b0a      	ldr	r3, [pc, #40]	; (800c73c <vPortFree+0xbc>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	4413      	add	r3, r2
 800c716:	4a09      	ldr	r2, [pc, #36]	; (800c73c <vPortFree+0xbc>)
 800c718:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c71a:	6938      	ldr	r0, [r7, #16]
 800c71c:	f000 f874 	bl	800c808 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c720:	4b07      	ldr	r3, [pc, #28]	; (800c740 <vPortFree+0xc0>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	3301      	adds	r3, #1
 800c726:	4a06      	ldr	r2, [pc, #24]	; (800c740 <vPortFree+0xc0>)
 800c728:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c72a:	f7fe fc8d 	bl	800b048 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c72e:	bf00      	nop
 800c730:	3718      	adds	r7, #24
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
 800c736:	bf00      	nop
 800c738:	200049a4 	.word	0x200049a4
 800c73c:	20004994 	.word	0x20004994
 800c740:	200049a0 	.word	0x200049a0

0800c744 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c744:	b480      	push	{r7}
 800c746:	b085      	sub	sp, #20
 800c748:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c74a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c74e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c750:	4b27      	ldr	r3, [pc, #156]	; (800c7f0 <prvHeapInit+0xac>)
 800c752:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	f003 0307 	and.w	r3, r3, #7
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d00c      	beq.n	800c778 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	3307      	adds	r3, #7
 800c762:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	f023 0307 	bic.w	r3, r3, #7
 800c76a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c76c:	68ba      	ldr	r2, [r7, #8]
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	1ad3      	subs	r3, r2, r3
 800c772:	4a1f      	ldr	r2, [pc, #124]	; (800c7f0 <prvHeapInit+0xac>)
 800c774:	4413      	add	r3, r2
 800c776:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c77c:	4a1d      	ldr	r2, [pc, #116]	; (800c7f4 <prvHeapInit+0xb0>)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c782:	4b1c      	ldr	r3, [pc, #112]	; (800c7f4 <prvHeapInit+0xb0>)
 800c784:	2200      	movs	r2, #0
 800c786:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	68ba      	ldr	r2, [r7, #8]
 800c78c:	4413      	add	r3, r2
 800c78e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c790:	2208      	movs	r2, #8
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	1a9b      	subs	r3, r3, r2
 800c796:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	f023 0307 	bic.w	r3, r3, #7
 800c79e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	4a15      	ldr	r2, [pc, #84]	; (800c7f8 <prvHeapInit+0xb4>)
 800c7a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c7a6:	4b14      	ldr	r3, [pc, #80]	; (800c7f8 <prvHeapInit+0xb4>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c7ae:	4b12      	ldr	r3, [pc, #72]	; (800c7f8 <prvHeapInit+0xb4>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	68fa      	ldr	r2, [r7, #12]
 800c7be:	1ad2      	subs	r2, r2, r3
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c7c4:	4b0c      	ldr	r3, [pc, #48]	; (800c7f8 <prvHeapInit+0xb4>)
 800c7c6:	681a      	ldr	r2, [r3, #0]
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	4a0a      	ldr	r2, [pc, #40]	; (800c7fc <prvHeapInit+0xb8>)
 800c7d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	4a09      	ldr	r2, [pc, #36]	; (800c800 <prvHeapInit+0xbc>)
 800c7da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c7dc:	4b09      	ldr	r3, [pc, #36]	; (800c804 <prvHeapInit+0xc0>)
 800c7de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c7e2:	601a      	str	r2, [r3, #0]
}
 800c7e4:	bf00      	nop
 800c7e6:	3714      	adds	r7, #20
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr
 800c7f0:	20000d88 	.word	0x20000d88
 800c7f4:	20004988 	.word	0x20004988
 800c7f8:	20004990 	.word	0x20004990
 800c7fc:	20004998 	.word	0x20004998
 800c800:	20004994 	.word	0x20004994
 800c804:	200049a4 	.word	0x200049a4

0800c808 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c808:	b480      	push	{r7}
 800c80a:	b085      	sub	sp, #20
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c810:	4b28      	ldr	r3, [pc, #160]	; (800c8b4 <prvInsertBlockIntoFreeList+0xac>)
 800c812:	60fb      	str	r3, [r7, #12]
 800c814:	e002      	b.n	800c81c <prvInsertBlockIntoFreeList+0x14>
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	60fb      	str	r3, [r7, #12]
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	687a      	ldr	r2, [r7, #4]
 800c822:	429a      	cmp	r2, r3
 800c824:	d8f7      	bhi.n	800c816 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	685b      	ldr	r3, [r3, #4]
 800c82e:	68ba      	ldr	r2, [r7, #8]
 800c830:	4413      	add	r3, r2
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	429a      	cmp	r2, r3
 800c836:	d108      	bne.n	800c84a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	685a      	ldr	r2, [r3, #4]
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	441a      	add	r2, r3
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	685b      	ldr	r3, [r3, #4]
 800c852:	68ba      	ldr	r2, [r7, #8]
 800c854:	441a      	add	r2, r3
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d118      	bne.n	800c890 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681a      	ldr	r2, [r3, #0]
 800c862:	4b15      	ldr	r3, [pc, #84]	; (800c8b8 <prvInsertBlockIntoFreeList+0xb0>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	429a      	cmp	r2, r3
 800c868:	d00d      	beq.n	800c886 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	685a      	ldr	r2, [r3, #4]
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	685b      	ldr	r3, [r3, #4]
 800c874:	441a      	add	r2, r3
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	681a      	ldr	r2, [r3, #0]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	601a      	str	r2, [r3, #0]
 800c884:	e008      	b.n	800c898 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c886:	4b0c      	ldr	r3, [pc, #48]	; (800c8b8 <prvInsertBlockIntoFreeList+0xb0>)
 800c888:	681a      	ldr	r2, [r3, #0]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	601a      	str	r2, [r3, #0]
 800c88e:	e003      	b.n	800c898 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681a      	ldr	r2, [r3, #0]
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c898:	68fa      	ldr	r2, [r7, #12]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d002      	beq.n	800c8a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8a6:	bf00      	nop
 800c8a8:	3714      	adds	r7, #20
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr
 800c8b2:	bf00      	nop
 800c8b4:	20004988 	.word	0x20004988
 800c8b8:	20004990 	.word	0x20004990

0800c8bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b082      	sub	sp, #8
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c8d0:	4619      	mov	r1, r3
 800c8d2:	4610      	mov	r0, r2
 800c8d4:	f7fc fa15 	bl	8008d02 <USBD_LL_SetupStage>
}
 800c8d8:	bf00      	nop
 800c8da:	3708      	adds	r7, #8
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}

0800c8e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b082      	sub	sp, #8
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	460b      	mov	r3, r1
 800c8ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c8f2:	78fa      	ldrb	r2, [r7, #3]
 800c8f4:	6879      	ldr	r1, [r7, #4]
 800c8f6:	4613      	mov	r3, r2
 800c8f8:	00db      	lsls	r3, r3, #3
 800c8fa:	1a9b      	subs	r3, r3, r2
 800c8fc:	009b      	lsls	r3, r3, #2
 800c8fe:	440b      	add	r3, r1
 800c900:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c904:	681a      	ldr	r2, [r3, #0]
 800c906:	78fb      	ldrb	r3, [r7, #3]
 800c908:	4619      	mov	r1, r3
 800c90a:	f7fc fa4f 	bl	8008dac <USBD_LL_DataOutStage>
}
 800c90e:	bf00      	nop
 800c910:	3708      	adds	r7, #8
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}

0800c916 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c916:	b580      	push	{r7, lr}
 800c918:	b082      	sub	sp, #8
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
 800c91e:	460b      	mov	r3, r1
 800c920:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c928:	78fa      	ldrb	r2, [r7, #3]
 800c92a:	6879      	ldr	r1, [r7, #4]
 800c92c:	4613      	mov	r3, r2
 800c92e:	00db      	lsls	r3, r3, #3
 800c930:	1a9b      	subs	r3, r3, r2
 800c932:	009b      	lsls	r3, r3, #2
 800c934:	440b      	add	r3, r1
 800c936:	3348      	adds	r3, #72	; 0x48
 800c938:	681a      	ldr	r2, [r3, #0]
 800c93a:	78fb      	ldrb	r3, [r7, #3]
 800c93c:	4619      	mov	r1, r3
 800c93e:	f7fc fa98 	bl	8008e72 <USBD_LL_DataInStage>
}
 800c942:	bf00      	nop
 800c944:	3708      	adds	r7, #8
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}

0800c94a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c94a:	b580      	push	{r7, lr}
 800c94c:	b082      	sub	sp, #8
 800c94e:	af00      	add	r7, sp, #0
 800c950:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c958:	4618      	mov	r0, r3
 800c95a:	f7fc fbac 	bl	80090b6 <USBD_LL_SOF>
}
 800c95e:	bf00      	nop
 800c960:	3708      	adds	r7, #8
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}

0800c966 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c966:	b580      	push	{r7, lr}
 800c968:	b084      	sub	sp, #16
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c96e:	2301      	movs	r3, #1
 800c970:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	68db      	ldr	r3, [r3, #12]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d102      	bne.n	800c980 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c97a:	2300      	movs	r3, #0
 800c97c:	73fb      	strb	r3, [r7, #15]
 800c97e:	e008      	b.n	800c992 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	68db      	ldr	r3, [r3, #12]
 800c984:	2b02      	cmp	r3, #2
 800c986:	d102      	bne.n	800c98e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c988:	2301      	movs	r3, #1
 800c98a:	73fb      	strb	r3, [r7, #15]
 800c98c:	e001      	b.n	800c992 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c98e:	f7f5 fa19 	bl	8001dc4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c998:	7bfa      	ldrb	r2, [r7, #15]
 800c99a:	4611      	mov	r1, r2
 800c99c:	4618      	mov	r0, r3
 800c99e:	f7fc fb4c 	bl	800903a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f7fc faf8 	bl	8008f9e <USBD_LL_Reset>
}
 800c9ae:	bf00      	nop
 800c9b0:	3710      	adds	r7, #16
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}
	...

0800c9b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b082      	sub	sp, #8
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f7fc fb47 	bl	800905a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	6812      	ldr	r2, [r2, #0]
 800c9da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c9de:	f043 0301 	orr.w	r3, r3, #1
 800c9e2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6a1b      	ldr	r3, [r3, #32]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d005      	beq.n	800c9f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c9ec:	4b04      	ldr	r3, [pc, #16]	; (800ca00 <HAL_PCD_SuspendCallback+0x48>)
 800c9ee:	691b      	ldr	r3, [r3, #16]
 800c9f0:	4a03      	ldr	r2, [pc, #12]	; (800ca00 <HAL_PCD_SuspendCallback+0x48>)
 800c9f2:	f043 0306 	orr.w	r3, r3, #6
 800c9f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c9f8:	bf00      	nop
 800c9fa:	3708      	adds	r7, #8
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	e000ed00 	.word	0xe000ed00

0800ca04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b082      	sub	sp, #8
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7fc fb37 	bl	8009086 <USBD_LL_Resume>
}
 800ca18:	bf00      	nop
 800ca1a:	3708      	adds	r7, #8
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	460b      	mov	r3, r1
 800ca2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca32:	78fa      	ldrb	r2, [r7, #3]
 800ca34:	4611      	mov	r1, r2
 800ca36:	4618      	mov	r0, r3
 800ca38:	f7fc fb85 	bl	8009146 <USBD_LL_IsoOUTIncomplete>
}
 800ca3c:	bf00      	nop
 800ca3e:	3708      	adds	r7, #8
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b082      	sub	sp, #8
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca56:	78fa      	ldrb	r2, [r7, #3]
 800ca58:	4611      	mov	r1, r2
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f7fc fb4d 	bl	80090fa <USBD_LL_IsoINIncomplete>
}
 800ca60:	bf00      	nop
 800ca62:	3708      	adds	r7, #8
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7fc fb8b 	bl	8009192 <USBD_LL_DevConnected>
}
 800ca7c:	bf00      	nop
 800ca7e:	3708      	adds	r7, #8
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7fc fb88 	bl	80091a8 <USBD_LL_DevDisconnected>
}
 800ca98:	bf00      	nop
 800ca9a:	3708      	adds	r7, #8
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	4608      	mov	r0, r1
 800caaa:	4611      	mov	r1, r2
 800caac:	461a      	mov	r2, r3
 800caae:	4603      	mov	r3, r0
 800cab0:	70fb      	strb	r3, [r7, #3]
 800cab2:	460b      	mov	r3, r1
 800cab4:	70bb      	strb	r3, [r7, #2]
 800cab6:	4613      	mov	r3, r2
 800cab8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800caba:	2300      	movs	r3, #0
 800cabc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cabe:	2300      	movs	r3, #0
 800cac0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cac8:	78bb      	ldrb	r3, [r7, #2]
 800caca:	883a      	ldrh	r2, [r7, #0]
 800cacc:	78f9      	ldrb	r1, [r7, #3]
 800cace:	f7f8 f905 	bl	8004cdc <HAL_PCD_EP_Open>
 800cad2:	4603      	mov	r3, r0
 800cad4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cad6:	7bfb      	ldrb	r3, [r7, #15]
 800cad8:	4618      	mov	r0, r3
 800cada:	f000 f8d3 	bl	800cc84 <USBD_Get_USB_Status>
 800cade:	4603      	mov	r3, r0
 800cae0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cae2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3710      	adds	r7, #16
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}

0800caec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b084      	sub	sp, #16
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	460b      	mov	r3, r1
 800caf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800caf8:	2300      	movs	r3, #0
 800cafa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cafc:	2300      	movs	r3, #0
 800cafe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb06:	78fa      	ldrb	r2, [r7, #3]
 800cb08:	4611      	mov	r1, r2
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7f8 f9e3 	bl	8004ed6 <HAL_PCD_EP_SetStall>
 800cb10:	4603      	mov	r3, r0
 800cb12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb14:	7bfb      	ldrb	r3, [r7, #15]
 800cb16:	4618      	mov	r0, r3
 800cb18:	f000 f8b4 	bl	800cc84 <USBD_Get_USB_Status>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb20:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3710      	adds	r7, #16
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}

0800cb2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb2a:	b580      	push	{r7, lr}
 800cb2c:	b084      	sub	sp, #16
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
 800cb32:	460b      	mov	r3, r1
 800cb34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb36:	2300      	movs	r3, #0
 800cb38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb44:	78fa      	ldrb	r2, [r7, #3]
 800cb46:	4611      	mov	r1, r2
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f7f8 fa28 	bl	8004f9e <HAL_PCD_EP_ClrStall>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb52:	7bfb      	ldrb	r3, [r7, #15]
 800cb54:	4618      	mov	r0, r3
 800cb56:	f000 f895 	bl	800cc84 <USBD_Get_USB_Status>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3710      	adds	r7, #16
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b085      	sub	sp, #20
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	460b      	mov	r3, r1
 800cb72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cb7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	da0b      	bge.n	800cb9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cb84:	78fb      	ldrb	r3, [r7, #3]
 800cb86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb8a:	68f9      	ldr	r1, [r7, #12]
 800cb8c:	4613      	mov	r3, r2
 800cb8e:	00db      	lsls	r3, r3, #3
 800cb90:	1a9b      	subs	r3, r3, r2
 800cb92:	009b      	lsls	r3, r3, #2
 800cb94:	440b      	add	r3, r1
 800cb96:	333e      	adds	r3, #62	; 0x3e
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	e00b      	b.n	800cbb4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cb9c:	78fb      	ldrb	r3, [r7, #3]
 800cb9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cba2:	68f9      	ldr	r1, [r7, #12]
 800cba4:	4613      	mov	r3, r2
 800cba6:	00db      	lsls	r3, r3, #3
 800cba8:	1a9b      	subs	r3, r3, r2
 800cbaa:	009b      	lsls	r3, r3, #2
 800cbac:	440b      	add	r3, r1
 800cbae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cbb2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3714      	adds	r7, #20
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr

0800cbc0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b084      	sub	sp, #16
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	460b      	mov	r3, r1
 800cbca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cbda:	78fa      	ldrb	r2, [r7, #3]
 800cbdc:	4611      	mov	r1, r2
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f7f8 f857 	bl	8004c92 <HAL_PCD_SetAddress>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbe8:	7bfb      	ldrb	r3, [r7, #15]
 800cbea:	4618      	mov	r0, r3
 800cbec:	f000 f84a 	bl	800cc84 <USBD_Get_USB_Status>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3710      	adds	r7, #16
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}

0800cbfe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cbfe:	b580      	push	{r7, lr}
 800cc00:	b086      	sub	sp, #24
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	60f8      	str	r0, [r7, #12]
 800cc06:	607a      	str	r2, [r7, #4]
 800cc08:	603b      	str	r3, [r7, #0]
 800cc0a:	460b      	mov	r3, r1
 800cc0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc12:	2300      	movs	r3, #0
 800cc14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cc1c:	7af9      	ldrb	r1, [r7, #11]
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	f7f8 f90e 	bl	8004e42 <HAL_PCD_EP_Transmit>
 800cc26:	4603      	mov	r3, r0
 800cc28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc2a:	7dfb      	ldrb	r3, [r7, #23]
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f000 f829 	bl	800cc84 <USBD_Get_USB_Status>
 800cc32:	4603      	mov	r3, r0
 800cc34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cc36:	7dbb      	ldrb	r3, [r7, #22]
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3718      	adds	r7, #24
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b086      	sub	sp, #24
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	60f8      	str	r0, [r7, #12]
 800cc48:	607a      	str	r2, [r7, #4]
 800cc4a:	603b      	str	r3, [r7, #0]
 800cc4c:	460b      	mov	r3, r1
 800cc4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc50:	2300      	movs	r3, #0
 800cc52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc54:	2300      	movs	r3, #0
 800cc56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cc5e:	7af9      	ldrb	r1, [r7, #11]
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	687a      	ldr	r2, [r7, #4]
 800cc64:	f7f8 f8a2 	bl	8004dac <HAL_PCD_EP_Receive>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc6c:	7dfb      	ldrb	r3, [r7, #23]
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f000 f808 	bl	800cc84 <USBD_Get_USB_Status>
 800cc74:	4603      	mov	r3, r0
 800cc76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cc78:	7dbb      	ldrb	r3, [r7, #22]
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3718      	adds	r7, #24
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}
	...

0800cc84 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cc84:	b480      	push	{r7}
 800cc86:	b085      	sub	sp, #20
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cc92:	79fb      	ldrb	r3, [r7, #7]
 800cc94:	2b03      	cmp	r3, #3
 800cc96:	d817      	bhi.n	800ccc8 <USBD_Get_USB_Status+0x44>
 800cc98:	a201      	add	r2, pc, #4	; (adr r2, 800cca0 <USBD_Get_USB_Status+0x1c>)
 800cc9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc9e:	bf00      	nop
 800cca0:	0800ccb1 	.word	0x0800ccb1
 800cca4:	0800ccb7 	.word	0x0800ccb7
 800cca8:	0800ccbd 	.word	0x0800ccbd
 800ccac:	0800ccc3 	.word	0x0800ccc3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	73fb      	strb	r3, [r7, #15]
    break;
 800ccb4:	e00b      	b.n	800ccce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ccb6:	2303      	movs	r3, #3
 800ccb8:	73fb      	strb	r3, [r7, #15]
    break;
 800ccba:	e008      	b.n	800ccce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	73fb      	strb	r3, [r7, #15]
    break;
 800ccc0:	e005      	b.n	800ccce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ccc2:	2303      	movs	r3, #3
 800ccc4:	73fb      	strb	r3, [r7, #15]
    break;
 800ccc6:	e002      	b.n	800ccce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ccc8:	2303      	movs	r3, #3
 800ccca:	73fb      	strb	r3, [r7, #15]
    break;
 800cccc:	bf00      	nop
  }
  return usb_status;
 800ccce:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3714      	adds	r7, #20
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr

0800ccdc <__libc_init_array>:
 800ccdc:	b570      	push	{r4, r5, r6, lr}
 800ccde:	4d0d      	ldr	r5, [pc, #52]	; (800cd14 <__libc_init_array+0x38>)
 800cce0:	4c0d      	ldr	r4, [pc, #52]	; (800cd18 <__libc_init_array+0x3c>)
 800cce2:	1b64      	subs	r4, r4, r5
 800cce4:	10a4      	asrs	r4, r4, #2
 800cce6:	2600      	movs	r6, #0
 800cce8:	42a6      	cmp	r6, r4
 800ccea:	d109      	bne.n	800cd00 <__libc_init_array+0x24>
 800ccec:	4d0b      	ldr	r5, [pc, #44]	; (800cd1c <__libc_init_array+0x40>)
 800ccee:	4c0c      	ldr	r4, [pc, #48]	; (800cd20 <__libc_init_array+0x44>)
 800ccf0:	f000 f82e 	bl	800cd50 <_init>
 800ccf4:	1b64      	subs	r4, r4, r5
 800ccf6:	10a4      	asrs	r4, r4, #2
 800ccf8:	2600      	movs	r6, #0
 800ccfa:	42a6      	cmp	r6, r4
 800ccfc:	d105      	bne.n	800cd0a <__libc_init_array+0x2e>
 800ccfe:	bd70      	pop	{r4, r5, r6, pc}
 800cd00:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd04:	4798      	blx	r3
 800cd06:	3601      	adds	r6, #1
 800cd08:	e7ee      	b.n	800cce8 <__libc_init_array+0xc>
 800cd0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd0e:	4798      	blx	r3
 800cd10:	3601      	adds	r6, #1
 800cd12:	e7f2      	b.n	800ccfa <__libc_init_array+0x1e>
 800cd14:	0800ce10 	.word	0x0800ce10
 800cd18:	0800ce10 	.word	0x0800ce10
 800cd1c:	0800ce10 	.word	0x0800ce10
 800cd20:	0800ce14 	.word	0x0800ce14

0800cd24 <memcpy>:
 800cd24:	440a      	add	r2, r1
 800cd26:	4291      	cmp	r1, r2
 800cd28:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd2c:	d100      	bne.n	800cd30 <memcpy+0xc>
 800cd2e:	4770      	bx	lr
 800cd30:	b510      	push	{r4, lr}
 800cd32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd3a:	4291      	cmp	r1, r2
 800cd3c:	d1f9      	bne.n	800cd32 <memcpy+0xe>
 800cd3e:	bd10      	pop	{r4, pc}

0800cd40 <memset>:
 800cd40:	4402      	add	r2, r0
 800cd42:	4603      	mov	r3, r0
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d100      	bne.n	800cd4a <memset+0xa>
 800cd48:	4770      	bx	lr
 800cd4a:	f803 1b01 	strb.w	r1, [r3], #1
 800cd4e:	e7f9      	b.n	800cd44 <memset+0x4>

0800cd50 <_init>:
 800cd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd52:	bf00      	nop
 800cd54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd56:	bc08      	pop	{r3}
 800cd58:	469e      	mov	lr, r3
 800cd5a:	4770      	bx	lr

0800cd5c <_fini>:
 800cd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd5e:	bf00      	nop
 800cd60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd62:	bc08      	pop	{r3}
 800cd64:	469e      	mov	lr, r3
 800cd66:	4770      	bx	lr
