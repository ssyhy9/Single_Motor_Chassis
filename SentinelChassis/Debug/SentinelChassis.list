
SentinelChassis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d218  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800d3a8  0800d3a8  0001d3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d448  0800d448  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d448  0800d448  0001d448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d450  0800d450  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d450  0800d450  0001d450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d454  0800d454  0001d454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800d458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000053e0  2000000c  0800d464  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00004004  200053ec  0800d464  000253ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031fb9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006852  00000000  00000000  00051ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002180  00000000  00000000  00058848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ee0  00000000  00000000  0005a9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029963  00000000  00000000  0005c8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002afbe  00000000  00000000  0008620b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5500  00000000  00000000  000b11c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001966c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008bc8  00000000  00000000  0019671c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d390 	.word	0x0800d390

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	0800d390 	.word	0x0800d390

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b96e 	b.w	8000e60 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	468c      	mov	ip, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8083 	bne.w	8000cb2 <__udivmoddi4+0x116>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4617      	mov	r7, r2
 8000bb0:	d947      	bls.n	8000c42 <__udivmoddi4+0xa6>
 8000bb2:	fab2 f282 	clz	r2, r2
 8000bb6:	b142      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb8:	f1c2 0020 	rsb	r0, r2, #32
 8000bbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000bc0:	4091      	lsls	r1, r2
 8000bc2:	4097      	lsls	r7, r2
 8000bc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000bd4:	fa1f fe87 	uxth.w	lr, r7
 8000bd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be0:	fb06 f10e 	mul.w	r1, r6, lr
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x60>
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bee:	f080 8119 	bcs.w	8000e24 <__udivmoddi4+0x288>
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	f240 8116 	bls.w	8000e24 <__udivmoddi4+0x288>
 8000bf8:	3e02      	subs	r6, #2
 8000bfa:	443b      	add	r3, r7
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c04:	fb08 3310 	mls	r3, r8, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x8c>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1a:	f080 8105 	bcs.w	8000e28 <__udivmoddi4+0x28c>
 8000c1e:	45a6      	cmp	lr, r4
 8000c20:	f240 8102 	bls.w	8000e28 <__udivmoddi4+0x28c>
 8000c24:	3802      	subs	r0, #2
 8000c26:	443c      	add	r4, r7
 8000c28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	2600      	movs	r6, #0
 8000c32:	b11d      	cbz	r5, 8000c3c <__udivmoddi4+0xa0>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c5 4300 	strd	r4, r3, [r5]
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	b902      	cbnz	r2, 8000c46 <__udivmoddi4+0xaa>
 8000c44:	deff      	udf	#255	; 0xff
 8000c46:	fab2 f282 	clz	r2, r2
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	d150      	bne.n	8000cf0 <__udivmoddi4+0x154>
 8000c4e:	1bcb      	subs	r3, r1, r7
 8000c50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c54:	fa1f f887 	uxth.w	r8, r7
 8000c58:	2601      	movs	r6, #1
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c21      	lsrs	r1, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c68:	fb08 f30c 	mul.w	r3, r8, ip
 8000c6c:	428b      	cmp	r3, r1
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0xe4>
 8000c70:	1879      	adds	r1, r7, r1
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0xe2>
 8000c78:	428b      	cmp	r3, r1
 8000c7a:	f200 80e9 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000c7e:	4684      	mov	ip, r0
 8000c80:	1ac9      	subs	r1, r1, r3
 8000c82:	b2a3      	uxth	r3, r4
 8000c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c90:	fb08 f800 	mul.w	r8, r8, r0
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x10c>
 8000c98:	193c      	adds	r4, r7, r4
 8000c9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x10a>
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	f200 80d9 	bhi.w	8000e58 <__udivmoddi4+0x2bc>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	eba4 0408 	sub.w	r4, r4, r8
 8000cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb0:	e7bf      	b.n	8000c32 <__udivmoddi4+0x96>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0x12e>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80b1 	beq.w	8000e1e <__udivmoddi4+0x282>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x1cc>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0x140>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80b8 	bhi.w	8000e4c <__udivmoddi4+0x2b0>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0103 	sbc.w	r1, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0a8      	beq.n	8000c3c <__udivmoddi4+0xa0>
 8000cea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cee:	e7a5      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cf8:	4097      	lsls	r7, r2
 8000cfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d02:	40d9      	lsrs	r1, r3
 8000d04:	4330      	orrs	r0, r6
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d0c:	fa1f f887 	uxth.w	r8, r7
 8000d10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d18:	fb06 f108 	mul.w	r1, r6, r8
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d2a:	f080 808d 	bcs.w	8000e48 <__udivmoddi4+0x2ac>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 808a 	bls.w	8000e48 <__udivmoddi4+0x2ac>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b281      	uxth	r1, r0
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d48:	fb00 f308 	mul.w	r3, r0, r8
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0x1c4>
 8000d50:	1879      	adds	r1, r7, r1
 8000d52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d56:	d273      	bcs.n	8000e40 <__udivmoddi4+0x2a4>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d971      	bls.n	8000e40 <__udivmoddi4+0x2a4>
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	4439      	add	r1, r7
 8000d60:	1acb      	subs	r3, r1, r3
 8000d62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d66:	e778      	b.n	8000c5a <__udivmoddi4+0xbe>
 8000d68:	f1c6 0c20 	rsb	ip, r6, #32
 8000d6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d86:	431f      	orrs	r7, r3
 8000d88:	0c3b      	lsrs	r3, r7, #16
 8000d8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d8e:	fa1f f884 	uxth.w	r8, r4
 8000d92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d9e:	458a      	cmp	sl, r1
 8000da0:	fa02 f206 	lsl.w	r2, r2, r6
 8000da4:	fa00 f306 	lsl.w	r3, r0, r6
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x220>
 8000daa:	1861      	adds	r1, r4, r1
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db0:	d248      	bcs.n	8000e44 <__udivmoddi4+0x2a8>
 8000db2:	458a      	cmp	sl, r1
 8000db4:	d946      	bls.n	8000e44 <__udivmoddi4+0x2a8>
 8000db6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dba:	4421      	add	r1, r4
 8000dbc:	eba1 010a 	sub.w	r1, r1, sl
 8000dc0:	b2bf      	uxth	r7, r7
 8000dc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dce:	fb00 f808 	mul.w	r8, r0, r8
 8000dd2:	45b8      	cmp	r8, r7
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x24a>
 8000dd6:	19e7      	adds	r7, r4, r7
 8000dd8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ddc:	d22e      	bcs.n	8000e3c <__udivmoddi4+0x2a0>
 8000dde:	45b8      	cmp	r8, r7
 8000de0:	d92c      	bls.n	8000e3c <__udivmoddi4+0x2a0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	4427      	add	r7, r4
 8000de6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dea:	eba7 0708 	sub.w	r7, r7, r8
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	454f      	cmp	r7, r9
 8000df4:	46c6      	mov	lr, r8
 8000df6:	4649      	mov	r1, r9
 8000df8:	d31a      	bcc.n	8000e30 <__udivmoddi4+0x294>
 8000dfa:	d017      	beq.n	8000e2c <__udivmoddi4+0x290>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x27a>
 8000dfe:	ebb3 020e 	subs.w	r2, r3, lr
 8000e02:	eb67 0701 	sbc.w	r7, r7, r1
 8000e06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e0a:	40f2      	lsrs	r2, r6
 8000e0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e10:	40f7      	lsrs	r7, r6
 8000e12:	e9c5 2700 	strd	r2, r7, [r5]
 8000e16:	2600      	movs	r6, #0
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	462e      	mov	r6, r5
 8000e20:	4628      	mov	r0, r5
 8000e22:	e70b      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000e24:	4606      	mov	r6, r0
 8000e26:	e6e9      	b.n	8000bfc <__udivmoddi4+0x60>
 8000e28:	4618      	mov	r0, r3
 8000e2a:	e6fd      	b.n	8000c28 <__udivmoddi4+0x8c>
 8000e2c:	4543      	cmp	r3, r8
 8000e2e:	d2e5      	bcs.n	8000dfc <__udivmoddi4+0x260>
 8000e30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e34:	eb69 0104 	sbc.w	r1, r9, r4
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e7df      	b.n	8000dfc <__udivmoddi4+0x260>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e7d2      	b.n	8000de6 <__udivmoddi4+0x24a>
 8000e40:	4660      	mov	r0, ip
 8000e42:	e78d      	b.n	8000d60 <__udivmoddi4+0x1c4>
 8000e44:	4681      	mov	r9, r0
 8000e46:	e7b9      	b.n	8000dbc <__udivmoddi4+0x220>
 8000e48:	4666      	mov	r6, ip
 8000e4a:	e775      	b.n	8000d38 <__udivmoddi4+0x19c>
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	e74a      	b.n	8000ce6 <__udivmoddi4+0x14a>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	4439      	add	r1, r7
 8000e56:	e713      	b.n	8000c80 <__udivmoddi4+0xe4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	443c      	add	r4, r7
 8000e5c:	e724      	b.n	8000ca8 <__udivmoddi4+0x10c>
 8000e5e:	bf00      	nop

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * @brief:        Send Data to the APP layer to do data processing when receiving data from CAN port
 * @param[in]:    hcan: The CAN port that have data transmitted in
 * @param[out]:   rx_data: The data received from HAL layer, to be transmitted to the APP layer
 * @retvel:       None
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08c      	sub	sp, #48	; 0x30
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	uint8_t rx_data[8];

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data); //Get Data From HAL Layer
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	f107 0214 	add.w	r2, r7, #20
 8000e74:	2100      	movs	r1, #0
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f002 fcfb 	bl	8003872 <HAL_CAN_GetRxMessage>

    get_motor_measure(&Motor_Message, rx_data);
 8000e7c:	7b3b      	ldrb	r3, [r7, #12]
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	b21a      	sxth	r2, r3
 8000e82:	7b7b      	ldrb	r3, [r7, #13]
 8000e84:	b21b      	sxth	r3, r3
 8000e86:	4313      	orrs	r3, r2
 8000e88:	b21b      	sxth	r3, r3
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000e8e:	801a      	strh	r2, [r3, #0]
 8000e90:	7bbb      	ldrb	r3, [r7, #14]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	b21a      	sxth	r2, r3
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	b21b      	sxth	r3, r3
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	b21a      	sxth	r2, r3
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000ea0:	805a      	strh	r2, [r3, #2]
 8000ea2:	7c3b      	ldrb	r3, [r7, #16]
 8000ea4:	021b      	lsls	r3, r3, #8
 8000ea6:	b21a      	sxth	r2, r3
 8000ea8:	7c7b      	ldrb	r3, [r7, #17]
 8000eaa:	b21b      	sxth	r3, r3
 8000eac:	4313      	orrs	r3, r2
 8000eae:	b21a      	sxth	r2, r3
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000eb2:	809a      	strh	r2, [r3, #4]
 8000eb4:	7cba      	ldrb	r2, [r7, #18]
 8000eb6:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000eb8:	719a      	strb	r2, [r3, #6]
}
 8000eba:	bf00      	nop
 8000ebc:	3730      	adds	r7, #48	; 0x30
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200049a4 	.word	0x200049a4

08000ec8 <APP_Send_Msg_to_Motor>:


void APP_Send_Msg_to_Motor(uint16_t speed) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08c      	sub	sp, #48	; 0x30
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	80fb      	strh	r3, [r7, #6]
	uint32_t send_mail_box;
	CAN_TxHeaderTypeDef TxHeader;
	uint8_t DATA[8] = { 0 };
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]

	TxHeader.StdId = CAN_CHASSIS_ID;
 8000eda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ede:	617b      	str	r3, [r7, #20]
	TxHeader.IDE = CAN_ID_STD;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
	TxHeader.RTR = CAN_RTR_DATA;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
	TxHeader.DLC = 0x08;
 8000ee8:	2308      	movs	r3, #8
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
	DATA[0] = speed >> 8;
 8000eec:	88fb      	ldrh	r3, [r7, #6]
 8000eee:	0a1b      	lsrs	r3, r3, #8
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	733b      	strb	r3, [r7, #12]
	DATA[1] = speed;
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	737b      	strb	r3, [r7, #13]

	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, DATA, &send_mail_box);
 8000efc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f00:	f107 020c 	add.w	r2, r7, #12
 8000f04:	f107 0114 	add.w	r1, r7, #20
 8000f08:	4803      	ldr	r0, [pc, #12]	; (8000f18 <APP_Send_Msg_to_Motor+0x50>)
 8000f0a:	f002 fbd7 	bl	80036bc <HAL_CAN_AddTxMessage>
}
 8000f0e:	bf00      	nop
 8000f10:	3730      	adds	r7, #48	; 0x30
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20004a84 	.word	0x20004a84

08000f1c <get_side_board_data_point>:
  * @brief          return the side board data point
  * @param[in]      none
  * @retval         side board data point
  */
const motor_measure_t *get_side_board_data_point(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
    return &Motor_Message;
 8000f20:	4b02      	ldr	r3, [pc, #8]	; (8000f2c <get_side_board_data_point+0x10>)
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	200049a4 	.word	0x200049a4

08000f30 <chassis_task>:
  *					->send all current command through CAN
  * @param[in]      pvParameters: null
  * @retval         none
  */
void chassis_task(void *pvParameters)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
    //wait for a period initially
    vTaskDelay(CHASSIS_TASK_INIT_TIME);
 8000f38:	f240 1065 	movw	r0, #357	; 0x165
 8000f3c:	f00a faf8 	bl	800b530 <vTaskDelay>

    //chassis initialization
    chassis_init(&motor_system);
 8000f40:	483d      	ldr	r0, [pc, #244]	; (8001038 <chassis_task+0x108>)
 8000f42:	f000 f885 	bl	8001050 <chassis_init>

    while (1)
    {

        //it was included in "chassis_set_control", temporarily added for testing
        chassis_rc_to_control_vector(&motor_system);
 8000f46:	483c      	ldr	r0, [pc, #240]	; (8001038 <chassis_task+0x108>)
 8000f48:	f000 f8ce 	bl	80010e8 <chassis_rc_to_control_vector>

        //chassis control pid calculate
        chassis_control_loop(&motor_system);
 8000f4c:	483a      	ldr	r0, [pc, #232]	; (8001038 <chassis_task+0x108>)
 8000f4e:	f000 f9df 	bl	8001310 <chassis_control_loop>

        real_power = motor_system.current * M3508VOLT / 1.8;
 8000f52:	4b39      	ldr	r3, [pc, #228]	; (8001038 <chassis_task+0x108>)
 8000f54:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f58:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8000f5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f60:	ee17 0a90 	vmov	r0, s15
 8000f64:	f7ff fa98 	bl	8000498 <__aeabi_f2d>
 8000f68:	a331      	add	r3, pc, #196	; (adr r3, 8001030 <chassis_task+0x100>)
 8000f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6e:	f7ff fc15 	bl	800079c <__aeabi_ddiv>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4610      	mov	r0, r2
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f7ff fda7 	bl	8000acc <__aeabi_d2f>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4a2e      	ldr	r2, [pc, #184]	; (800103c <chassis_task+0x10c>)
 8000f82:	6013      	str	r3, [r2, #0]

    	if(real_power > 40 || real_power < -40)
 8000f84:	4b2d      	ldr	r3, [pc, #180]	; (800103c <chassis_task+0x10c>)
 8000f86:	edd3 7a00 	vldr	s15, [r3]
 8000f8a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001040 <chassis_task+0x110>
 8000f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f96:	dc09      	bgt.n	8000fac <chassis_task+0x7c>
 8000f98:	4b28      	ldr	r3, [pc, #160]	; (800103c <chassis_task+0x10c>)
 8000f9a:	edd3 7a00 	vldr	s15, [r3]
 8000f9e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001044 <chassis_task+0x114>
 8000fa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000faa:	d503      	bpl.n	8000fb4 <chassis_task+0x84>
    		current_flag = 0;
 8000fac:	4b26      	ldr	r3, [pc, #152]	; (8001048 <chassis_task+0x118>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	801a      	strh	r2, [r3, #0]
 8000fb2:	e002      	b.n	8000fba <chassis_task+0x8a>
    	else
    		current_flag = 1;
 8000fb4:	4b24      	ldr	r3, [pc, #144]	; (8001048 <chassis_task+0x118>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	801a      	strh	r2, [r3, #0]

        if(current_flag == 1){
 8000fba:	4b23      	ldr	r3, [pc, #140]	; (8001048 <chassis_task+0x118>)
 8000fbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d106      	bne.n	8000fd2 <chassis_task+0xa2>
        //send command current to motors via CAN1
        APP_Send_Msg_to_Motor(motor_system.give_current);
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <chassis_task+0x108>)
 8000fc6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff7b 	bl	8000ec8 <APP_Send_Msg_to_Motor>
       // APP_Send_Msg_to_Motor(1000);
        }

        if(current_flag == 0 && direction_flag == RIGHT){
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <chassis_task+0x118>)
 8000fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d108      	bne.n	8000fee <chassis_task+0xbe>
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	; (800104c <chassis_task+0x11c>)
 8000fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d103      	bne.n	8000fee <chassis_task+0xbe>
        	APP_Send_Msg_to_Motor(2000);
 8000fe6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fea:	f7ff ff6d 	bl	8000ec8 <APP_Send_Msg_to_Motor>
        }

        if(current_flag == 0 && direction_flag == STOP){
 8000fee:	4b16      	ldr	r3, [pc, #88]	; (8001048 <chassis_task+0x118>)
 8000ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d107      	bne.n	8001008 <chassis_task+0xd8>
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <chassis_task+0x11c>)
 8000ffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d102      	bne.n	8001008 <chassis_task+0xd8>
        	APP_Send_Msg_to_Motor(0);
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff ff60 	bl	8000ec8 <APP_Send_Msg_to_Motor>
        }

        if(current_flag == 0 && direction_flag == LEFT){
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <chassis_task+0x118>)
 800100a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d108      	bne.n	8001024 <chassis_task+0xf4>
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <chassis_task+0x11c>)
 8001014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001018:	2b03      	cmp	r3, #3
 800101a:	d103      	bne.n	8001024 <chassis_task+0xf4>
        	APP_Send_Msg_to_Motor(-2000);
 800101c:	f64f 0030 	movw	r0, #63536	; 0xf830
 8001020:	f7ff ff52 	bl	8000ec8 <APP_Send_Msg_to_Motor>
        }

        //OS delay
        vTaskDelay(CHASSIS_CONTROL_TIME_MS);
 8001024:	2002      	movs	r0, #2
 8001026:	f00a fa83 	bl	800b530 <vTaskDelay>
        chassis_rc_to_control_vector(&motor_system);
 800102a:	e78c      	b.n	8000f46 <chassis_task+0x16>
 800102c:	f3af 8000 	nop.w
 8001030:	cccccccd 	.word	0xcccccccd
 8001034:	3ffccccc 	.word	0x3ffccccc
 8001038:	200049b8 	.word	0x200049b8
 800103c:	20004a34 	.word	0x20004a34
 8001040:	42200000 	.word	0x42200000
 8001044:	c2200000 	.word	0xc2200000
 8001048:	20004a38 	.word	0x20004a38
 800104c:	200049b0 	.word	0x200049b0

08001050 <chassis_init>:
  *                 ->2006 chassis motor data pointer initialization
  * @param[out]     chassis_move_init: "chassis_move" pointer
  * @retval         none
  */
static void chassis_init(chassis_motor_t *chassis_move_init)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
    if (chassis_move_init == NULL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d021      	beq.n	80010a2 <chassis_init+0x52>
    {
        return;
    }
    //Start Timer2
    HAL_TIM_Base_Start_IT(&htim2);
 800105e:	4813      	ldr	r0, [pc, #76]	; (80010ac <chassis_init+0x5c>)
 8001060:	f005 fc14 	bl	800688c <HAL_TIM_Base_Start_IT>

    current_flag = 1;
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <chassis_init+0x60>)
 8001066:	2201      	movs	r2, #1
 8001068:	801a      	strh	r2, [r3, #0]
    direction_flag = STOP;
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <chassis_init+0x64>)
 800106c:	2202      	movs	r2, #2
 800106e:	801a      	strh	r2, [r3, #0]

    //chassis m3508 motor speed PID
    const static float32_t m3508_speed_pid[3] = {M3508_MOTOR_SPEED_PID_KP, M3508_MOTOR_SPEED_PID_KI, M3508_MOTOR_SPEED_PID_KD};
    
    //get RC data pointer
    chassis_move_init->chassis_RC = get_remote_control_point();
 8001070:	f000 f9e0 	bl	8001434 <get_remote_control_point>
 8001074:	4602      	mov	r2, r0
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	621a      	str	r2, [r3, #32]

	//get CAN data pointer
	chassis_move_init->wheel_measure = get_side_board_data_point();
 800107a:	f7ff ff4f 	bl	8000f1c <get_side_board_data_point>
 800107e:	4602      	mov	r2, r0
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	601a      	str	r2, [r3, #0]

	//initialize m3508 speed PID
	PID_init(&chassis_move_init->m3508_speed_pid, PID_POSITION, m3508_speed_pid, M3508_MOTOR_SPEED_PID_MAX_OUT, M3508_MOTOR_SPEED_PID_MAX_IOUT);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3334      	adds	r3, #52	; 0x34
 8001088:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80010b8 <chassis_init+0x68>
 800108c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80010bc <chassis_init+0x6c>
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <chassis_init+0x70>)
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f000 fcbb 	bl	8001a10 <PID_init>

    //update data
    chassis_feedback_update(chassis_move_init);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f000 f812 	bl	80010c4 <chassis_feedback_update>
 80010a0:	e000      	b.n	80010a4 <chassis_init+0x54>
        return;
 80010a2:	bf00      	nop

}
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20004cc4 	.word	0x20004cc4
 80010b0:	20004a38 	.word	0x20004a38
 80010b4:	200049b0 	.word	0x200049b0
 80010b8:	44fa0000 	.word	0x44fa0000
 80010bc:	467a0000 	.word	0x467a0000
 80010c0:	0800d3d4 	.word	0x0800d3d4

080010c4 <chassis_feedback_update>:
  *                 such as rc data, euler angle, self-rotation speed, motor speed and robot speed
  * @param[out]     chassis_move_update: "chassis_move" pointer
  * @retval         none
  */
static void chassis_feedback_update(chassis_motor_t *chassis_move_update)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
    if (chassis_move_update == NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d005      	beq.n	80010de <chassis_feedback_update+0x1a>
    {
        return;
    }

    //update the values return from remote controller
    chassis_move_update->chassis_RC = get_remote_control_point();
 80010d2:	f000 f9af 	bl	8001434 <get_remote_control_point>
 80010d6:	4602      	mov	r2, r0
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	621a      	str	r2, [r3, #32]
 80010dc:	e000      	b.n	80010e0 <chassis_feedback_update+0x1c>
        return;
 80010de:	bf00      	nop
}
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <chassis_rc_to_control_vector>:
  * @param[out]     vy_set: horizontal speed set-point
  * @param[out]     chassis_move_rc_to_vector: "chassis_move" pointer
  * @retval         none
  */
void chassis_rc_to_control_vector(chassis_motor_t *chassis_move_rc_to_vector)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
    if (chassis_move_rc_to_vector == NULL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 80f8 	beq.w	80012e8 <chassis_rc_to_control_vector+0x200>
    
    int16_t x_channel;			//original data return from remote controller's channel 1
    int16_t y_channel;			//original data return from remote controller's channel 0
    int16_t wz_channel;

    chassis_feedback_update(chassis_move_rc_to_vector);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ffe3 	bl	80010c4 <chassis_feedback_update>

	//original data return from remote controller's channel 4

    //update the values get from remote controller
    //pay attention to the sign of "y" here
    x_channel = chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_X_CHANNEL];
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	789a      	ldrb	r2, [r3, #2]
 8001104:	78db      	ldrb	r3, [r3, #3]
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	4313      	orrs	r3, r2
 800110a:	041b      	lsls	r3, r3, #16
 800110c:	141b      	asrs	r3, r3, #16
 800110e:	81fb      	strh	r3, [r7, #14]
    y_channel = -chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_Y_CHANNEL];
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001118:	b21b      	sxth	r3, r3
 800111a:	b29b      	uxth	r3, r3
 800111c:	425b      	negs	r3, r3
 800111e:	b29b      	uxth	r3, r3
 8001120:	81bb      	strh	r3, [r7, #12]
    wz_channel = chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_WZ_CHANNEL];
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a1b      	ldr	r3, [r3, #32]
 8001126:	7a1a      	ldrb	r2, [r3, #8]
 8001128:	7a5b      	ldrb	r3, [r3, #9]
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	4313      	orrs	r3, r2
 800112e:	041b      	lsls	r3, r3, #16
 8001130:	141b      	asrs	r3, r3, #16
 8001132:	817b      	strh	r3, [r7, #10]

    //dead zone limit, because some remote control need be calibrated
    //the value of joy stick is not zero in middle place
    rc_deadband_limit(chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_X_CHANNEL], x_channel, CHASSIS_RC_DEADLINE);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800113c:	b21b      	sxth	r3, r3
 800113e:	2b0a      	cmp	r3, #10
 8001140:	dc07      	bgt.n	8001152 <chassis_rc_to_control_vector+0x6a>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a1b      	ldr	r3, [r3, #32]
 8001146:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800114a:	b21b      	sxth	r3, r3
 800114c:	f113 0f0a 	cmn.w	r3, #10
 8001150:	da09      	bge.n	8001166 <chassis_rc_to_control_vector+0x7e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a1b      	ldr	r3, [r3, #32]
 8001156:	789a      	ldrb	r2, [r3, #2]
 8001158:	78db      	ldrb	r3, [r3, #3]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	4313      	orrs	r3, r2
 800115e:	041b      	lsls	r3, r3, #16
 8001160:	141b      	asrs	r3, r3, #16
 8001162:	81fb      	strh	r3, [r7, #14]
 8001164:	e001      	b.n	800116a <chassis_rc_to_control_vector+0x82>
 8001166:	2300      	movs	r3, #0
 8001168:	81fb      	strh	r3, [r7, #14]
    rc_deadband_limit(chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_Y_CHANNEL], y_channel, CHASSIS_RC_DEADLINE);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a1b      	ldr	r3, [r3, #32]
 800116e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001172:	b21b      	sxth	r3, r3
 8001174:	2b0a      	cmp	r3, #10
 8001176:	dc07      	bgt.n	8001188 <chassis_rc_to_control_vector+0xa0>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001180:	b21b      	sxth	r3, r3
 8001182:	f113 0f0a 	cmn.w	r3, #10
 8001186:	da09      	bge.n	800119c <chassis_rc_to_control_vector+0xb4>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	781a      	ldrb	r2, [r3, #0]
 800118e:	785b      	ldrb	r3, [r3, #1]
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	4313      	orrs	r3, r2
 8001194:	041b      	lsls	r3, r3, #16
 8001196:	141b      	asrs	r3, r3, #16
 8001198:	81bb      	strh	r3, [r7, #12]
 800119a:	e001      	b.n	80011a0 <chassis_rc_to_control_vector+0xb8>
 800119c:	2300      	movs	r3, #0
 800119e:	81bb      	strh	r3, [r7, #12]
    rc_deadband_limit(chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_WZ_CHANNEL], wz_channel, CHASSIS_RC_DEADLINE);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	2b0a      	cmp	r3, #10
 80011ac:	dc07      	bgt.n	80011be <chassis_rc_to_control_vector+0xd6>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	f113 0f0a 	cmn.w	r3, #10
 80011bc:	da09      	bge.n	80011d2 <chassis_rc_to_control_vector+0xea>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	7a1a      	ldrb	r2, [r3, #8]
 80011c4:	7a5b      	ldrb	r3, [r3, #9]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	4313      	orrs	r3, r2
 80011ca:	041b      	lsls	r3, r3, #16
 80011cc:	141b      	asrs	r3, r3, #16
 80011ce:	817b      	strh	r3, [r7, #10]
 80011d0:	e001      	b.n	80011d6 <chassis_rc_to_control_vector+0xee>
 80011d2:	2300      	movs	r3, #0
 80011d4:	817b      	strh	r3, [r7, #10]

    chassis_move_rc_to_vector->x_channel_origin = x_channel;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	89fa      	ldrh	r2, [r7, #14]
 80011da:	849a      	strh	r2, [r3, #36]	; 0x24
    chassis_move_rc_to_vector->y_channel_origin = y_channel;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	89ba      	ldrh	r2, [r7, #12]
 80011e0:	84da      	strh	r2, [r3, #38]	; 0x26
    chassis_move_rc_to_vector->wz_channel_origin = wz_channel;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	897a      	ldrh	r2, [r7, #10]
 80011e6:	851a      	strh	r2, [r3, #40]	; 0x28
    chassis_move_rc_to_vector->x_set = x_channel * CHASSIS_X_RC_SEN;
 80011e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011f4:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001300 <chassis_rc_to_control_vector+0x218>
 80011f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    chassis_move_rc_to_vector->y_set = y_channel * CHASSIS_Y_RC_SEN;
 8001202:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001206:	ee07 3a90 	vmov	s15, r3
 800120a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800120e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001304 <chassis_rc_to_control_vector+0x21c>
 8001212:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800121a:	ee17 3a90 	vmov	r3, s15
 800121e:	b21a      	sxth	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	861a      	strh	r2, [r3, #48]	; 0x30
    chassis_move_rc_to_vector->wz_set = wz_channel * CHASSIS_WZ_RC_SEN;
 8001224:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001228:	ee07 3a90 	vmov	s15, r3
 800122c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001230:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001304 <chassis_rc_to_control_vector+0x21c>
 8001234:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001238:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800123c:	ee17 3a90 	vmov	r3, s15
 8001240:	b21a      	sxth	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	865a      	strh	r2, [r3, #50]	; 0x32

    chassis_move_rc_to_vector->speed = M3508_MOTOR_RPM_TO_VECTOR * chassis_move_rc_to_vector->wheel_measure->speed_rpm;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001256:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001308 <chassis_rc_to_control_vector+0x220>
 800125a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	edc3 7a01 	vstr	s15, [r3, #4]

    chassis_move_rc_to_vector->speed_set = chassis_move_rc_to_vector->x_set;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	609a      	str	r2, [r3, #8]

	if(chassis_move_rc_to_vector->x_set > 0.2){
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f911 	bl	8000498 <__aeabi_f2d>
 8001276:	a31e      	add	r3, pc, #120	; (adr r3, 80012f0 <chassis_rc_to_control_vector+0x208>)
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	f7ff fbf4 	bl	8000a68 <__aeabi_dcmpgt>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <chassis_rc_to_control_vector+0x1a4>
		direction_flag = RIGHT;
 8001286:	4b21      	ldr	r3, [pc, #132]	; (800130c <chassis_rc_to_control_vector+0x224>)
 8001288:	2201      	movs	r2, #1
 800128a:	801a      	strh	r2, [r3, #0]
	}
	if(chassis_move_rc_to_vector->x_set <= 0.2 && chassis_move_rc_to_vector->x_set >= -0.2){
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f901 	bl	8000498 <__aeabi_f2d>
 8001296:	a316      	add	r3, pc, #88	; (adr r3, 80012f0 <chassis_rc_to_control_vector+0x208>)
 8001298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129c:	f7ff fbd0 	bl	8000a40 <__aeabi_dcmple>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00f      	beq.n	80012c6 <chassis_rc_to_control_vector+0x1de>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f8f4 	bl	8000498 <__aeabi_f2d>
 80012b0:	a311      	add	r3, pc, #68	; (adr r3, 80012f8 <chassis_rc_to_control_vector+0x210>)
 80012b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b6:	f7ff fbcd 	bl	8000a54 <__aeabi_dcmpge>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d002      	beq.n	80012c6 <chassis_rc_to_control_vector+0x1de>
		direction_flag = STOP;
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <chassis_rc_to_control_vector+0x224>)
 80012c2:	2202      	movs	r2, #2
 80012c4:	801a      	strh	r2, [r3, #0]
	}
	if(chassis_move_rc_to_vector->x_set < -0.2){
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f8e4 	bl	8000498 <__aeabi_f2d>
 80012d0:	a309      	add	r3, pc, #36	; (adr r3, 80012f8 <chassis_rc_to_control_vector+0x210>)
 80012d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d6:	f7ff fba9 	bl	8000a2c <__aeabi_dcmplt>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d004      	beq.n	80012ea <chassis_rc_to_control_vector+0x202>
		direction_flag = LEFT;
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <chassis_rc_to_control_vector+0x224>)
 80012e2:	2203      	movs	r2, #3
 80012e4:	801a      	strh	r2, [r3, #0]
 80012e6:	e000      	b.n	80012ea <chassis_rc_to_control_vector+0x202>
        return;
 80012e8:	bf00      	nop
	}

}
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	9999999a 	.word	0x9999999a
 80012f4:	3fc99999 	.word	0x3fc99999
 80012f8:	9999999a 	.word	0x9999999a
 80012fc:	bfc99999 	.word	0xbfc99999
 8001300:	3bc49ba6 	.word	0x3bc49ba6
 8001304:	3ba3d70a 	.word	0x3ba3d70a
 8001308:	39da010a 	.word	0x39da010a
 800130c:	200049b0 	.word	0x200049b0

08001310 <chassis_control_loop>:
  *                 motor current, and motor currents will be sent to motors
  * @param[out]     chassis_move_control_loop: "chassis_move" pointer
  * @retval         none
  */
static void chassis_control_loop(chassis_motor_t *chassis_move_control_loop)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	chassis_move_control_loop->current = (chassis_move_control_loop->wheel_measure->given_current)/1000.0;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f8a7 	bl	8000474 <__aeabi_i2d>
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <chassis_control_loop+0xa4>)
 800132c:	f7ff fa36 	bl	800079c <__aeabi_ddiv>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4610      	mov	r0, r2
 8001336:	4619      	mov	r1, r3
 8001338:	f7ff fbc8 	bl	8000acc <__aeabi_d2f>
 800133c:	4602      	mov	r2, r0
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	60da      	str	r2, [r3, #12]
	chassis_move_control_loop->rpm = chassis_move_control_loop->wheel_measure->speed_rpm;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800134a:	ee07 3a90 	vmov	s15, r3
 800134e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	edc3 7a04 	vstr	s15, [r3, #16]

	//speed-closed-loop of spd_motor
	chassis_move_control_loop->give_current = 1.5 * (int16_t)PID_calc(&chassis_move_control_loop->m3508_speed_pid, \
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	edd3 7a01 	vldr	s15, [r3, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	ed93 7a02 	vldr	s14, [r3, #8]
 800136a:	eef0 0a47 	vmov.f32	s1, s14
 800136e:	eeb0 0a67 	vmov.f32	s0, s15
 8001372:	4610      	mov	r0, r2
 8001374:	f000 fba1 	bl	8001aba <PID_calc>
 8001378:	eef0 7a40 	vmov.f32	s15, s0
 800137c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001380:	ee17 3a90 	vmov	r3, s15
 8001384:	b21b      	sxth	r3, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f874 	bl	8000474 <__aeabi_i2d>
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <chassis_control_loop+0xa8>)
 8001392:	f7ff f8d9 	bl	8000548 <__aeabi_dmul>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4610      	mov	r0, r2
 800139c:	4619      	mov	r1, r3
 800139e:	f7ff fb6d 	bl	8000a7c <__aeabi_d2iz>
 80013a2:	4603      	mov	r3, r0
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	83da      	strh	r2, [r3, #30]
			chassis_move_control_loop->speed, chassis_move_control_loop->speed_set);
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	408f4000 	.word	0x408f4000
 80013b8:	3ff80000 	.word	0x3ff80000
 80013bc:	00000000 	.word	0x00000000

080013c0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
//	cnt++;
	refree_power = motor_system.current * M3508VOLT / 1.8;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80013ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80013ce:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80013d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013d6:	ee17 0a90 	vmov	r0, s15
 80013da:	f7ff f85d 	bl	8000498 <__aeabi_f2d>
 80013de:	a30a      	add	r3, pc, #40	; (adr r3, 8001408 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	f7ff f9da 	bl	800079c <__aeabi_ddiv>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	f7ff fb6c 	bl	8000acc <__aeabi_d2f>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4a07      	ldr	r2, [pc, #28]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80013f8:	6013      	str	r3, [r2, #0]

}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	f3af 8000 	nop.w
 8001408:	cccccccd 	.word	0xcccccccd
 800140c:	3ffccccc 	.word	0x3ffccccc
 8001410:	200049b8 	.word	0x200049b8
 8001414:	200049b4 	.word	0x200049b4

08001418 <remote_control_init>:
  * @brief          遥控器初始化
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
    RC_Init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 800141c:	2224      	movs	r2, #36	; 0x24
 800141e:	4903      	ldr	r1, [pc, #12]	; (800142c <remote_control_init+0x14>)
 8001420:	4803      	ldr	r0, [pc, #12]	; (8001430 <remote_control_init+0x18>)
 8001422:	f000 fa33 	bl	800188c <RC_Init>
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2000004c 	.word	0x2000004c
 8001430:	20000028 	.word	0x20000028

08001434 <get_remote_control_point>:
  * @brief          获取遥控器数据指针
  * @param[in]      none
  * @retval         遥控器数据指针
  */
const RC_ctrl_t *get_remote_control_point(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 8001438:	4b02      	ldr	r3, [pc, #8]	; (8001444 <get_remote_control_point+0x10>)
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	20004a3c 	.word	0x20004a3c

08001448 <USART3_IRQHandler>:
    RC_restart(SBUS_RX_BUF_NUM);
}

//串口中断
void USART3_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
    if(huart3.Instance->SR & UART_FLAG_RXNE)//接收到数据
 800144e:	4b47      	ldr	r3, [pc, #284]	; (800156c <USART3_IRQHandler+0x124>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0320 	and.w	r3, r3, #32
 8001458:	2b00      	cmp	r3, #0
 800145a:	d00b      	beq.n	8001474 <USART3_IRQHandler+0x2c>
    {
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 800145c:	2300      	movs	r3, #0
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	4b42      	ldr	r3, [pc, #264]	; (800156c <USART3_IRQHandler+0x124>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	4b40      	ldr	r3, [pc, #256]	; (800156c <USART3_IRQHandler+0x124>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
                sbus_to_usart1(sbus_rx_buf[1]);
            }
        }
    }

}
 8001472:	e076      	b.n	8001562 <USART3_IRQHandler+0x11a>
    else if(USART3->SR & UART_FLAG_IDLE)
 8001474:	4b3e      	ldr	r3, [pc, #248]	; (8001570 <USART3_IRQHandler+0x128>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0310 	and.w	r3, r3, #16
 800147c:	2b00      	cmp	r3, #0
 800147e:	d070      	beq.n	8001562 <USART3_IRQHandler+0x11a>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8001480:	2300      	movs	r3, #0
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	4b39      	ldr	r3, [pc, #228]	; (800156c <USART3_IRQHandler+0x124>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	4b37      	ldr	r3, [pc, #220]	; (800156c <USART3_IRQHandler+0x124>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart3_rx.Instance->CR & DMA_SxCR_CT) == RESET)
 8001496:	4b37      	ldr	r3, [pc, #220]	; (8001574 <USART3_IRQHandler+0x12c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d130      	bne.n	8001506 <USART3_IRQHandler+0xbe>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 80014a4:	4b33      	ldr	r3, [pc, #204]	; (8001574 <USART3_IRQHandler+0x12c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4b32      	ldr	r3, [pc, #200]	; (8001574 <USART3_IRQHandler+0x12c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 0201 	bic.w	r2, r2, #1
 80014b2:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 80014b4:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <USART3_IRQHandler+0x12c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <USART3_IRQHandler+0x130>)
 80014c4:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 80014c6:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <USART3_IRQHandler+0x12c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2224      	movs	r2, #36	; 0x24
 80014cc:	605a      	str	r2, [r3, #4]
            hdma_usart3_rx.Instance->CR |= DMA_SxCR_CT;
 80014ce:	4b29      	ldr	r3, [pc, #164]	; (8001574 <USART3_IRQHandler+0x12c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b27      	ldr	r3, [pc, #156]	; (8001574 <USART3_IRQHandler+0x12c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80014dc:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 80014de:	4b25      	ldr	r3, [pc, #148]	; (8001574 <USART3_IRQHandler+0x12c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b23      	ldr	r3, [pc, #140]	; (8001574 <USART3_IRQHandler+0x12c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f042 0201 	orr.w	r2, r2, #1
 80014ec:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 80014ee:	4b22      	ldr	r3, [pc, #136]	; (8001578 <USART3_IRQHandler+0x130>)
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	2b12      	cmp	r3, #18
 80014f4:	d135      	bne.n	8001562 <USART3_IRQHandler+0x11a>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 80014f6:	4921      	ldr	r1, [pc, #132]	; (800157c <USART3_IRQHandler+0x134>)
 80014f8:	4821      	ldr	r0, [pc, #132]	; (8001580 <USART3_IRQHandler+0x138>)
 80014fa:	f000 f847 	bl	800158c <sbus_to_rc>
                sbus_to_usart1(sbus_rx_buf[0]);
 80014fe:	4820      	ldr	r0, [pc, #128]	; (8001580 <USART3_IRQHandler+0x138>)
 8001500:	f000 f952 	bl	80017a8 <sbus_to_usart1>
}
 8001504:	e02d      	b.n	8001562 <USART3_IRQHandler+0x11a>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8001506:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <USART3_IRQHandler+0x12c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b19      	ldr	r3, [pc, #100]	; (8001574 <USART3_IRQHandler+0x12c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0201 	bic.w	r2, r2, #1
 8001514:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8001516:	4b17      	ldr	r3, [pc, #92]	; (8001574 <USART3_IRQHandler+0x12c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	b29b      	uxth	r3, r3
 800151e:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8001522:	b29a      	uxth	r2, r3
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <USART3_IRQHandler+0x130>)
 8001526:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <USART3_IRQHandler+0x12c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2224      	movs	r2, #36	; 0x24
 800152e:	605a      	str	r2, [r3, #4]
            DMA1_Stream1->CR &= ~(DMA_SxCR_CT);
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <USART3_IRQHandler+0x13c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a13      	ldr	r2, [pc, #76]	; (8001584 <USART3_IRQHandler+0x13c>)
 8001536:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800153a:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 800153c:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <USART3_IRQHandler+0x12c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <USART3_IRQHandler+0x12c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0201 	orr.w	r2, r2, #1
 800154a:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 800154c:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <USART3_IRQHandler+0x130>)
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	2b12      	cmp	r3, #18
 8001552:	d106      	bne.n	8001562 <USART3_IRQHandler+0x11a>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 8001554:	4909      	ldr	r1, [pc, #36]	; (800157c <USART3_IRQHandler+0x134>)
 8001556:	480c      	ldr	r0, [pc, #48]	; (8001588 <USART3_IRQHandler+0x140>)
 8001558:	f000 f818 	bl	800158c <sbus_to_rc>
                sbus_to_usart1(sbus_rx_buf[1]);
 800155c:	480a      	ldr	r0, [pc, #40]	; (8001588 <USART3_IRQHandler+0x140>)
 800155e:	f000 f923 	bl	80017a8 <sbus_to_usart1>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20004e14 	.word	0x20004e14
 8001570:	40004800 	.word	0x40004800
 8001574:	20004db4 	.word	0x20004db4
 8001578:	20000070 	.word	0x20000070
 800157c:	20004a3c 	.word	0x20004a3c
 8001580:	20000028 	.word	0x20000028
 8001584:	40026028 	.word	0x40026028
 8001588:	2000004c 	.word	0x2000004c

0800158c <sbus_to_rc>:
  * @param[in]      sbus_buf: 原生数据指针
  * @param[out]     rc_ctrl: 遥控器数据指
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80ff 	beq.w	800179c <sbus_to_rc+0x210>
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 80fb 	beq.w	800179c <sbus_to_rc+0x210>
    {
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3301      	adds	r3, #1
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	4313      	orrs	r3, r2
 80015bc:	b21b      	sxth	r3, r3
 80015be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3301      	adds	r3, #1
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	08db      	lsrs	r3, r3, #3
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	b21a      	sxth	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3302      	adds	r3, #2
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	015b      	lsls	r3, r3, #5
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	4313      	orrs	r3, r2
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3302      	adds	r3, #2
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	099b      	lsrs	r3, r3, #6
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3303      	adds	r3, #3
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	b21b      	sxth	r3, r3
 800160a:	4313      	orrs	r3, r2
 800160c:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3304      	adds	r3, #4
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	029b      	lsls	r3, r3, #10
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8001618:	b21b      	sxth	r3, r3
 800161a:	4313      	orrs	r3, r2
 800161c:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 800161e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001622:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3304      	adds	r3, #4
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	085b      	lsrs	r3, r3, #1
 8001632:	b2db      	uxtb	r3, r3
 8001634:	b21a      	sxth	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3305      	adds	r3, #5
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	01db      	lsls	r3, r3, #7
 8001640:	b21b      	sxth	r3, r3
 8001642:	4313      	orrs	r3, r2
 8001644:	b21b      	sxth	r3, r3
 8001646:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800164a:	b21a      	sxth	r2, r3
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  //!< Switch left
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3305      	adds	r3, #5
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	091b      	lsrs	r3, r3, #4
 800165a:	b2db      	uxtb	r3, r3
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	b2da      	uxtb	r2, r3
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3305      	adds	r3, #5
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	091b      	lsrs	r3, r3, #4
 8001670:	b2db      	uxtb	r3, r3
 8001672:	109b      	asrs	r3, r3, #2
 8001674:	b2db      	uxtb	r3, r3
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	b2da      	uxtb	r2, r3
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3306      	adds	r3, #6
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	b2db      	uxtb	r3, r3
 8001688:	b21a      	sxth	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3307      	adds	r3, #7
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	021b      	lsls	r3, r3, #8
 8001694:	b21b      	sxth	r3, r3
 8001696:	4313      	orrs	r3, r2
 8001698:	b21a      	sxth	r2, r3
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3308      	adds	r3, #8
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	b21a      	sxth	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3309      	adds	r3, #9
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	b21b      	sxth	r3, r3
 80016b4:	4313      	orrs	r3, r2
 80016b6:	b21a      	sxth	r2, r3
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	330a      	adds	r3, #10
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	b21a      	sxth	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	330b      	adds	r3, #11
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	021b      	lsls	r3, r3, #8
 80016d0:	b21b      	sxth	r3, r3
 80016d2:	4313      	orrs	r3, r2
 80016d4:	b21a      	sxth	r2, r3
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Press ?
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	7b1b      	ldrb	r3, [r3, #12]
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Press ?
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	7b5b      	ldrb	r3, [r3, #13]
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	330e      	adds	r3, #14
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	b21a      	sxth	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	330f      	adds	r3, #15
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	021b      	lsls	r3, r3, #8
 8001702:	b21b      	sxth	r3, r3
 8001704:	4313      	orrs	r3, r2
 8001706:	b21b      	sxth	r3, r3
 8001708:	b29a      	uxth	r2, r3
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //NULL
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3310      	adds	r3, #16
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	b21a      	sxth	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3311      	adds	r3, #17
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	b2db      	uxtb	r3, r3
 8001720:	021b      	lsls	r3, r3, #8
 8001722:	b21b      	sxth	r3, r3
 8001724:	4313      	orrs	r3, r2
 8001726:	b21a      	sxth	r2, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001732:	b21b      	sxth	r3, r3
 8001734:	b29b      	uxth	r3, r3
 8001736:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800173a:	b29b      	uxth	r3, r3
 800173c:	b21a      	sxth	r2, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001748:	b21b      	sxth	r3, r3
 800174a:	b29b      	uxth	r3, r3
 800174c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001750:	b29b      	uxth	r3, r3
 8001752:	b21a      	sxth	r2, r3
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800175e:	b21b      	sxth	r3, r3
 8001760:	b29b      	uxth	r3, r3
 8001762:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001766:	b29b      	uxth	r3, r3
 8001768:	b21a      	sxth	r2, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001774:	b21b      	sxth	r3, r3
 8001776:	b29b      	uxth	r3, r3
 8001778:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800177c:	b29b      	uxth	r3, r3
 800177e:	b21a      	sxth	r2, r3
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800178a:	b21b      	sxth	r3, r3
 800178c:	b29b      	uxth	r3, r3
 800178e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001792:	b29b      	uxth	r3, r3
 8001794:	b21a      	sxth	r2, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	811a      	strh	r2, [r3, #8]
 800179a:	e000      	b.n	800179e <sbus_to_rc+0x212>
        return;
 800179c:	bf00      	nop
}
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <sbus_to_usart1>:
  * @brief          通过usart1发送sbus数据,在usart3_IRQHandle调用
  * @param[in]      sbus: sbus数据, 18字节
  * @retval         none
  */
void sbus_to_usart1(uint8_t *sbus)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
    static uint8_t usart_tx_buf[20];
    static uint8_t i =0;
    usart_tx_buf[0] = 0xA6;
 80017b0:	4b16      	ldr	r3, [pc, #88]	; (800180c <sbus_to_usart1+0x64>)
 80017b2:	22a6      	movs	r2, #166	; 0xa6
 80017b4:	701a      	strb	r2, [r3, #0]
    memcpy(usart_tx_buf + 1, sbus, 18);
 80017b6:	4b16      	ldr	r3, [pc, #88]	; (8001810 <sbus_to_usart1+0x68>)
 80017b8:	2212      	movs	r2, #18
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	4618      	mov	r0, r3
 80017be:	f00b fdd1 	bl	800d364 <memcpy>
    for(i = 0, usart_tx_buf[19] = 0; i < 19; i++)
 80017c2:	4b14      	ldr	r3, [pc, #80]	; (8001814 <sbus_to_usart1+0x6c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
 80017c8:	4b10      	ldr	r3, [pc, #64]	; (800180c <sbus_to_usart1+0x64>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	74da      	strb	r2, [r3, #19]
 80017ce:	e010      	b.n	80017f2 <sbus_to_usart1+0x4a>
    {
        usart_tx_buf[19] += usart_tx_buf[i];
 80017d0:	4b0e      	ldr	r3, [pc, #56]	; (800180c <sbus_to_usart1+0x64>)
 80017d2:	7cda      	ldrb	r2, [r3, #19]
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <sbus_to_usart1+0x6c>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	4619      	mov	r1, r3
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <sbus_to_usart1+0x64>)
 80017dc:	5c5b      	ldrb	r3, [r3, r1]
 80017de:	4413      	add	r3, r2
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <sbus_to_usart1+0x64>)
 80017e4:	74da      	strb	r2, [r3, #19]
    for(i = 0, usart_tx_buf[19] = 0; i < 19; i++)
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <sbus_to_usart1+0x6c>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	3301      	adds	r3, #1
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <sbus_to_usart1+0x6c>)
 80017f0:	701a      	strb	r2, [r3, #0]
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <sbus_to_usart1+0x6c>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b12      	cmp	r3, #18
 80017f8:	d9ea      	bls.n	80017d0 <sbus_to_usart1+0x28>
    }
    usart1_tx_dma_enable(usart_tx_buf, 20);
 80017fa:	2114      	movs	r1, #20
 80017fc:	4803      	ldr	r0, [pc, #12]	; (800180c <sbus_to_usart1+0x64>)
 80017fe:	f000 f8a1 	bl	8001944 <usart1_tx_dma_enable>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000074 	.word	0x20000074
 8001810:	20000075 	.word	0x20000075
 8001814:	20000088 	.word	0x20000088

08001818 <can_filter_init>:
  * @brief		initialize CAN1 and CAN2 (to active receiving)
  * @param		none
  * @retval		none
  */
void can_filter_init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	; 0x28
 800181c:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 800181e:	2301      	movs	r3, #1
 8001820:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8001822:	2300      	movs	r3, #0
 8001824:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8001826:	2301      	movs	r3, #1
 8001828:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 800182a:	2300      	movs	r3, #0
 800182c:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 8001842:	463b      	mov	r3, r7
 8001844:	4619      	mov	r1, r3
 8001846:	480f      	ldr	r0, [pc, #60]	; (8001884 <can_filter_init+0x6c>)
 8001848:	f001 fe14 	bl	8003474 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 800184c:	480d      	ldr	r0, [pc, #52]	; (8001884 <can_filter_init+0x6c>)
 800184e:	f001 fef1 	bl	8003634 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001852:	2102      	movs	r1, #2
 8001854:	480b      	ldr	r0, [pc, #44]	; (8001884 <can_filter_init+0x6c>)
 8001856:	f002 f91e 	bl	8003a96 <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 14;
 800185a:	230e      	movs	r3, #14
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
    can_filter_st.FilterBank = 14;
 800185e:	230e      	movs	r3, #14
 8001860:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 8001862:	463b      	mov	r3, r7
 8001864:	4619      	mov	r1, r3
 8001866:	4808      	ldr	r0, [pc, #32]	; (8001888 <can_filter_init+0x70>)
 8001868:	f001 fe04 	bl	8003474 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 800186c:	4806      	ldr	r0, [pc, #24]	; (8001888 <can_filter_init+0x70>)
 800186e:	f001 fee1 	bl	8003634 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001872:	2102      	movs	r1, #2
 8001874:	4804      	ldr	r0, [pc, #16]	; (8001888 <can_filter_init+0x70>)
 8001876:	f002 f90e 	bl	8003a96 <HAL_CAN_ActivateNotification>
}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	; 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20004a84 	.word	0x20004a84
 8001888:	20004a5c 	.word	0x20004a5c

0800188c <RC_Init>:
  * @param[in]      rx2_buf: memory buffer 2
  * @param[in]      dma_buf_num: data length
  * @retval         none
  */
void RC_Init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	4613      	mov	r3, r2
 8001898:	80fb      	strh	r3, [r7, #6]

    //enable the DMA transfer for the receiver request
    SET_BIT(huart3.Instance->CR3, USART_CR3_DMAR);
 800189a:	4b27      	ldr	r3, [pc, #156]	; (8001938 <RC_Init+0xac>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	695a      	ldr	r2, [r3, #20]
 80018a0:	4b25      	ldr	r3, [pc, #148]	; (8001938 <RC_Init+0xac>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018a8:	615a      	str	r2, [r3, #20]

    //enable idle interrupt
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 80018aa:	4b23      	ldr	r3, [pc, #140]	; (8001938 <RC_Init+0xac>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68da      	ldr	r2, [r3, #12]
 80018b0:	4b21      	ldr	r3, [pc, #132]	; (8001938 <RC_Init+0xac>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f042 0210 	orr.w	r2, r2, #16
 80018b8:	60da      	str	r2, [r3, #12]

    //disable DMA
    __HAL_DMA_DISABLE(&hdma_usart3_rx);
 80018ba:	4b20      	ldr	r3, [pc, #128]	; (800193c <RC_Init+0xb0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b1e      	ldr	r3, [pc, #120]	; (800193c <RC_Init+0xb0>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 0201 	bic.w	r2, r2, #1
 80018c8:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN)
 80018ca:	e007      	b.n	80018dc <RC_Init+0x50>
    {
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 80018cc:	4b1b      	ldr	r3, [pc, #108]	; (800193c <RC_Init+0xb0>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	4b1a      	ldr	r3, [pc, #104]	; (800193c <RC_Init+0xb0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0201 	bic.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN)
 80018dc:	4b17      	ldr	r3, [pc, #92]	; (800193c <RC_Init+0xb0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <RC_Init+0x40>
    }

    hdma_usart3_rx.Instance->PAR = (uint32_t) & (USART3->DR);
 80018ea:	4b14      	ldr	r3, [pc, #80]	; (800193c <RC_Init+0xb0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a14      	ldr	r2, [pc, #80]	; (8001940 <RC_Init+0xb4>)
 80018f0:	609a      	str	r2, [r3, #8]
    //memory buffer 1
    hdma_usart3_rx.Instance->M0AR = (uint32_t)(rx1_buf);
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <RC_Init+0xb0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	60da      	str	r2, [r3, #12]
    //memory buffer 2
    hdma_usart3_rx.Instance->M1AR = (uint32_t)(rx2_buf);
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <RC_Init+0xb0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	611a      	str	r2, [r3, #16]
    //data length
    hdma_usart3_rx.Instance->NDTR = dma_buf_num;
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <RC_Init+0xb0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	88fa      	ldrh	r2, [r7, #6]
 8001908:	605a      	str	r2, [r3, #4]
    //enable double memory buffer
    SET_BIT(hdma_usart3_rx.Instance->CR, DMA_SxCR_DBM);
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <RC_Init+0xb0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <RC_Init+0xb0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001918:	601a      	str	r2, [r3, #0]

    //enable DMA
    __HAL_DMA_ENABLE(&hdma_usart3_rx);
 800191a:	4b08      	ldr	r3, [pc, #32]	; (800193c <RC_Init+0xb0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <RC_Init+0xb0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f042 0201 	orr.w	r2, r2, #1
 8001928:	601a      	str	r2, [r3, #0]
}
 800192a:	bf00      	nop
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	20004e14 	.word	0x20004e14
 800193c:	20004db4 	.word	0x20004db4
 8001940:	40004804 	.word	0x40004804

08001944 <usart1_tx_dma_enable>:
    hdma_usart1_tx.Instance->NDTR = 0;


}
void usart1_tx_dma_enable(uint8_t *data, uint16_t len)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	807b      	strh	r3, [r7, #2]
    //disable DMA
    //ʧЧDMA
    __HAL_DMA_DISABLE(&hdma_usart1_tx);
 8001950:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <usart1_tx_dma_enable+0xb4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <usart1_tx_dma_enable+0xb4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0201 	bic.w	r2, r2, #1
 800195e:	601a      	str	r2, [r3, #0]

    while(hdma_usart1_tx.Instance->CR & DMA_SxCR_EN)
 8001960:	e007      	b.n	8001972 <usart1_tx_dma_enable+0x2e>
    {
        __HAL_DMA_DISABLE(&hdma_usart1_tx);
 8001962:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <usart1_tx_dma_enable+0xb4>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b23      	ldr	r3, [pc, #140]	; (80019f8 <usart1_tx_dma_enable+0xb4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0201 	bic.w	r2, r2, #1
 8001970:	601a      	str	r2, [r3, #0]
    while(hdma_usart1_tx.Instance->CR & DMA_SxCR_EN)
 8001972:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <usart1_tx_dma_enable+0xb4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1f0      	bne.n	8001962 <usart1_tx_dma_enable+0x1e>
    }

    __HAL_DMA_CLEAR_FLAG(&hdma_usart1_tx, DMA_HISR_TCIF7);
 8001980:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <usart1_tx_dma_enable+0xb4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <usart1_tx_dma_enable+0xb8>)
 8001988:	429a      	cmp	r2, r3
 800198a:	d904      	bls.n	8001996 <usart1_tx_dma_enable+0x52>
 800198c:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <usart1_tx_dma_enable+0xbc>)
 800198e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001992:	60da      	str	r2, [r3, #12]
 8001994:	e019      	b.n	80019ca <usart1_tx_dma_enable+0x86>
 8001996:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <usart1_tx_dma_enable+0xb4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <usart1_tx_dma_enable+0xc0>)
 800199e:	429a      	cmp	r2, r3
 80019a0:	d904      	bls.n	80019ac <usart1_tx_dma_enable+0x68>
 80019a2:	4a17      	ldr	r2, [pc, #92]	; (8001a00 <usart1_tx_dma_enable+0xbc>)
 80019a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80019a8:	6093      	str	r3, [r2, #8]
 80019aa:	e00e      	b.n	80019ca <usart1_tx_dma_enable+0x86>
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <usart1_tx_dma_enable+0xb4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <usart1_tx_dma_enable+0xc4>)
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d904      	bls.n	80019c2 <usart1_tx_dma_enable+0x7e>
 80019b8:	4a14      	ldr	r2, [pc, #80]	; (8001a0c <usart1_tx_dma_enable+0xc8>)
 80019ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80019be:	60d3      	str	r3, [r2, #12]
 80019c0:	e003      	b.n	80019ca <usart1_tx_dma_enable+0x86>
 80019c2:	4a12      	ldr	r2, [pc, #72]	; (8001a0c <usart1_tx_dma_enable+0xc8>)
 80019c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80019c8:	6093      	str	r3, [r2, #8]

    hdma_usart1_tx.Instance->M0AR = (uint32_t)(data);
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <usart1_tx_dma_enable+0xb4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	60da      	str	r2, [r3, #12]
    __HAL_DMA_SET_COUNTER(&hdma_usart1_tx, len);
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <usart1_tx_dma_enable+0xb4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	887a      	ldrh	r2, [r7, #2]
 80019d8:	605a      	str	r2, [r3, #4]

    __HAL_DMA_ENABLE(&hdma_usart1_tx);
 80019da:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <usart1_tx_dma_enable+0xb4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <usart1_tx_dma_enable+0xb4>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f042 0201 	orr.w	r2, r2, #1
 80019e8:	601a      	str	r2, [r3, #0]
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	20004e58 	.word	0x20004e58
 80019fc:	40026458 	.word	0x40026458
 8001a00:	40026400 	.word	0x40026400
 8001a04:	400260b8 	.word	0x400260b8
 8001a08:	40026058 	.word	0x40026058
 8001a0c:	40026000 	.word	0x40026000

08001a10 <PID_init>:
  * @param[in]      max_out: pid max output
  * @param[in]      max_iout: pid max integration output
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float32_t PID[3], float32_t max_out, float32_t max_iout)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b087      	sub	sp, #28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6178      	str	r0, [r7, #20]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	60fa      	str	r2, [r7, #12]
 8001a1c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a20:	edc7 0a01 	vstr	s1, [r7, #4]
 8001a24:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d040      	beq.n	8001aae <PID_init+0x9e>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d03d      	beq.n	8001aae <PID_init+0x9e>
    {
        return;
    }
    pid->mode = mode;
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	7cfa      	ldrb	r2, [r7, #19]
 8001a36:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	639a      	str	r2, [r3, #56]	; 0x38
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	635a      	str	r2, [r3, #52]	; 0x34
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	631a      	str	r2, [r3, #48]	; 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	621a      	str	r2, [r3, #32]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	6a1a      	ldr	r2, [r3, #32]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	629a      	str	r2, [r3, #40]	; 0x28
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	625a      	str	r2, [r3, #36]	; 0x24
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	645a      	str	r2, [r3, #68]	; 0x44
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	641a      	str	r2, [r3, #64]	; 0x40
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	63da      	str	r2, [r3, #60]	; 0x3c
 8001aac:	e000      	b.n	8001ab0 <PID_init+0xa0>
        return;
 8001aae:	bf00      	nop
}
 8001ab0:	371c      	adds	r7, #28
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <PID_calc>:
  * @param[in]      ref: feedback data 
  * @param[in]      set: setting value
  * @retval         pid output
  */
float32_t PID_calc(pid_type_def *pid, float32_t ref, float32_t set)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b085      	sub	sp, #20
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ac6:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d102      	bne.n	8001ad6 <PID_calc+0x1c>
    {
        return 0.0f;
 8001ad0:	f04f 0300 	mov.w	r3, #0
 8001ad4:	e130      	b.n	8001d38 <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	645a      	str	r2, [r3, #68]	; 0x44
    pid->error[1] = pid->error[0];
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	641a      	str	r2, [r3, #64]	; 0x40
    pid->set = set;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 8001af2:	ed97 7a01 	vldr	s14, [r7, #4]
 8001af6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001afa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    if (pid->mode == PID_POSITION)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f040 8095 	bne.w	8001c38 <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        pid->Iout += pid->Ki * pid->error[0];
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001b36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	639a      	str	r2, [r3, #56]	; 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	635a      	str	r2, [r3, #52]	; 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001b60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b94:	dd04      	ble.n	8001ba0 <PID_calc+0xe6>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	695a      	ldr	r2, [r3, #20]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	629a      	str	r2, [r3, #40]	; 0x28
 8001b9e:	e014      	b.n	8001bca <PID_calc+0x110>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	edd3 7a05 	vldr	s15, [r3, #20]
 8001bac:	eef1 7a67 	vneg.f32	s15, s15
 8001bb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb8:	d507      	bpl.n	8001bca <PID_calc+0x110>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	edd3 7a05 	vldr	s15, [r3, #20]
 8001bc0:	eef1 7a67 	vneg.f32	s15, s15
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001bd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	ed93 7a08 	vldr	s14, [r3, #32]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001bf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfe:	dd04      	ble.n	8001c0a <PID_calc+0x150>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	691a      	ldr	r2, [r3, #16]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	621a      	str	r2, [r3, #32]
 8001c08:	e094      	b.n	8001d34 <PID_calc+0x27a>
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c16:	eef1 7a67 	vneg.f32	s15, s15
 8001c1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c22:	f140 8087 	bpl.w	8001d34 <PID_calc+0x27a>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c2c:	eef1 7a67 	vneg.f32	s15, s15
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	edc3 7a08 	vstr	s15, [r3, #32]
 8001c36:	e07d      	b.n	8001d34 <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d179      	bne.n	8001d34 <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001c52:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        pid->Iout = pid->Ki * pid->error[0];
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	639a      	str	r2, [r3, #56]	; 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	635a      	str	r2, [r3, #52]	; 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001c92:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	ed93 7a03 	vldr	s14, [r3, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	ed93 7a08 	vldr	s14, [r3, #32]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001cd2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001cdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	ed93 7a08 	vldr	s14, [r3, #32]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfe:	dd04      	ble.n	8001d0a <PID_calc+0x250>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	691a      	ldr	r2, [r3, #16]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	621a      	str	r2, [r3, #32]
 8001d08:	e014      	b.n	8001d34 <PID_calc+0x27a>
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d16:	eef1 7a67 	vneg.f32	s15, s15
 8001d1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d22:	d507      	bpl.n	8001d34 <PID_calc+0x27a>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d2a:	eef1 7a67 	vneg.f32	s15, s15
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	ee07 3a90 	vmov	s15, r3
}
 8001d3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001d50:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <MX_CAN1_Init+0x64>)
 8001d52:	4a18      	ldr	r2, [pc, #96]	; (8001db4 <MX_CAN1_Init+0x68>)
 8001d54:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001d56:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <MX_CAN1_Init+0x64>)
 8001d58:	2203      	movs	r2, #3
 8001d5a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001d5c:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <MX_CAN1_Init+0x64>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d62:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <MX_CAN1_Init+0x64>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001d68:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <MX_CAN1_Init+0x64>)
 8001d6a:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001d6e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001d70:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <MX_CAN1_Init+0x64>)
 8001d72:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d76:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001d78:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <MX_CAN1_Init+0x64>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001d7e:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <MX_CAN1_Init+0x64>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001d84:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <MX_CAN1_Init+0x64>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <MX_CAN1_Init+0x64>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001d90:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <MX_CAN1_Init+0x64>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <MX_CAN1_Init+0x64>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001d9c:	4804      	ldr	r0, [pc, #16]	; (8001db0 <MX_CAN1_Init+0x64>)
 8001d9e:	f001 fa6d 	bl	800327c <HAL_CAN_Init>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001da8:	f000 faca 	bl	8002340 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20004a84 	.word	0x20004a84
 8001db4:	40006400 	.word	0x40006400

08001db8 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001dbc:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <MX_CAN2_Init+0x64>)
 8001dbe:	4a18      	ldr	r2, [pc, #96]	; (8001e20 <MX_CAN2_Init+0x68>)
 8001dc0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8001dc2:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <MX_CAN2_Init+0x64>)
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001dc8:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <MX_CAN2_Init+0x64>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001dce:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <MX_CAN2_Init+0x64>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <MX_CAN2_Init+0x64>)
 8001dd6:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001dda:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <MX_CAN2_Init+0x64>)
 8001dde:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001de2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001de4:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <MX_CAN2_Init+0x64>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001dea:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <MX_CAN2_Init+0x64>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001df0:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <MX_CAN2_Init+0x64>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <MX_CAN2_Init+0x64>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001dfc:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <MX_CAN2_Init+0x64>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <MX_CAN2_Init+0x64>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001e08:	4804      	ldr	r0, [pc, #16]	; (8001e1c <MX_CAN2_Init+0x64>)
 8001e0a:	f001 fa37 	bl	800327c <HAL_CAN_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001e14:	f000 fa94 	bl	8002340 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20004a5c 	.word	0x20004a5c
 8001e20:	40006800 	.word	0x40006800

08001e24 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08c      	sub	sp, #48	; 0x30
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 031c 	add.w	r3, r7, #28
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a52      	ldr	r2, [pc, #328]	; (8001f8c <HAL_CAN_MspInit+0x168>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d145      	bne.n	8001ed2 <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001e46:	4b52      	ldr	r3, [pc, #328]	; (8001f90 <HAL_CAN_MspInit+0x16c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	4a50      	ldr	r2, [pc, #320]	; (8001f90 <HAL_CAN_MspInit+0x16c>)
 8001e4e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001e50:	4b4f      	ldr	r3, [pc, #316]	; (8001f90 <HAL_CAN_MspInit+0x16c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d10d      	bne.n	8001e74 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61bb      	str	r3, [r7, #24]
 8001e5c:	4b4d      	ldr	r3, [pc, #308]	; (8001f94 <HAL_CAN_MspInit+0x170>)
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	4a4c      	ldr	r2, [pc, #304]	; (8001f94 <HAL_CAN_MspInit+0x170>)
 8001e62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e66:	6413      	str	r3, [r2, #64]	; 0x40
 8001e68:	4b4a      	ldr	r3, [pc, #296]	; (8001f94 <HAL_CAN_MspInit+0x170>)
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	4b46      	ldr	r3, [pc, #280]	; (8001f94 <HAL_CAN_MspInit+0x170>)
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7c:	4a45      	ldr	r2, [pc, #276]	; (8001f94 <HAL_CAN_MspInit+0x170>)
 8001e7e:	f043 0308 	orr.w	r3, r3, #8
 8001e82:	6313      	str	r3, [r2, #48]	; 0x30
 8001e84:	4b43      	ldr	r3, [pc, #268]	; (8001f94 <HAL_CAN_MspInit+0x170>)
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e90:	2303      	movs	r3, #3
 8001e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e94:	2302      	movs	r3, #2
 8001e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ea0:	2309      	movs	r3, #9
 8001ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ea4:	f107 031c 	add.w	r3, r7, #28
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	483b      	ldr	r0, [pc, #236]	; (8001f98 <HAL_CAN_MspInit+0x174>)
 8001eac:	f002 fca6 	bl	80047fc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2105      	movs	r1, #5
 8001eb4:	2013      	movs	r0, #19
 8001eb6:	f002 f8fb 	bl	80040b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001eba:	2013      	movs	r0, #19
 8001ebc:	f002 f914 	bl	80040e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2105      	movs	r1, #5
 8001ec4:	2014      	movs	r0, #20
 8001ec6:	f002 f8f3 	bl	80040b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001eca:	2014      	movs	r0, #20
 8001ecc:	f002 f90c 	bl	80040e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001ed0:	e058      	b.n	8001f84 <HAL_CAN_MspInit+0x160>
  else if(canHandle->Instance==CAN2)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a31      	ldr	r2, [pc, #196]	; (8001f9c <HAL_CAN_MspInit+0x178>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d153      	bne.n	8001f84 <HAL_CAN_MspInit+0x160>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001edc:	2300      	movs	r3, #0
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	4b2c      	ldr	r3, [pc, #176]	; (8001f94 <HAL_CAN_MspInit+0x170>)
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	4a2b      	ldr	r2, [pc, #172]	; (8001f94 <HAL_CAN_MspInit+0x170>)
 8001ee6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001eea:	6413      	str	r3, [r2, #64]	; 0x40
 8001eec:	4b29      	ldr	r3, [pc, #164]	; (8001f94 <HAL_CAN_MspInit+0x170>)
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001ef8:	4b25      	ldr	r3, [pc, #148]	; (8001f90 <HAL_CAN_MspInit+0x16c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	3301      	adds	r3, #1
 8001efe:	4a24      	ldr	r2, [pc, #144]	; (8001f90 <HAL_CAN_MspInit+0x16c>)
 8001f00:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001f02:	4b23      	ldr	r3, [pc, #140]	; (8001f90 <HAL_CAN_MspInit+0x16c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d10d      	bne.n	8001f26 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	4b21      	ldr	r3, [pc, #132]	; (8001f94 <HAL_CAN_MspInit+0x170>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	4a20      	ldr	r2, [pc, #128]	; (8001f94 <HAL_CAN_MspInit+0x170>)
 8001f14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f18:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1a:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <HAL_CAN_MspInit+0x170>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	4b1a      	ldr	r3, [pc, #104]	; (8001f94 <HAL_CAN_MspInit+0x170>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a19      	ldr	r2, [pc, #100]	; (8001f94 <HAL_CAN_MspInit+0x170>)
 8001f30:	f043 0302 	orr.w	r3, r3, #2
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <HAL_CAN_MspInit+0x170>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_13;
 8001f42:	f242 0320 	movw	r3, #8224	; 0x2020
 8001f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f50:	2303      	movs	r3, #3
 8001f52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001f54:	2309      	movs	r3, #9
 8001f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f58:	f107 031c 	add.w	r3, r7, #28
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4810      	ldr	r0, [pc, #64]	; (8001fa0 <HAL_CAN_MspInit+0x17c>)
 8001f60:	f002 fc4c 	bl	80047fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 8001f64:	2200      	movs	r2, #0
 8001f66:	2105      	movs	r1, #5
 8001f68:	203f      	movs	r0, #63	; 0x3f
 8001f6a:	f002 f8a1 	bl	80040b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8001f6e:	203f      	movs	r0, #63	; 0x3f
 8001f70:	f002 f8ba 	bl	80040e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8001f74:	2200      	movs	r2, #0
 8001f76:	2105      	movs	r1, #5
 8001f78:	2040      	movs	r0, #64	; 0x40
 8001f7a:	f002 f899 	bl	80040b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001f7e:	2040      	movs	r0, #64	; 0x40
 8001f80:	f002 f8b2 	bl	80040e8 <HAL_NVIC_EnableIRQ>
}
 8001f84:	bf00      	nop
 8001f86:	3730      	adds	r7, #48	; 0x30
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40006400 	.word	0x40006400
 8001f90:	2000008c 	.word	0x2000008c
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40020c00 	.word	0x40020c00
 8001f9c:	40006800 	.word	0x40006800
 8001fa0:	40020400 	.word	0x40020400

08001fa4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	4b27      	ldr	r3, [pc, #156]	; (800204c <MX_DMA_Init+0xa8>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	4a26      	ldr	r2, [pc, #152]	; (800204c <MX_DMA_Init+0xa8>)
 8001fb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fba:	4b24      	ldr	r3, [pc, #144]	; (800204c <MX_DMA_Init+0xa8>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	603b      	str	r3, [r7, #0]
 8001fca:	4b20      	ldr	r3, [pc, #128]	; (800204c <MX_DMA_Init+0xa8>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	4a1f      	ldr	r2, [pc, #124]	; (800204c <MX_DMA_Init+0xa8>)
 8001fd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd6:	4b1d      	ldr	r3, [pc, #116]	; (800204c <MX_DMA_Init+0xa8>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fde:	603b      	str	r3, [r7, #0]
 8001fe0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2105      	movs	r1, #5
 8001fe6:	200c      	movs	r0, #12
 8001fe8:	f002 f862 	bl	80040b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001fec:	200c      	movs	r0, #12
 8001fee:	f002 f87b 	bl	80040e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2105      	movs	r1, #5
 8001ff6:	2039      	movs	r0, #57	; 0x39
 8001ff8:	f002 f85a 	bl	80040b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001ffc:	2039      	movs	r0, #57	; 0x39
 8001ffe:	f002 f873 	bl	80040e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002002:	2200      	movs	r2, #0
 8002004:	2105      	movs	r1, #5
 8002006:	203a      	movs	r0, #58	; 0x3a
 8002008:	f002 f852 	bl	80040b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800200c:	203a      	movs	r0, #58	; 0x3a
 800200e:	f002 f86b 	bl	80040e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8002012:	2200      	movs	r2, #0
 8002014:	2105      	movs	r1, #5
 8002016:	203b      	movs	r0, #59	; 0x3b
 8002018:	f002 f84a 	bl	80040b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800201c:	203b      	movs	r0, #59	; 0x3b
 800201e:	f002 f863 	bl	80040e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8002022:	2200      	movs	r2, #0
 8002024:	2105      	movs	r1, #5
 8002026:	2045      	movs	r0, #69	; 0x45
 8002028:	f002 f842 	bl	80040b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800202c:	2045      	movs	r0, #69	; 0x45
 800202e:	f002 f85b 	bl	80040e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002032:	2200      	movs	r2, #0
 8002034:	2105      	movs	r1, #5
 8002036:	2046      	movs	r0, #70	; 0x46
 8002038:	f002 f83a 	bl	80040b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800203c:	2046      	movs	r0, #70	; 0x46
 800203e:	f002 f853 	bl	80040e8 <HAL_NVIC_EnableIRQ>

}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800

08002050 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ChassisTask */
  ChassisTaskHandle = osThreadNew(chassis_task, NULL, &ChassisTask_attributes);
 8002054:	4a08      	ldr	r2, [pc, #32]	; (8002078 <MX_FREERTOS_Init+0x28>)
 8002056:	2100      	movs	r1, #0
 8002058:	4808      	ldr	r0, [pc, #32]	; (800207c <MX_FREERTOS_Init+0x2c>)
 800205a:	f008 fa45 	bl	800a4e8 <osThreadNew>
 800205e:	4603      	mov	r3, r0
 8002060:	4a07      	ldr	r2, [pc, #28]	; (8002080 <MX_FREERTOS_Init+0x30>)
 8002062:	6013      	str	r3, [r2, #0]

  /* creation of IMUTask */
  IMUTaskHandle = osThreadNew(INS_task1, NULL, &IMUTask_attributes);
 8002064:	4a07      	ldr	r2, [pc, #28]	; (8002084 <MX_FREERTOS_Init+0x34>)
 8002066:	2100      	movs	r1, #0
 8002068:	4807      	ldr	r0, [pc, #28]	; (8002088 <MX_FREERTOS_Init+0x38>)
 800206a:	f008 fa3d 	bl	800a4e8 <osThreadNew>
 800206e:	4603      	mov	r3, r0
 8002070:	4a06      	ldr	r2, [pc, #24]	; (800208c <MX_FREERTOS_Init+0x3c>)
 8002072:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}
 8002078:	0800d3e0 	.word	0x0800d3e0
 800207c:	08000f31 	.word	0x08000f31
 8002080:	20004ab0 	.word	0x20004ab0
 8002084:	0800d404 	.word	0x0800d404
 8002088:	08002091 	.word	0x08002091
 800208c:	20004aac 	.word	0x20004aac

08002090 <INS_task1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_INS_task1 */
__weak void INS_task1(void *argument)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN INS_task1 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002098:	2001      	movs	r0, #1
 800209a:	f008 fab7 	bl	800a60c <osDelay>
 800209e:	e7fb      	b.n	8002098 <INS_task1+0x8>

080020a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08c      	sub	sp, #48	; 0x30
 80020a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a6:	f107 031c 	add.w	r3, r7, #28
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
 80020b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	61bb      	str	r3, [r7, #24]
 80020ba:	4b46      	ldr	r3, [pc, #280]	; (80021d4 <MX_GPIO_Init+0x134>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a45      	ldr	r2, [pc, #276]	; (80021d4 <MX_GPIO_Init+0x134>)
 80020c0:	f043 0302 	orr.w	r3, r3, #2
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b43      	ldr	r3, [pc, #268]	; (80021d4 <MX_GPIO_Init+0x134>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	61bb      	str	r3, [r7, #24]
 80020d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	4b3f      	ldr	r3, [pc, #252]	; (80021d4 <MX_GPIO_Init+0x134>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a3e      	ldr	r2, [pc, #248]	; (80021d4 <MX_GPIO_Init+0x134>)
 80020dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b3c      	ldr	r3, [pc, #240]	; (80021d4 <MX_GPIO_Init+0x134>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	4b38      	ldr	r3, [pc, #224]	; (80021d4 <MX_GPIO_Init+0x134>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a37      	ldr	r2, [pc, #220]	; (80021d4 <MX_GPIO_Init+0x134>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b35      	ldr	r3, [pc, #212]	; (80021d4 <MX_GPIO_Init+0x134>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	4b31      	ldr	r3, [pc, #196]	; (80021d4 <MX_GPIO_Init+0x134>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a30      	ldr	r2, [pc, #192]	; (80021d4 <MX_GPIO_Init+0x134>)
 8002114:	f043 0308 	orr.w	r3, r3, #8
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b2e      	ldr	r3, [pc, #184]	; (80021d4 <MX_GPIO_Init+0x134>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <MX_GPIO_Init+0x134>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a29      	ldr	r2, [pc, #164]	; (80021d4 <MX_GPIO_Init+0x134>)
 8002130:	f043 0304 	orr.w	r3, r3, #4
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	4b27      	ldr	r3, [pc, #156]	; (80021d4 <MX_GPIO_Init+0x134>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	4b23      	ldr	r3, [pc, #140]	; (80021d4 <MX_GPIO_Init+0x134>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a22      	ldr	r2, [pc, #136]	; (80021d4 <MX_GPIO_Init+0x134>)
 800214c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <MX_GPIO_Init+0x134>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215a:	607b      	str	r3, [r7, #4]
 800215c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800215e:	2200      	movs	r2, #0
 8002160:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002164:	481c      	ldr	r0, [pc, #112]	; (80021d8 <MX_GPIO_Init+0x138>)
 8002166:	f002 fce5 	bl	8004b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800216a:	2200      	movs	r2, #0
 800216c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002170:	481a      	ldr	r0, [pc, #104]	; (80021dc <MX_GPIO_Init+0x13c>)
 8002172:	f002 fcdf 	bl	8004b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002176:	f44f 7380 	mov.w	r3, #256	; 0x100
 800217a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800217c:	2301      	movs	r3, #1
 800217e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002184:	2300      	movs	r3, #0
 8002186:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002188:	f107 031c 	add.w	r3, r7, #28
 800218c:	4619      	mov	r1, r3
 800218e:	4812      	ldr	r0, [pc, #72]	; (80021d8 <MX_GPIO_Init+0x138>)
 8002190:	f002 fb34 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002194:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219a:	2301      	movs	r3, #1
 800219c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a2:	2300      	movs	r3, #0
 80021a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a6:	f107 031c 	add.w	r3, r7, #28
 80021aa:	4619      	mov	r1, r3
 80021ac:	480b      	ldr	r0, [pc, #44]	; (80021dc <MX_GPIO_Init+0x13c>)
 80021ae:	f002 fb25 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021b8:	2300      	movs	r3, #0
 80021ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021c0:	f107 031c 	add.w	r3, r7, #28
 80021c4:	4619      	mov	r1, r3
 80021c6:	4806      	ldr	r0, [pc, #24]	; (80021e0 <MX_GPIO_Init+0x140>)
 80021c8:	f002 fb18 	bl	80047fc <HAL_GPIO_Init>

}
 80021cc:	bf00      	nop
 80021ce:	3730      	adds	r7, #48	; 0x30
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40020400 	.word	0x40020400
 80021dc:	40020000 	.word	0x40020000
 80021e0:	40020800 	.word	0x40020800

080021e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021e8:	f001 f81a 	bl	8003220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021ec:	f000 f826 	bl	800223c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021f0:	f7ff ff56 	bl	80020a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80021f4:	f7ff fed6 	bl	8001fa4 <MX_DMA_Init>
  MX_CAN1_Init();
 80021f8:	f7ff fda8 	bl	8001d4c <MX_CAN1_Init>
  MX_CAN2_Init();
 80021fc:	f7ff fddc 	bl	8001db8 <MX_CAN2_Init>
  MX_RTC_Init();
 8002200:	f000 f8a4 	bl	800234c <MX_RTC_Init>
  MX_TIM4_Init();
 8002204:	f000 fb74 	bl	80028f0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002208:	f000 fbf4 	bl	80029f4 <MX_TIM5_Init>
  MX_TIM12_Init();
 800220c:	f000 fc62 	bl	8002ad4 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8002210:	f000 fdc0 	bl	8002d94 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002214:	f000 fde8 	bl	8002de8 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8002218:	f000 f8d4 	bl	80023c4 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 800221c:	f000 fe0e 	bl	8002e3c <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8002220:	f000 fb18 	bl	8002854 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  can_filter_init();
 8002224:	f7ff faf8 	bl	8001818 <can_filter_init>
  remote_control_init();
 8002228:	f7ff f8f6 	bl	8001418 <remote_control_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800222c:	f008 f912 	bl	800a454 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002230:	f7ff ff0e 	bl	8002050 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002234:	f008 f932 	bl	800a49c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002238:	e7fe      	b.n	8002238 <main+0x54>
	...

0800223c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b098      	sub	sp, #96	; 0x60
 8002240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002242:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002246:	2230      	movs	r2, #48	; 0x30
 8002248:	2100      	movs	r1, #0
 800224a:	4618      	mov	r0, r3
 800224c:	f00b f898 	bl	800d380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002250:	f107 031c 	add.w	r3, r7, #28
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	4b31      	ldr	r3, [pc, #196]	; (8002338 <SystemClock_Config+0xfc>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	4a30      	ldr	r2, [pc, #192]	; (8002338 <SystemClock_Config+0xfc>)
 8002278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227c:	6413      	str	r3, [r2, #64]	; 0x40
 800227e:	4b2e      	ldr	r3, [pc, #184]	; (8002338 <SystemClock_Config+0xfc>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800228a:	2300      	movs	r3, #0
 800228c:	607b      	str	r3, [r7, #4]
 800228e:	4b2b      	ldr	r3, [pc, #172]	; (800233c <SystemClock_Config+0x100>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a2a      	ldr	r2, [pc, #168]	; (800233c <SystemClock_Config+0x100>)
 8002294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	4b28      	ldr	r3, [pc, #160]	; (800233c <SystemClock_Config+0x100>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a2:	607b      	str	r3, [r7, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80022a6:	2309      	movs	r3, #9
 80022a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80022b0:	2301      	movs	r3, #1
 80022b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022b4:	2302      	movs	r3, #2
 80022b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80022be:	2306      	movs	r3, #6
 80022c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80022c2:	23a8      	movs	r3, #168	; 0xa8
 80022c4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022c6:	2302      	movs	r3, #2
 80022c8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80022ca:	2307      	movs	r3, #7
 80022cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022d2:	4618      	mov	r0, r3
 80022d4:	f003 fbc0 	bl	8005a58 <HAL_RCC_OscConfig>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80022de:	f000 f82f 	bl	8002340 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022e2:	230f      	movs	r3, #15
 80022e4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022e6:	2302      	movs	r3, #2
 80022e8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ea:	2300      	movs	r3, #0
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80022fa:	f107 031c 	add.w	r3, r7, #28
 80022fe:	2105      	movs	r1, #5
 8002300:	4618      	mov	r0, r3
 8002302:	f003 fe21 	bl	8005f48 <HAL_RCC_ClockConfig>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800230c:	f000 f818 	bl	8002340 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002310:	2302      	movs	r3, #2
 8002312:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002314:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002318:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800231a:	f107 030c 	add.w	r3, r7, #12
 800231e:	4618      	mov	r0, r3
 8002320:	f004 f814 	bl	800634c <HAL_RCCEx_PeriphCLKConfig>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800232a:	f000 f809 	bl	8002340 <Error_Handler>
  }
}
 800232e:	bf00      	nop
 8002330:	3760      	adds	r7, #96	; 0x60
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800
 800233c:	40007000 	.word	0x40007000

08002340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002344:	b672      	cpsid	i
}
 8002346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002348:	e7fe      	b.n	8002348 <Error_Handler+0x8>
	...

0800234c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002350:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <MX_RTC_Init+0x44>)
 8002352:	4a10      	ldr	r2, [pc, #64]	; (8002394 <MX_RTC_Init+0x48>)
 8002354:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002356:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <MX_RTC_Init+0x44>)
 8002358:	2200      	movs	r2, #0
 800235a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 124;
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <MX_RTC_Init+0x44>)
 800235e:	227c      	movs	r2, #124	; 0x7c
 8002360:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 3199;
 8002362:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <MX_RTC_Init+0x44>)
 8002364:	f640 427f 	movw	r2, #3199	; 0xc7f
 8002368:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800236a:	4b09      	ldr	r3, [pc, #36]	; (8002390 <MX_RTC_Init+0x44>)
 800236c:	2200      	movs	r2, #0
 800236e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002370:	4b07      	ldr	r3, [pc, #28]	; (8002390 <MX_RTC_Init+0x44>)
 8002372:	2200      	movs	r2, #0
 8002374:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <MX_RTC_Init+0x44>)
 8002378:	2200      	movs	r2, #0
 800237a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800237c:	4804      	ldr	r0, [pc, #16]	; (8002390 <MX_RTC_Init+0x44>)
 800237e:	f004 f8c7 	bl	8006510 <HAL_RTC_Init>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8002388:	f7ff ffda 	bl	8002340 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20004ab4 	.word	0x20004ab4
 8002394:	40002800 	.word	0x40002800

08002398 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a05      	ldr	r2, [pc, #20]	; (80023bc <HAL_RTC_MspInit+0x24>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d102      	bne.n	80023b0 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023aa:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_RTC_MspInit+0x28>)
 80023ac:	2201      	movs	r2, #1
 80023ae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	40002800 	.word	0x40002800
 80023c0:	42470e3c 	.word	0x42470e3c

080023c4 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80023c8:	4b17      	ldr	r3, [pc, #92]	; (8002428 <MX_SPI1_Init+0x64>)
 80023ca:	4a18      	ldr	r2, [pc, #96]	; (800242c <MX_SPI1_Init+0x68>)
 80023cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023ce:	4b16      	ldr	r3, [pc, #88]	; (8002428 <MX_SPI1_Init+0x64>)
 80023d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023d6:	4b14      	ldr	r3, [pc, #80]	; (8002428 <MX_SPI1_Init+0x64>)
 80023d8:	2200      	movs	r2, #0
 80023da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023dc:	4b12      	ldr	r3, [pc, #72]	; (8002428 <MX_SPI1_Init+0x64>)
 80023de:	2200      	movs	r2, #0
 80023e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023e2:	4b11      	ldr	r3, [pc, #68]	; (8002428 <MX_SPI1_Init+0x64>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023e8:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <MX_SPI1_Init+0x64>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023ee:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <MX_SPI1_Init+0x64>)
 80023f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80023f6:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <MX_SPI1_Init+0x64>)
 80023f8:	2230      	movs	r2, #48	; 0x30
 80023fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023fc:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <MX_SPI1_Init+0x64>)
 80023fe:	2200      	movs	r2, #0
 8002400:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <MX_SPI1_Init+0x64>)
 8002404:	2200      	movs	r2, #0
 8002406:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002408:	4b07      	ldr	r3, [pc, #28]	; (8002428 <MX_SPI1_Init+0x64>)
 800240a:	2200      	movs	r2, #0
 800240c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <MX_SPI1_Init+0x64>)
 8002410:	220a      	movs	r2, #10
 8002412:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002414:	4804      	ldr	r0, [pc, #16]	; (8002428 <MX_SPI1_Init+0x64>)
 8002416:	f004 f960 	bl	80066da <HAL_SPI_Init>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002420:	f7ff ff8e 	bl	8002340 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20004ad4 	.word	0x20004ad4
 800242c:	40013000 	.word	0x40013000

08002430 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08a      	sub	sp, #40	; 0x28
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	f107 0314 	add.w	r3, r7, #20
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a57      	ldr	r2, [pc, #348]	; (80025ac <HAL_SPI_MspInit+0x17c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	f040 80a8 	bne.w	80025a4 <HAL_SPI_MspInit+0x174>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002454:	2300      	movs	r3, #0
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	4b55      	ldr	r3, [pc, #340]	; (80025b0 <HAL_SPI_MspInit+0x180>)
 800245a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245c:	4a54      	ldr	r2, [pc, #336]	; (80025b0 <HAL_SPI_MspInit+0x180>)
 800245e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002462:	6453      	str	r3, [r2, #68]	; 0x44
 8002464:	4b52      	ldr	r3, [pc, #328]	; (80025b0 <HAL_SPI_MspInit+0x180>)
 8002466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	4b4e      	ldr	r3, [pc, #312]	; (80025b0 <HAL_SPI_MspInit+0x180>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	4a4d      	ldr	r2, [pc, #308]	; (80025b0 <HAL_SPI_MspInit+0x180>)
 800247a:	f043 0302 	orr.w	r3, r3, #2
 800247e:	6313      	str	r3, [r2, #48]	; 0x30
 8002480:	4b4b      	ldr	r3, [pc, #300]	; (80025b0 <HAL_SPI_MspInit+0x180>)
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800248c:	2300      	movs	r3, #0
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	4b47      	ldr	r3, [pc, #284]	; (80025b0 <HAL_SPI_MspInit+0x180>)
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	4a46      	ldr	r2, [pc, #280]	; (80025b0 <HAL_SPI_MspInit+0x180>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6313      	str	r3, [r2, #48]	; 0x30
 800249c:	4b44      	ldr	r3, [pc, #272]	; (80025b0 <HAL_SPI_MspInit+0x180>)
 800249e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 80024a8:	2318      	movs	r3, #24
 80024aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ac:	2302      	movs	r3, #2
 80024ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b4:	2303      	movs	r3, #3
 80024b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024b8:	2305      	movs	r3, #5
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024bc:	f107 0314 	add.w	r3, r7, #20
 80024c0:	4619      	mov	r1, r3
 80024c2:	483c      	ldr	r0, [pc, #240]	; (80025b4 <HAL_SPI_MspInit+0x184>)
 80024c4:	f002 f99a 	bl	80047fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024cc:	2302      	movs	r3, #2
 80024ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d4:	2303      	movs	r3, #3
 80024d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024d8:	2305      	movs	r3, #5
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024dc:	f107 0314 	add.w	r3, r7, #20
 80024e0:	4619      	mov	r1, r3
 80024e2:	4835      	ldr	r0, [pc, #212]	; (80025b8 <HAL_SPI_MspInit+0x188>)
 80024e4:	f002 f98a 	bl	80047fc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 80024e8:	4b34      	ldr	r3, [pc, #208]	; (80025bc <HAL_SPI_MspInit+0x18c>)
 80024ea:	4a35      	ldr	r2, [pc, #212]	; (80025c0 <HAL_SPI_MspInit+0x190>)
 80024ec:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80024ee:	4b33      	ldr	r3, [pc, #204]	; (80025bc <HAL_SPI_MspInit+0x18c>)
 80024f0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80024f4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024f6:	4b31      	ldr	r3, [pc, #196]	; (80025bc <HAL_SPI_MspInit+0x18c>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024fc:	4b2f      	ldr	r3, [pc, #188]	; (80025bc <HAL_SPI_MspInit+0x18c>)
 80024fe:	2200      	movs	r2, #0
 8002500:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002502:	4b2e      	ldr	r3, [pc, #184]	; (80025bc <HAL_SPI_MspInit+0x18c>)
 8002504:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002508:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800250a:	4b2c      	ldr	r3, [pc, #176]	; (80025bc <HAL_SPI_MspInit+0x18c>)
 800250c:	2200      	movs	r2, #0
 800250e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002510:	4b2a      	ldr	r3, [pc, #168]	; (80025bc <HAL_SPI_MspInit+0x18c>)
 8002512:	2200      	movs	r2, #0
 8002514:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002516:	4b29      	ldr	r3, [pc, #164]	; (80025bc <HAL_SPI_MspInit+0x18c>)
 8002518:	2200      	movs	r2, #0
 800251a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800251c:	4b27      	ldr	r3, [pc, #156]	; (80025bc <HAL_SPI_MspInit+0x18c>)
 800251e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002522:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002524:	4b25      	ldr	r3, [pc, #148]	; (80025bc <HAL_SPI_MspInit+0x18c>)
 8002526:	2200      	movs	r2, #0
 8002528:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800252a:	4824      	ldr	r0, [pc, #144]	; (80025bc <HAL_SPI_MspInit+0x18c>)
 800252c:	f001 fdea 	bl	8004104 <HAL_DMA_Init>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 8002536:	f7ff ff03 	bl	8002340 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a1f      	ldr	r2, [pc, #124]	; (80025bc <HAL_SPI_MspInit+0x18c>)
 800253e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002540:	4a1e      	ldr	r2, [pc, #120]	; (80025bc <HAL_SPI_MspInit+0x18c>)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002546:	4b1f      	ldr	r3, [pc, #124]	; (80025c4 <HAL_SPI_MspInit+0x194>)
 8002548:	4a1f      	ldr	r2, [pc, #124]	; (80025c8 <HAL_SPI_MspInit+0x198>)
 800254a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800254c:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <HAL_SPI_MspInit+0x194>)
 800254e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002552:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002554:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <HAL_SPI_MspInit+0x194>)
 8002556:	2240      	movs	r2, #64	; 0x40
 8002558:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800255a:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <HAL_SPI_MspInit+0x194>)
 800255c:	2200      	movs	r2, #0
 800255e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002560:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <HAL_SPI_MspInit+0x194>)
 8002562:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002566:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002568:	4b16      	ldr	r3, [pc, #88]	; (80025c4 <HAL_SPI_MspInit+0x194>)
 800256a:	2200      	movs	r2, #0
 800256c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800256e:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <HAL_SPI_MspInit+0x194>)
 8002570:	2200      	movs	r2, #0
 8002572:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <HAL_SPI_MspInit+0x194>)
 8002576:	2200      	movs	r2, #0
 8002578:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800257a:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <HAL_SPI_MspInit+0x194>)
 800257c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002580:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002582:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <HAL_SPI_MspInit+0x194>)
 8002584:	2200      	movs	r2, #0
 8002586:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002588:	480e      	ldr	r0, [pc, #56]	; (80025c4 <HAL_SPI_MspInit+0x194>)
 800258a:	f001 fdbb 	bl	8004104 <HAL_DMA_Init>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <HAL_SPI_MspInit+0x168>
    {
      Error_Handler();
 8002594:	f7ff fed4 	bl	8002340 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <HAL_SPI_MspInit+0x194>)
 800259c:	649a      	str	r2, [r3, #72]	; 0x48
 800259e:	4a09      	ldr	r2, [pc, #36]	; (80025c4 <HAL_SPI_MspInit+0x194>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80025a4:	bf00      	nop
 80025a6:	3728      	adds	r7, #40	; 0x28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40013000 	.word	0x40013000
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40020400 	.word	0x40020400
 80025b8:	40020000 	.word	0x40020000
 80025bc:	20004b2c 	.word	0x20004b2c
 80025c0:	40026440 	.word	0x40026440
 80025c4:	20004b8c 	.word	0x20004b8c
 80025c8:	40026458 	.word	0x40026458

080025cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	607b      	str	r3, [r7, #4]
 80025d6:	4b12      	ldr	r3, [pc, #72]	; (8002620 <HAL_MspInit+0x54>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	4a11      	ldr	r2, [pc, #68]	; (8002620 <HAL_MspInit+0x54>)
 80025dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e0:	6453      	str	r3, [r2, #68]	; 0x44
 80025e2:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <HAL_MspInit+0x54>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ea:	607b      	str	r3, [r7, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	603b      	str	r3, [r7, #0]
 80025f2:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_MspInit+0x54>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <HAL_MspInit+0x54>)
 80025f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025fc:	6413      	str	r3, [r2, #64]	; 0x40
 80025fe:	4b08      	ldr	r3, [pc, #32]	; (8002620 <HAL_MspInit+0x54>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800260a:	2200      	movs	r2, #0
 800260c:	210f      	movs	r1, #15
 800260e:	f06f 0001 	mvn.w	r0, #1
 8002612:	f001 fd4d 	bl	80040b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800

08002624 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08c      	sub	sp, #48	; 0x30
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8002634:	2200      	movs	r2, #0
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	201d      	movs	r0, #29
 800263a:	f001 fd39 	bl	80040b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800263e:	201d      	movs	r0, #29
 8002640:	f001 fd52 	bl	80040e8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	4b1f      	ldr	r3, [pc, #124]	; (80026c8 <HAL_InitTick+0xa4>)
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	4a1e      	ldr	r2, [pc, #120]	; (80026c8 <HAL_InitTick+0xa4>)
 800264e:	f043 0302 	orr.w	r3, r3, #2
 8002652:	6413      	str	r3, [r2, #64]	; 0x40
 8002654:	4b1c      	ldr	r3, [pc, #112]	; (80026c8 <HAL_InitTick+0xa4>)
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002660:	f107 0210 	add.w	r2, r7, #16
 8002664:	f107 0314 	add.w	r3, r7, #20
 8002668:	4611      	mov	r1, r2
 800266a:	4618      	mov	r0, r3
 800266c:	f003 fe3c 	bl	80062e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002670:	f003 fe12 	bl	8006298 <HAL_RCC_GetPCLK1Freq>
 8002674:	4603      	mov	r3, r0
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800267a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267c:	4a13      	ldr	r2, [pc, #76]	; (80026cc <HAL_InitTick+0xa8>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	0c9b      	lsrs	r3, r3, #18
 8002684:	3b01      	subs	r3, #1
 8002686:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <HAL_InitTick+0xac>)
 800268a:	4a12      	ldr	r2, [pc, #72]	; (80026d4 <HAL_InitTick+0xb0>)
 800268c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800268e:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <HAL_InitTick+0xac>)
 8002690:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002694:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002696:	4a0e      	ldr	r2, [pc, #56]	; (80026d0 <HAL_InitTick+0xac>)
 8002698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269a:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 800269c:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <HAL_InitTick+0xac>)
 800269e:	2200      	movs	r2, #0
 80026a0:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a2:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <HAL_InitTick+0xac>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80026a8:	4809      	ldr	r0, [pc, #36]	; (80026d0 <HAL_InitTick+0xac>)
 80026aa:	f004 f89f 	bl	80067ec <HAL_TIM_Base_Init>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d104      	bne.n	80026be <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80026b4:	4806      	ldr	r0, [pc, #24]	; (80026d0 <HAL_InitTick+0xac>)
 80026b6:	f004 f8e9 	bl	800688c <HAL_TIM_Base_Start_IT>
 80026ba:	4603      	mov	r3, r0
 80026bc:	e000      	b.n	80026c0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3730      	adds	r7, #48	; 0x30
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40023800 	.word	0x40023800
 80026cc:	431bde83 	.word	0x431bde83
 80026d0:	20004bec 	.word	0x20004bec
 80026d4:	40000400 	.word	0x40000400

080026d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026dc:	e7fe      	b.n	80026dc <NMI_Handler+0x4>

080026de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026de:	b480      	push	{r7}
 80026e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026e2:	e7fe      	b.n	80026e2 <HardFault_Handler+0x4>

080026e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026e8:	e7fe      	b.n	80026e8 <MemManage_Handler+0x4>

080026ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026ea:	b480      	push	{r7}
 80026ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ee:	e7fe      	b.n	80026ee <BusFault_Handler+0x4>

080026f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026f4:	e7fe      	b.n	80026f4 <UsageFault_Handler+0x4>

080026f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026f6:	b480      	push	{r7}
 80026f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002708:	4802      	ldr	r0, [pc, #8]	; (8002714 <DMA1_Stream1_IRQHandler+0x10>)
 800270a:	f001 fe3b 	bl	8004384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20004db4 	.word	0x20004db4

08002718 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800271c:	4802      	ldr	r0, [pc, #8]	; (8002728 <CAN1_TX_IRQHandler+0x10>)
 800271e:	f001 f9e0 	bl	8003ae2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20004a84 	.word	0x20004a84

0800272c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002730:	4802      	ldr	r0, [pc, #8]	; (800273c <CAN1_RX0_IRQHandler+0x10>)
 8002732:	f001 f9d6 	bl	8003ae2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20004a84 	.word	0x20004a84

08002740 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002744:	4802      	ldr	r0, [pc, #8]	; (8002750 <TIM2_IRQHandler+0x10>)
 8002746:	f004 f960 	bl	8006a0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20004cc4 	.word	0x20004cc4

08002754 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002758:	4802      	ldr	r0, [pc, #8]	; (8002764 <TIM3_IRQHandler+0x10>)
 800275a:	f004 f956 	bl	8006a0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20004bec 	.word	0x20004bec

08002768 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
////
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800276c:	4802      	ldr	r0, [pc, #8]	; (8002778 <USART1_IRQHandler+0x10>)
 800276e:	f004 ffcf 	bl	8007710 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
////
  /* USER CODE END USART1_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20004f18 	.word	0x20004f18

0800277c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002780:	4802      	ldr	r0, [pc, #8]	; (800278c <DMA2_Stream1_IRQHandler+0x10>)
 8002782:	f001 fdff 	bl	8004384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20004d54 	.word	0x20004d54

08002790 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002794:	4802      	ldr	r0, [pc, #8]	; (80027a0 <DMA2_Stream2_IRQHandler+0x10>)
 8002796:	f001 fdf5 	bl	8004384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20004b2c 	.word	0x20004b2c

080027a4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80027a8:	4802      	ldr	r0, [pc, #8]	; (80027b4 <DMA2_Stream3_IRQHandler+0x10>)
 80027aa:	f001 fdeb 	bl	8004384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20004b8c 	.word	0x20004b8c

080027b8 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80027bc:	4802      	ldr	r0, [pc, #8]	; (80027c8 <CAN2_TX_IRQHandler+0x10>)
 80027be:	f001 f990 	bl	8003ae2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20004a5c 	.word	0x20004a5c

080027cc <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80027d0:	4802      	ldr	r0, [pc, #8]	; (80027dc <CAN2_RX0_IRQHandler+0x10>)
 80027d2:	f001 f986 	bl	8003ae2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20004a5c 	.word	0x20004a5c

080027e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80027e4:	4802      	ldr	r0, [pc, #8]	; (80027f0 <OTG_FS_IRQHandler+0x10>)
 80027e6:	f002 f9be 	bl	8004b66 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20004fe4 	.word	0x20004fe4

080027f4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80027f8:	4802      	ldr	r0, [pc, #8]	; (8002804 <DMA2_Stream6_IRQHandler+0x10>)
 80027fa:	f001 fdc3 	bl	8004384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20004eb8 	.word	0x20004eb8

08002808 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800280c:	4802      	ldr	r0, [pc, #8]	; (8002818 <DMA2_Stream7_IRQHandler+0x10>)
 800280e:	f001 fdb9 	bl	8004384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20004e58 	.word	0x20004e58

0800281c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002820:	4802      	ldr	r0, [pc, #8]	; (800282c <USART6_IRQHandler+0x10>)
 8002822:	f004 ff75 	bl	8007710 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20004f5c 	.word	0x20004f5c

08002830 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <SystemInit+0x20>)
 8002836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283a:	4a05      	ldr	r2, [pc, #20]	; (8002850 <SystemInit+0x20>)
 800283c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002840:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800285a:	f107 0308 	add.w	r3, r7, #8
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	605a      	str	r2, [r3, #4]
 8002864:	609a      	str	r2, [r3, #8]
 8002866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002868:	463b      	mov	r3, r7
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002870:	4b1e      	ldr	r3, [pc, #120]	; (80028ec <MX_TIM2_Init+0x98>)
 8002872:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002876:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8002878:	4b1c      	ldr	r3, [pc, #112]	; (80028ec <MX_TIM2_Init+0x98>)
 800287a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800287e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002880:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <MX_TIM2_Init+0x98>)
 8002882:	2200      	movs	r2, #0
 8002884:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002886:	4b19      	ldr	r3, [pc, #100]	; (80028ec <MX_TIM2_Init+0x98>)
 8002888:	f240 32e7 	movw	r2, #999	; 0x3e7
 800288c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800288e:	4b17      	ldr	r3, [pc, #92]	; (80028ec <MX_TIM2_Init+0x98>)
 8002890:	2200      	movs	r2, #0
 8002892:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002894:	4b15      	ldr	r3, [pc, #84]	; (80028ec <MX_TIM2_Init+0x98>)
 8002896:	2280      	movs	r2, #128	; 0x80
 8002898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800289a:	4814      	ldr	r0, [pc, #80]	; (80028ec <MX_TIM2_Init+0x98>)
 800289c:	f003 ffa6 	bl	80067ec <HAL_TIM_Base_Init>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80028a6:	f7ff fd4b 	bl	8002340 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028b0:	f107 0308 	add.w	r3, r7, #8
 80028b4:	4619      	mov	r1, r3
 80028b6:	480d      	ldr	r0, [pc, #52]	; (80028ec <MX_TIM2_Init+0x98>)
 80028b8:	f004 fa72 	bl	8006da0 <HAL_TIM_ConfigClockSource>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80028c2:	f7ff fd3d 	bl	8002340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028c6:	2300      	movs	r3, #0
 80028c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ca:	2300      	movs	r3, #0
 80028cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028ce:	463b      	mov	r3, r7
 80028d0:	4619      	mov	r1, r3
 80028d2:	4806      	ldr	r0, [pc, #24]	; (80028ec <MX_TIM2_Init+0x98>)
 80028d4:	f004 fe3e 	bl	8007554 <HAL_TIMEx_MasterConfigSynchronization>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80028de:	f7ff fd2f 	bl	8002340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028e2:	bf00      	nop
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20004cc4 	.word	0x20004cc4

080028f0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08e      	sub	sp, #56	; 0x38
 80028f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	605a      	str	r2, [r3, #4]
 8002900:	609a      	str	r2, [r3, #8]
 8002902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002904:	f107 0320 	add.w	r3, r7, #32
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800290e:	1d3b      	adds	r3, r7, #4
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	60da      	str	r2, [r3, #12]
 800291a:	611a      	str	r2, [r3, #16]
 800291c:	615a      	str	r2, [r3, #20]
 800291e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002920:	4b32      	ldr	r3, [pc, #200]	; (80029ec <MX_TIM4_Init+0xfc>)
 8002922:	4a33      	ldr	r2, [pc, #204]	; (80029f0 <MX_TIM4_Init+0x100>)
 8002924:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8002926:	4b31      	ldr	r3, [pc, #196]	; (80029ec <MX_TIM4_Init+0xfc>)
 8002928:	2253      	movs	r2, #83	; 0x53
 800292a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800292c:	4b2f      	ldr	r3, [pc, #188]	; (80029ec <MX_TIM4_Init+0xfc>)
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8002932:	4b2e      	ldr	r3, [pc, #184]	; (80029ec <MX_TIM4_Init+0xfc>)
 8002934:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002938:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800293a:	4b2c      	ldr	r3, [pc, #176]	; (80029ec <MX_TIM4_Init+0xfc>)
 800293c:	2200      	movs	r2, #0
 800293e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002940:	4b2a      	ldr	r3, [pc, #168]	; (80029ec <MX_TIM4_Init+0xfc>)
 8002942:	2200      	movs	r2, #0
 8002944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002946:	4829      	ldr	r0, [pc, #164]	; (80029ec <MX_TIM4_Init+0xfc>)
 8002948:	f003 ff50 	bl	80067ec <HAL_TIM_Base_Init>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002952:	f7ff fcf5 	bl	8002340 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002956:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800295a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800295c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002960:	4619      	mov	r1, r3
 8002962:	4822      	ldr	r0, [pc, #136]	; (80029ec <MX_TIM4_Init+0xfc>)
 8002964:	f004 fa1c 	bl	8006da0 <HAL_TIM_ConfigClockSource>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800296e:	f7ff fce7 	bl	8002340 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002972:	481e      	ldr	r0, [pc, #120]	; (80029ec <MX_TIM4_Init+0xfc>)
 8002974:	f003 fffa 	bl	800696c <HAL_TIM_PWM_Init>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800297e:	f7ff fcdf 	bl	8002340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002982:	2300      	movs	r3, #0
 8002984:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002986:	2300      	movs	r3, #0
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800298a:	f107 0320 	add.w	r3, r7, #32
 800298e:	4619      	mov	r1, r3
 8002990:	4816      	ldr	r0, [pc, #88]	; (80029ec <MX_TIM4_Init+0xfc>)
 8002992:	f004 fddf 	bl	8007554 <HAL_TIMEx_MasterConfigSynchronization>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800299c:	f7ff fcd0 	bl	8002340 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029a0:	2360      	movs	r3, #96	; 0x60
 80029a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029b0:	1d3b      	adds	r3, r7, #4
 80029b2:	2200      	movs	r2, #0
 80029b4:	4619      	mov	r1, r3
 80029b6:	480d      	ldr	r0, [pc, #52]	; (80029ec <MX_TIM4_Init+0xfc>)
 80029b8:	f004 f930 	bl	8006c1c <HAL_TIM_PWM_ConfigChannel>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80029c2:	f7ff fcbd 	bl	8002340 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029c6:	1d3b      	adds	r3, r7, #4
 80029c8:	2204      	movs	r2, #4
 80029ca:	4619      	mov	r1, r3
 80029cc:	4807      	ldr	r0, [pc, #28]	; (80029ec <MX_TIM4_Init+0xfc>)
 80029ce:	f004 f925 	bl	8006c1c <HAL_TIM_PWM_ConfigChannel>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80029d8:	f7ff fcb2 	bl	8002340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80029dc:	4803      	ldr	r0, [pc, #12]	; (80029ec <MX_TIM4_Init+0xfc>)
 80029de:	f000 f951 	bl	8002c84 <HAL_TIM_MspPostInit>

}
 80029e2:	bf00      	nop
 80029e4:	3738      	adds	r7, #56	; 0x38
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20004c34 	.word	0x20004c34
 80029f0:	40000800 	.word	0x40000800

080029f4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08a      	sub	sp, #40	; 0x28
 80029f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029fa:	f107 0320 	add.w	r3, r7, #32
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a04:	1d3b      	adds	r3, r7, #4
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	605a      	str	r2, [r3, #4]
 8002a0c:	609a      	str	r2, [r3, #8]
 8002a0e:	60da      	str	r2, [r3, #12]
 8002a10:	611a      	str	r2, [r3, #16]
 8002a12:	615a      	str	r2, [r3, #20]
 8002a14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002a16:	4b2d      	ldr	r3, [pc, #180]	; (8002acc <MX_TIM5_Init+0xd8>)
 8002a18:	4a2d      	ldr	r2, [pc, #180]	; (8002ad0 <MX_TIM5_Init+0xdc>)
 8002a1a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002a1c:	4b2b      	ldr	r3, [pc, #172]	; (8002acc <MX_TIM5_Init+0xd8>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a22:	4b2a      	ldr	r3, [pc, #168]	; (8002acc <MX_TIM5_Init+0xd8>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002a28:	4b28      	ldr	r3, [pc, #160]	; (8002acc <MX_TIM5_Init+0xd8>)
 8002a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a2e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a30:	4b26      	ldr	r3, [pc, #152]	; (8002acc <MX_TIM5_Init+0xd8>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a36:	4b25      	ldr	r3, [pc, #148]	; (8002acc <MX_TIM5_Init+0xd8>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002a3c:	4823      	ldr	r0, [pc, #140]	; (8002acc <MX_TIM5_Init+0xd8>)
 8002a3e:	f003 ff95 	bl	800696c <HAL_TIM_PWM_Init>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002a48:	f7ff fc7a 	bl	8002340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a50:	2300      	movs	r3, #0
 8002a52:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002a54:	f107 0320 	add.w	r3, r7, #32
 8002a58:	4619      	mov	r1, r3
 8002a5a:	481c      	ldr	r0, [pc, #112]	; (8002acc <MX_TIM5_Init+0xd8>)
 8002a5c:	f004 fd7a 	bl	8007554 <HAL_TIMEx_MasterConfigSynchronization>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002a66:	f7ff fc6b 	bl	8002340 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a6a:	2360      	movs	r3, #96	; 0x60
 8002a6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a7a:	1d3b      	adds	r3, r7, #4
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4812      	ldr	r0, [pc, #72]	; (8002acc <MX_TIM5_Init+0xd8>)
 8002a82:	f004 f8cb 	bl	8006c1c <HAL_TIM_PWM_ConfigChannel>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002a8c:	f7ff fc58 	bl	8002340 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a90:	1d3b      	adds	r3, r7, #4
 8002a92:	2204      	movs	r2, #4
 8002a94:	4619      	mov	r1, r3
 8002a96:	480d      	ldr	r0, [pc, #52]	; (8002acc <MX_TIM5_Init+0xd8>)
 8002a98:	f004 f8c0 	bl	8006c1c <HAL_TIM_PWM_ConfigChannel>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002aa2:	f7ff fc4d 	bl	8002340 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	2208      	movs	r2, #8
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4807      	ldr	r0, [pc, #28]	; (8002acc <MX_TIM5_Init+0xd8>)
 8002aae:	f004 f8b5 	bl	8006c1c <HAL_TIM_PWM_ConfigChannel>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8002ab8:	f7ff fc42 	bl	8002340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002abc:	4803      	ldr	r0, [pc, #12]	; (8002acc <MX_TIM5_Init+0xd8>)
 8002abe:	f000 f8e1 	bl	8002c84 <HAL_TIM_MspPostInit>

}
 8002ac2:	bf00      	nop
 8002ac4:	3728      	adds	r7, #40	; 0x28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20004c7c 	.word	0x20004c7c
 8002ad0:	40000c00 	.word	0x40000c00

08002ad4 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08c      	sub	sp, #48	; 0x30
 8002ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ada:	f107 0320 	add.w	r3, r7, #32
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	605a      	str	r2, [r3, #4]
 8002ae4:	609a      	str	r2, [r3, #8]
 8002ae6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ae8:	1d3b      	adds	r3, r7, #4
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	605a      	str	r2, [r3, #4]
 8002af0:	609a      	str	r2, [r3, #8]
 8002af2:	60da      	str	r2, [r3, #12]
 8002af4:	611a      	str	r2, [r3, #16]
 8002af6:	615a      	str	r2, [r3, #20]
 8002af8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002afa:	4b26      	ldr	r3, [pc, #152]	; (8002b94 <MX_TIM12_Init+0xc0>)
 8002afc:	4a26      	ldr	r2, [pc, #152]	; (8002b98 <MX_TIM12_Init+0xc4>)
 8002afe:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1281;
 8002b00:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <MX_TIM12_Init+0xc0>)
 8002b02:	f240 5201 	movw	r2, #1281	; 0x501
 8002b06:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b08:	4b22      	ldr	r3, [pc, #136]	; (8002b94 <MX_TIM12_Init+0xc0>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 31111;
 8002b0e:	4b21      	ldr	r3, [pc, #132]	; (8002b94 <MX_TIM12_Init+0xc0>)
 8002b10:	f647 1287 	movw	r2, #31111	; 0x7987
 8002b14:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b16:	4b1f      	ldr	r3, [pc, #124]	; (8002b94 <MX_TIM12_Init+0xc0>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b1c:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <MX_TIM12_Init+0xc0>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002b22:	481c      	ldr	r0, [pc, #112]	; (8002b94 <MX_TIM12_Init+0xc0>)
 8002b24:	f003 fe62 	bl	80067ec <HAL_TIM_Base_Init>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 8002b2e:	f7ff fc07 	bl	8002340 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b36:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002b38:	f107 0320 	add.w	r3, r7, #32
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4815      	ldr	r0, [pc, #84]	; (8002b94 <MX_TIM12_Init+0xc0>)
 8002b40:	f004 f92e 	bl	8006da0 <HAL_TIM_ConfigClockSource>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 8002b4a:	f7ff fbf9 	bl	8002340 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002b4e:	4811      	ldr	r0, [pc, #68]	; (8002b94 <MX_TIM12_Init+0xc0>)
 8002b50:	f003 ff0c 	bl	800696c <HAL_TIM_PWM_Init>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8002b5a:	f7ff fbf1 	bl	8002340 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b5e:	2360      	movs	r3, #96	; 0x60
 8002b60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b6e:	1d3b      	adds	r3, r7, #4
 8002b70:	2200      	movs	r2, #0
 8002b72:	4619      	mov	r1, r3
 8002b74:	4807      	ldr	r0, [pc, #28]	; (8002b94 <MX_TIM12_Init+0xc0>)
 8002b76:	f004 f851 	bl	8006c1c <HAL_TIM_PWM_ConfigChannel>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8002b80:	f7ff fbde 	bl	8002340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002b84:	4803      	ldr	r0, [pc, #12]	; (8002b94 <MX_TIM12_Init+0xc0>)
 8002b86:	f000 f87d 	bl	8002c84 <HAL_TIM_MspPostInit>

}
 8002b8a:	bf00      	nop
 8002b8c:	3730      	adds	r7, #48	; 0x30
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20004d0c 	.word	0x20004d0c
 8002b98:	40001800 	.word	0x40001800

08002b9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bac:	d116      	bne.n	8002bdc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	4b20      	ldr	r3, [pc, #128]	; (8002c34 <HAL_TIM_Base_MspInit+0x98>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	4a1f      	ldr	r2, [pc, #124]	; (8002c34 <HAL_TIM_Base_MspInit+0x98>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bbe:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <HAL_TIM_Base_MspInit+0x98>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2105      	movs	r1, #5
 8002bce:	201c      	movs	r0, #28
 8002bd0:	f001 fa6e 	bl	80040b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bd4:	201c      	movs	r0, #28
 8002bd6:	f001 fa87 	bl	80040e8 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002bda:	e026      	b.n	8002c2a <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM4)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a15      	ldr	r2, [pc, #84]	; (8002c38 <HAL_TIM_Base_MspInit+0x9c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d10e      	bne.n	8002c04 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	613b      	str	r3, [r7, #16]
 8002bea:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <HAL_TIM_Base_MspInit+0x98>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	4a11      	ldr	r2, [pc, #68]	; (8002c34 <HAL_TIM_Base_MspInit+0x98>)
 8002bf0:	f043 0304 	orr.w	r3, r3, #4
 8002bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf6:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <HAL_TIM_Base_MspInit+0x98>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	693b      	ldr	r3, [r7, #16]
}
 8002c02:	e012      	b.n	8002c2a <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM12)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a0c      	ldr	r2, [pc, #48]	; (8002c3c <HAL_TIM_Base_MspInit+0xa0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d10d      	bne.n	8002c2a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <HAL_TIM_Base_MspInit+0x98>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	4a07      	ldr	r2, [pc, #28]	; (8002c34 <HAL_TIM_Base_MspInit+0x98>)
 8002c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1e:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <HAL_TIM_Base_MspInit+0x98>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
}
 8002c2a:	bf00      	nop
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40023800 	.word	0x40023800
 8002c38:	40000800 	.word	0x40000800
 8002c3c:	40001800 	.word	0x40001800

08002c40 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a0b      	ldr	r2, [pc, #44]	; (8002c7c <HAL_TIM_PWM_MspInit+0x3c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d10d      	bne.n	8002c6e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <HAL_TIM_PWM_MspInit+0x40>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	4a09      	ldr	r2, [pc, #36]	; (8002c80 <HAL_TIM_PWM_MspInit+0x40>)
 8002c5c:	f043 0308 	orr.w	r3, r3, #8
 8002c60:	6413      	str	r3, [r2, #64]	; 0x40
 8002c62:	4b07      	ldr	r3, [pc, #28]	; (8002c80 <HAL_TIM_PWM_MspInit+0x40>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002c6e:	bf00      	nop
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40000c00 	.word	0x40000c00
 8002c80:	40023800 	.word	0x40023800

08002c84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08a      	sub	sp, #40	; 0x28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c8c:	f107 0314 	add.w	r3, r7, #20
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	60da      	str	r2, [r3, #12]
 8002c9a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a36      	ldr	r2, [pc, #216]	; (8002d7c <HAL_TIM_MspPostInit+0xf8>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d11e      	bne.n	8002ce4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	4b35      	ldr	r3, [pc, #212]	; (8002d80 <HAL_TIM_MspPostInit+0xfc>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	4a34      	ldr	r2, [pc, #208]	; (8002d80 <HAL_TIM_MspPostInit+0xfc>)
 8002cb0:	f043 0302 	orr.w	r3, r3, #2
 8002cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb6:	4b32      	ldr	r3, [pc, #200]	; (8002d80 <HAL_TIM_MspPostInit+0xfc>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	613b      	str	r3, [r7, #16]
 8002cc0:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002cc2:	23c0      	movs	r3, #192	; 0xc0
 8002cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd6:	f107 0314 	add.w	r3, r7, #20
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4829      	ldr	r0, [pc, #164]	; (8002d84 <HAL_TIM_MspPostInit+0x100>)
 8002cde:	f001 fd8d 	bl	80047fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002ce2:	e047      	b.n	8002d74 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM5)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a27      	ldr	r2, [pc, #156]	; (8002d88 <HAL_TIM_MspPostInit+0x104>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d11f      	bne.n	8002d2e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	4b23      	ldr	r3, [pc, #140]	; (8002d80 <HAL_TIM_MspPostInit+0xfc>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	4a22      	ldr	r2, [pc, #136]	; (8002d80 <HAL_TIM_MspPostInit+0xfc>)
 8002cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfe:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <HAL_TIM_MspPostInit+0xfc>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8002d0a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d10:	2302      	movs	r3, #2
 8002d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d20:	f107 0314 	add.w	r3, r7, #20
 8002d24:	4619      	mov	r1, r3
 8002d26:	4819      	ldr	r0, [pc, #100]	; (8002d8c <HAL_TIM_MspPostInit+0x108>)
 8002d28:	f001 fd68 	bl	80047fc <HAL_GPIO_Init>
}
 8002d2c:	e022      	b.n	8002d74 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM12)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a17      	ldr	r2, [pc, #92]	; (8002d90 <HAL_TIM_MspPostInit+0x10c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d11d      	bne.n	8002d74 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60bb      	str	r3, [r7, #8]
 8002d3c:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <HAL_TIM_MspPostInit+0xfc>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	4a0f      	ldr	r2, [pc, #60]	; (8002d80 <HAL_TIM_MspPostInit+0xfc>)
 8002d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d46:	6313      	str	r3, [r2, #48]	; 0x30
 8002d48:	4b0d      	ldr	r3, [pc, #52]	; (8002d80 <HAL_TIM_MspPostInit+0xfc>)
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d54:	2340      	movs	r3, #64	; 0x40
 8002d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d60:	2300      	movs	r3, #0
 8002d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002d64:	2309      	movs	r3, #9
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d68:	f107 0314 	add.w	r3, r7, #20
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4807      	ldr	r0, [pc, #28]	; (8002d8c <HAL_TIM_MspPostInit+0x108>)
 8002d70:	f001 fd44 	bl	80047fc <HAL_GPIO_Init>
}
 8002d74:	bf00      	nop
 8002d76:	3728      	adds	r7, #40	; 0x28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40000800 	.word	0x40000800
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40020400 	.word	0x40020400
 8002d88:	40000c00 	.word	0x40000c00
 8002d8c:	40021c00 	.word	0x40021c00
 8002d90:	40001800 	.word	0x40001800

08002d94 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d98:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <MX_USART1_UART_Init+0x4c>)
 8002d9a:	4a12      	ldr	r2, [pc, #72]	; (8002de4 <MX_USART1_UART_Init+0x50>)
 8002d9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d9e:	4b10      	ldr	r3, [pc, #64]	; (8002de0 <MX_USART1_UART_Init+0x4c>)
 8002da0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002da4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002da6:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <MX_USART1_UART_Init+0x4c>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002dac:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <MX_USART1_UART_Init+0x4c>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002db2:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <MX_USART1_UART_Init+0x4c>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002db8:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <MX_USART1_UART_Init+0x4c>)
 8002dba:	220c      	movs	r2, #12
 8002dbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dbe:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <MX_USART1_UART_Init+0x4c>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dc4:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <MX_USART1_UART_Init+0x4c>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002dca:	4805      	ldr	r0, [pc, #20]	; (8002de0 <MX_USART1_UART_Init+0x4c>)
 8002dcc:	f004 fc52 	bl	8007674 <HAL_UART_Init>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002dd6:	f7ff fab3 	bl	8002340 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002dda:	bf00      	nop
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20004f18 	.word	0x20004f18
 8002de4:	40011000 	.word	0x40011000

08002de8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002dec:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <MX_USART3_UART_Init+0x48>)
 8002dee:	4a11      	ldr	r2, [pc, #68]	; (8002e34 <MX_USART3_UART_Init+0x4c>)
 8002df0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8002df2:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <MX_USART3_UART_Init+0x48>)
 8002df4:	4a10      	ldr	r2, [pc, #64]	; (8002e38 <MX_USART3_UART_Init+0x50>)
 8002df6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002df8:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <MX_USART3_UART_Init+0x48>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002dfe:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <MX_USART3_UART_Init+0x48>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e04:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <MX_USART3_UART_Init+0x48>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e0a:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <MX_USART3_UART_Init+0x48>)
 8002e0c:	220c      	movs	r2, #12
 8002e0e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e10:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <MX_USART3_UART_Init+0x48>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e16:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <MX_USART3_UART_Init+0x48>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e1c:	4804      	ldr	r0, [pc, #16]	; (8002e30 <MX_USART3_UART_Init+0x48>)
 8002e1e:	f004 fc29 	bl	8007674 <HAL_UART_Init>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8002e28:	f7ff fa8a 	bl	8002340 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	20004e14 	.word	0x20004e14
 8002e34:	40004800 	.word	0x40004800
 8002e38:	000186a0 	.word	0x000186a0

08002e3c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002e40:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <MX_USART6_UART_Init+0x4c>)
 8002e42:	4a12      	ldr	r2, [pc, #72]	; (8002e8c <MX_USART6_UART_Init+0x50>)
 8002e44:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002e46:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <MX_USART6_UART_Init+0x4c>)
 8002e48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e4c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002e4e:	4b0e      	ldr	r3, [pc, #56]	; (8002e88 <MX_USART6_UART_Init+0x4c>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002e54:	4b0c      	ldr	r3, [pc, #48]	; (8002e88 <MX_USART6_UART_Init+0x4c>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002e5a:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <MX_USART6_UART_Init+0x4c>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002e60:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <MX_USART6_UART_Init+0x4c>)
 8002e62:	220c      	movs	r2, #12
 8002e64:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e66:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <MX_USART6_UART_Init+0x4c>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e6c:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <MX_USART6_UART_Init+0x4c>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002e72:	4805      	ldr	r0, [pc, #20]	; (8002e88 <MX_USART6_UART_Init+0x4c>)
 8002e74:	f004 fbfe 	bl	8007674 <HAL_UART_Init>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002e7e:	f7ff fa5f 	bl	8002340 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20004f5c 	.word	0x20004f5c
 8002e8c:	40011400 	.word	0x40011400

08002e90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08e      	sub	sp, #56	; 0x38
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a68      	ldr	r2, [pc, #416]	; (8003050 <HAL_UART_MspInit+0x1c0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d164      	bne.n	8002f7c <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	623b      	str	r3, [r7, #32]
 8002eb6:	4b67      	ldr	r3, [pc, #412]	; (8003054 <HAL_UART_MspInit+0x1c4>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	4a66      	ldr	r2, [pc, #408]	; (8003054 <HAL_UART_MspInit+0x1c4>)
 8002ebc:	f043 0310 	orr.w	r3, r3, #16
 8002ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ec2:	4b64      	ldr	r3, [pc, #400]	; (8003054 <HAL_UART_MspInit+0x1c4>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	f003 0310 	and.w	r3, r3, #16
 8002eca:	623b      	str	r3, [r7, #32]
 8002ecc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61fb      	str	r3, [r7, #28]
 8002ed2:	4b60      	ldr	r3, [pc, #384]	; (8003054 <HAL_UART_MspInit+0x1c4>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	4a5f      	ldr	r2, [pc, #380]	; (8003054 <HAL_UART_MspInit+0x1c4>)
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ede:	4b5d      	ldr	r3, [pc, #372]	; (8003054 <HAL_UART_MspInit+0x1c4>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	61fb      	str	r3, [r7, #28]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8002eea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002efc:	2307      	movs	r3, #7
 8002efe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f04:	4619      	mov	r1, r3
 8002f06:	4854      	ldr	r0, [pc, #336]	; (8003058 <HAL_UART_MspInit+0x1c8>)
 8002f08:	f001 fc78 	bl	80047fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002f0c:	4b53      	ldr	r3, [pc, #332]	; (800305c <HAL_UART_MspInit+0x1cc>)
 8002f0e:	4a54      	ldr	r2, [pc, #336]	; (8003060 <HAL_UART_MspInit+0x1d0>)
 8002f10:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002f12:	4b52      	ldr	r3, [pc, #328]	; (800305c <HAL_UART_MspInit+0x1cc>)
 8002f14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f18:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f1a:	4b50      	ldr	r3, [pc, #320]	; (800305c <HAL_UART_MspInit+0x1cc>)
 8002f1c:	2240      	movs	r2, #64	; 0x40
 8002f1e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f20:	4b4e      	ldr	r3, [pc, #312]	; (800305c <HAL_UART_MspInit+0x1cc>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f26:	4b4d      	ldr	r3, [pc, #308]	; (800305c <HAL_UART_MspInit+0x1cc>)
 8002f28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f2c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f2e:	4b4b      	ldr	r3, [pc, #300]	; (800305c <HAL_UART_MspInit+0x1cc>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f34:	4b49      	ldr	r3, [pc, #292]	; (800305c <HAL_UART_MspInit+0x1cc>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002f3a:	4b48      	ldr	r3, [pc, #288]	; (800305c <HAL_UART_MspInit+0x1cc>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002f40:	4b46      	ldr	r3, [pc, #280]	; (800305c <HAL_UART_MspInit+0x1cc>)
 8002f42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f46:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f48:	4b44      	ldr	r3, [pc, #272]	; (800305c <HAL_UART_MspInit+0x1cc>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002f4e:	4843      	ldr	r0, [pc, #268]	; (800305c <HAL_UART_MspInit+0x1cc>)
 8002f50:	f001 f8d8 	bl	8004104 <HAL_DMA_Init>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002f5a:	f7ff f9f1 	bl	8002340 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a3e      	ldr	r2, [pc, #248]	; (800305c <HAL_UART_MspInit+0x1cc>)
 8002f62:	635a      	str	r2, [r3, #52]	; 0x34
 8002f64:	4a3d      	ldr	r2, [pc, #244]	; (800305c <HAL_UART_MspInit+0x1cc>)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2105      	movs	r1, #5
 8002f6e:	2025      	movs	r0, #37	; 0x25
 8002f70:	f001 f89e 	bl	80040b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f74:	2025      	movs	r0, #37	; 0x25
 8002f76:	f001 f8b7 	bl	80040e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002f7a:	e114      	b.n	80031a6 <HAL_UART_MspInit+0x316>
  else if(uartHandle->Instance==USART3)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a38      	ldr	r2, [pc, #224]	; (8003064 <HAL_UART_MspInit+0x1d4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d176      	bne.n	8003074 <HAL_UART_MspInit+0x1e4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	61bb      	str	r3, [r7, #24]
 8002f8a:	4b32      	ldr	r3, [pc, #200]	; (8003054 <HAL_UART_MspInit+0x1c4>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	4a31      	ldr	r2, [pc, #196]	; (8003054 <HAL_UART_MspInit+0x1c4>)
 8002f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f94:	6413      	str	r3, [r2, #64]	; 0x40
 8002f96:	4b2f      	ldr	r3, [pc, #188]	; (8003054 <HAL_UART_MspInit+0x1c4>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f9e:	61bb      	str	r3, [r7, #24]
 8002fa0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	4b2b      	ldr	r3, [pc, #172]	; (8003054 <HAL_UART_MspInit+0x1c4>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	4a2a      	ldr	r2, [pc, #168]	; (8003054 <HAL_UART_MspInit+0x1c4>)
 8002fac:	f043 0304 	orr.w	r3, r3, #4
 8002fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb2:	4b28      	ldr	r3, [pc, #160]	; (8003054 <HAL_UART_MspInit+0x1c4>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8002fbe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fd0:	2307      	movs	r3, #7
 8002fd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4823      	ldr	r0, [pc, #140]	; (8003068 <HAL_UART_MspInit+0x1d8>)
 8002fdc:	f001 fc0e 	bl	80047fc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002fe0:	4b22      	ldr	r3, [pc, #136]	; (800306c <HAL_UART_MspInit+0x1dc>)
 8002fe2:	4a23      	ldr	r2, [pc, #140]	; (8003070 <HAL_UART_MspInit+0x1e0>)
 8002fe4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002fe6:	4b21      	ldr	r3, [pc, #132]	; (800306c <HAL_UART_MspInit+0x1dc>)
 8002fe8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fec:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fee:	4b1f      	ldr	r3, [pc, #124]	; (800306c <HAL_UART_MspInit+0x1dc>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ff4:	4b1d      	ldr	r3, [pc, #116]	; (800306c <HAL_UART_MspInit+0x1dc>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ffa:	4b1c      	ldr	r3, [pc, #112]	; (800306c <HAL_UART_MspInit+0x1dc>)
 8002ffc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003000:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003002:	4b1a      	ldr	r3, [pc, #104]	; (800306c <HAL_UART_MspInit+0x1dc>)
 8003004:	2200      	movs	r2, #0
 8003006:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003008:	4b18      	ldr	r3, [pc, #96]	; (800306c <HAL_UART_MspInit+0x1dc>)
 800300a:	2200      	movs	r2, #0
 800300c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800300e:	4b17      	ldr	r3, [pc, #92]	; (800306c <HAL_UART_MspInit+0x1dc>)
 8003010:	2200      	movs	r2, #0
 8003012:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003014:	4b15      	ldr	r3, [pc, #84]	; (800306c <HAL_UART_MspInit+0x1dc>)
 8003016:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800301a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800301c:	4b13      	ldr	r3, [pc, #76]	; (800306c <HAL_UART_MspInit+0x1dc>)
 800301e:	2200      	movs	r2, #0
 8003020:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003022:	4812      	ldr	r0, [pc, #72]	; (800306c <HAL_UART_MspInit+0x1dc>)
 8003024:	f001 f86e 	bl	8004104 <HAL_DMA_Init>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 800302e:	f7ff f987 	bl	8002340 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a0d      	ldr	r2, [pc, #52]	; (800306c <HAL_UART_MspInit+0x1dc>)
 8003036:	639a      	str	r2, [r3, #56]	; 0x38
 8003038:	4a0c      	ldr	r2, [pc, #48]	; (800306c <HAL_UART_MspInit+0x1dc>)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800303e:	2200      	movs	r2, #0
 8003040:	2105      	movs	r1, #5
 8003042:	2027      	movs	r0, #39	; 0x27
 8003044:	f001 f834 	bl	80040b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003048:	2027      	movs	r0, #39	; 0x27
 800304a:	f001 f84d 	bl	80040e8 <HAL_NVIC_EnableIRQ>
}
 800304e:	e0aa      	b.n	80031a6 <HAL_UART_MspInit+0x316>
 8003050:	40011000 	.word	0x40011000
 8003054:	40023800 	.word	0x40023800
 8003058:	40020000 	.word	0x40020000
 800305c:	20004e58 	.word	0x20004e58
 8003060:	400264b8 	.word	0x400264b8
 8003064:	40004800 	.word	0x40004800
 8003068:	40020800 	.word	0x40020800
 800306c:	20004db4 	.word	0x20004db4
 8003070:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a4d      	ldr	r2, [pc, #308]	; (80031b0 <HAL_UART_MspInit+0x320>)
 800307a:	4293      	cmp	r3, r2
 800307c:	f040 8093 	bne.w	80031a6 <HAL_UART_MspInit+0x316>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003080:	2300      	movs	r3, #0
 8003082:	613b      	str	r3, [r7, #16]
 8003084:	4b4b      	ldr	r3, [pc, #300]	; (80031b4 <HAL_UART_MspInit+0x324>)
 8003086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003088:	4a4a      	ldr	r2, [pc, #296]	; (80031b4 <HAL_UART_MspInit+0x324>)
 800308a:	f043 0320 	orr.w	r3, r3, #32
 800308e:	6453      	str	r3, [r2, #68]	; 0x44
 8003090:	4b48      	ldr	r3, [pc, #288]	; (80031b4 <HAL_UART_MspInit+0x324>)
 8003092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	613b      	str	r3, [r7, #16]
 800309a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800309c:	2300      	movs	r3, #0
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	4b44      	ldr	r3, [pc, #272]	; (80031b4 <HAL_UART_MspInit+0x324>)
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	4a43      	ldr	r2, [pc, #268]	; (80031b4 <HAL_UART_MspInit+0x324>)
 80030a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030aa:	6313      	str	r3, [r2, #48]	; 0x30
 80030ac:	4b41      	ldr	r3, [pc, #260]	; (80031b4 <HAL_UART_MspInit+0x324>)
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80030b8:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030be:	2302      	movs	r3, #2
 80030c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c6:	2303      	movs	r3, #3
 80030c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80030ca:	2308      	movs	r3, #8
 80030cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030d2:	4619      	mov	r1, r3
 80030d4:	4838      	ldr	r0, [pc, #224]	; (80031b8 <HAL_UART_MspInit+0x328>)
 80030d6:	f001 fb91 	bl	80047fc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80030da:	4b38      	ldr	r3, [pc, #224]	; (80031bc <HAL_UART_MspInit+0x32c>)
 80030dc:	4a38      	ldr	r2, [pc, #224]	; (80031c0 <HAL_UART_MspInit+0x330>)
 80030de:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80030e0:	4b36      	ldr	r3, [pc, #216]	; (80031bc <HAL_UART_MspInit+0x32c>)
 80030e2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80030e6:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030e8:	4b34      	ldr	r3, [pc, #208]	; (80031bc <HAL_UART_MspInit+0x32c>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030ee:	4b33      	ldr	r3, [pc, #204]	; (80031bc <HAL_UART_MspInit+0x32c>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030f4:	4b31      	ldr	r3, [pc, #196]	; (80031bc <HAL_UART_MspInit+0x32c>)
 80030f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030fa:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030fc:	4b2f      	ldr	r3, [pc, #188]	; (80031bc <HAL_UART_MspInit+0x32c>)
 80030fe:	2200      	movs	r2, #0
 8003100:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003102:	4b2e      	ldr	r3, [pc, #184]	; (80031bc <HAL_UART_MspInit+0x32c>)
 8003104:	2200      	movs	r2, #0
 8003106:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003108:	4b2c      	ldr	r3, [pc, #176]	; (80031bc <HAL_UART_MspInit+0x32c>)
 800310a:	2200      	movs	r2, #0
 800310c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800310e:	4b2b      	ldr	r3, [pc, #172]	; (80031bc <HAL_UART_MspInit+0x32c>)
 8003110:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003114:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003116:	4b29      	ldr	r3, [pc, #164]	; (80031bc <HAL_UART_MspInit+0x32c>)
 8003118:	2200      	movs	r2, #0
 800311a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800311c:	4827      	ldr	r0, [pc, #156]	; (80031bc <HAL_UART_MspInit+0x32c>)
 800311e:	f000 fff1 	bl	8004104 <HAL_DMA_Init>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_UART_MspInit+0x29c>
      Error_Handler();
 8003128:	f7ff f90a 	bl	8002340 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a23      	ldr	r2, [pc, #140]	; (80031bc <HAL_UART_MspInit+0x32c>)
 8003130:	639a      	str	r2, [r3, #56]	; 0x38
 8003132:	4a22      	ldr	r2, [pc, #136]	; (80031bc <HAL_UART_MspInit+0x32c>)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8003138:	4b22      	ldr	r3, [pc, #136]	; (80031c4 <HAL_UART_MspInit+0x334>)
 800313a:	4a23      	ldr	r2, [pc, #140]	; (80031c8 <HAL_UART_MspInit+0x338>)
 800313c:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800313e:	4b21      	ldr	r3, [pc, #132]	; (80031c4 <HAL_UART_MspInit+0x334>)
 8003140:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003144:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003146:	4b1f      	ldr	r3, [pc, #124]	; (80031c4 <HAL_UART_MspInit+0x334>)
 8003148:	2240      	movs	r2, #64	; 0x40
 800314a:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800314c:	4b1d      	ldr	r3, [pc, #116]	; (80031c4 <HAL_UART_MspInit+0x334>)
 800314e:	2200      	movs	r2, #0
 8003150:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003152:	4b1c      	ldr	r3, [pc, #112]	; (80031c4 <HAL_UART_MspInit+0x334>)
 8003154:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003158:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800315a:	4b1a      	ldr	r3, [pc, #104]	; (80031c4 <HAL_UART_MspInit+0x334>)
 800315c:	2200      	movs	r2, #0
 800315e:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003160:	4b18      	ldr	r3, [pc, #96]	; (80031c4 <HAL_UART_MspInit+0x334>)
 8003162:	2200      	movs	r2, #0
 8003164:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8003166:	4b17      	ldr	r3, [pc, #92]	; (80031c4 <HAL_UART_MspInit+0x334>)
 8003168:	2200      	movs	r2, #0
 800316a:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800316c:	4b15      	ldr	r3, [pc, #84]	; (80031c4 <HAL_UART_MspInit+0x334>)
 800316e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003172:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003174:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <HAL_UART_MspInit+0x334>)
 8003176:	2200      	movs	r2, #0
 8003178:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800317a:	4812      	ldr	r0, [pc, #72]	; (80031c4 <HAL_UART_MspInit+0x334>)
 800317c:	f000 ffc2 	bl	8004104 <HAL_DMA_Init>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <HAL_UART_MspInit+0x2fa>
      Error_Handler();
 8003186:	f7ff f8db 	bl	8002340 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a0d      	ldr	r2, [pc, #52]	; (80031c4 <HAL_UART_MspInit+0x334>)
 800318e:	635a      	str	r2, [r3, #52]	; 0x34
 8003190:	4a0c      	ldr	r2, [pc, #48]	; (80031c4 <HAL_UART_MspInit+0x334>)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003196:	2200      	movs	r2, #0
 8003198:	2105      	movs	r1, #5
 800319a:	2047      	movs	r0, #71	; 0x47
 800319c:	f000 ff88 	bl	80040b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80031a0:	2047      	movs	r0, #71	; 0x47
 80031a2:	f000 ffa1 	bl	80040e8 <HAL_NVIC_EnableIRQ>
}
 80031a6:	bf00      	nop
 80031a8:	3738      	adds	r7, #56	; 0x38
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40011400 	.word	0x40011400
 80031b4:	40023800 	.word	0x40023800
 80031b8:	40021800 	.word	0x40021800
 80031bc:	20004d54 	.word	0x20004d54
 80031c0:	40026428 	.word	0x40026428
 80031c4:	20004eb8 	.word	0x20004eb8
 80031c8:	400264a0 	.word	0x400264a0

080031cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80031cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003204 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031d0:	480d      	ldr	r0, [pc, #52]	; (8003208 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031d2:	490e      	ldr	r1, [pc, #56]	; (800320c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031d4:	4a0e      	ldr	r2, [pc, #56]	; (8003210 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031d8:	e002      	b.n	80031e0 <LoopCopyDataInit>

080031da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031de:	3304      	adds	r3, #4

080031e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031e4:	d3f9      	bcc.n	80031da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031e6:	4a0b      	ldr	r2, [pc, #44]	; (8003214 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031e8:	4c0b      	ldr	r4, [pc, #44]	; (8003218 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031ec:	e001      	b.n	80031f2 <LoopFillZerobss>

080031ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031f0:	3204      	adds	r2, #4

080031f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031f4:	d3fb      	bcc.n	80031ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80031f6:	f7ff fb1b 	bl	8002830 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031fa:	f00a f88f 	bl	800d31c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031fe:	f7fe fff1 	bl	80021e4 <main>
  bx  lr    
 8003202:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003204:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800320c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003210:	0800d458 	.word	0x0800d458
  ldr r2, =_sbss
 8003214:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003218:	200053ec 	.word	0x200053ec

0800321c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800321c:	e7fe      	b.n	800321c <ADC_IRQHandler>
	...

08003220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003224:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <HAL_Init+0x40>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a0d      	ldr	r2, [pc, #52]	; (8003260 <HAL_Init+0x40>)
 800322a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800322e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003230:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <HAL_Init+0x40>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a0a      	ldr	r2, [pc, #40]	; (8003260 <HAL_Init+0x40>)
 8003236:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800323a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800323c:	4b08      	ldr	r3, [pc, #32]	; (8003260 <HAL_Init+0x40>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a07      	ldr	r2, [pc, #28]	; (8003260 <HAL_Init+0x40>)
 8003242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003246:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003248:	2003      	movs	r0, #3
 800324a:	f000 ff26 	bl	800409a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800324e:	2000      	movs	r0, #0
 8003250:	f7ff f9e8 	bl	8002624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003254:	f7ff f9ba 	bl	80025cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40023c00 	.word	0x40023c00

08003264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return uwTick;
 8003268:	4b03      	ldr	r3, [pc, #12]	; (8003278 <HAL_GetTick+0x14>)
 800326a:	681b      	ldr	r3, [r3, #0]
}
 800326c:	4618      	mov	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	20004fa0 	.word	0x20004fa0

0800327c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e0ed      	b.n	800346a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d102      	bne.n	80032a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fe fdc2 	bl	8001e24 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032b0:	f7ff ffd8 	bl	8003264 <HAL_GetTick>
 80032b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80032b6:	e012      	b.n	80032de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032b8:	f7ff ffd4 	bl	8003264 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b0a      	cmp	r3, #10
 80032c4:	d90b      	bls.n	80032de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2205      	movs	r2, #5
 80032d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e0c5      	b.n	800346a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0e5      	beq.n	80032b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0202 	bic.w	r2, r2, #2
 80032fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032fc:	f7ff ffb2 	bl	8003264 <HAL_GetTick>
 8003300:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003302:	e012      	b.n	800332a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003304:	f7ff ffae 	bl	8003264 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b0a      	cmp	r3, #10
 8003310:	d90b      	bls.n	800332a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2205      	movs	r2, #5
 8003322:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e09f      	b.n	800346a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1e5      	bne.n	8003304 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	7e1b      	ldrb	r3, [r3, #24]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d108      	bne.n	8003352 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	e007      	b.n	8003362 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003360:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	7e5b      	ldrb	r3, [r3, #25]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d108      	bne.n	800337c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	e007      	b.n	800338c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800338a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	7e9b      	ldrb	r3, [r3, #26]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d108      	bne.n	80033a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0220 	orr.w	r2, r2, #32
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	e007      	b.n	80033b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0220 	bic.w	r2, r2, #32
 80033b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	7edb      	ldrb	r3, [r3, #27]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d108      	bne.n	80033d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0210 	bic.w	r2, r2, #16
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	e007      	b.n	80033e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0210 	orr.w	r2, r2, #16
 80033de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	7f1b      	ldrb	r3, [r3, #28]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d108      	bne.n	80033fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0208 	orr.w	r2, r2, #8
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	e007      	b.n	800340a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0208 	bic.w	r2, r2, #8
 8003408:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	7f5b      	ldrb	r3, [r3, #29]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d108      	bne.n	8003424 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0204 	orr.w	r2, r2, #4
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	e007      	b.n	8003434 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0204 	bic.w	r2, r2, #4
 8003432:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	ea42 0103 	orr.w	r1, r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	1e5a      	subs	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3020 	ldrb.w	r3, [r3, #32]
 800348a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800348c:	7cfb      	ldrb	r3, [r7, #19]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d003      	beq.n	800349a <HAL_CAN_ConfigFilter+0x26>
 8003492:	7cfb      	ldrb	r3, [r7, #19]
 8003494:	2b02      	cmp	r3, #2
 8003496:	f040 80be 	bne.w	8003616 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800349a:	4b65      	ldr	r3, [pc, #404]	; (8003630 <HAL_CAN_ConfigFilter+0x1bc>)
 800349c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80034a4:	f043 0201 	orr.w	r2, r3, #1
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80034b4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	021b      	lsls	r3, r3, #8
 80034ca:	431a      	orrs	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f003 031f 	and.w	r3, r3, #31
 80034da:	2201      	movs	r2, #1
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	43db      	mvns	r3, r3
 80034ec:	401a      	ands	r2, r3
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d123      	bne.n	8003544 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	43db      	mvns	r3, r3
 8003506:	401a      	ands	r2, r3
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800351e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	3248      	adds	r2, #72	; 0x48
 8003524:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003538:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800353a:	6979      	ldr	r1, [r7, #20]
 800353c:	3348      	adds	r3, #72	; 0x48
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	440b      	add	r3, r1
 8003542:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d122      	bne.n	8003592 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	431a      	orrs	r2, r3
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800356c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	3248      	adds	r2, #72	; 0x48
 8003572:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003586:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003588:	6979      	ldr	r1, [r7, #20]
 800358a:	3348      	adds	r3, #72	; 0x48
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	440b      	add	r3, r1
 8003590:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d109      	bne.n	80035ae <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	43db      	mvns	r3, r3
 80035a4:	401a      	ands	r2, r3
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80035ac:	e007      	b.n	80035be <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	431a      	orrs	r2, r3
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	401a      	ands	r2, r3
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80035d8:	e007      	b.n	80035ea <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d107      	bne.n	8003602 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	431a      	orrs	r2, r3
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003608:	f023 0201 	bic.w	r2, r3, #1
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	e006      	b.n	8003624 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
  }
}
 8003624:	4618      	mov	r0, r3
 8003626:	371c      	adds	r7, #28
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	40006400 	.word	0x40006400

08003634 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	d12e      	bne.n	80036a6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003660:	f7ff fe00 	bl	8003264 <HAL_GetTick>
 8003664:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003666:	e012      	b.n	800368e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003668:	f7ff fdfc 	bl	8003264 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b0a      	cmp	r3, #10
 8003674:	d90b      	bls.n	800368e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2205      	movs	r2, #5
 8003686:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e012      	b.n	80036b4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1e5      	bne.n	8003668 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	e006      	b.n	80036b4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
  }
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80036bc:	b480      	push	{r7}
 80036be:	b089      	sub	sp, #36	; 0x24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036d0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80036da:	7ffb      	ldrb	r3, [r7, #31]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d003      	beq.n	80036e8 <HAL_CAN_AddTxMessage+0x2c>
 80036e0:	7ffb      	ldrb	r3, [r7, #31]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	f040 80b8 	bne.w	8003858 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10a      	bne.n	8003708 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d105      	bne.n	8003708 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 80a0 	beq.w	8003848 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	0e1b      	lsrs	r3, r3, #24
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d907      	bls.n	8003728 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e09e      	b.n	8003866 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003728:	2201      	movs	r2, #1
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	409a      	lsls	r2, r3
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10d      	bne.n	8003756 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003744:	68f9      	ldr	r1, [r7, #12]
 8003746:	6809      	ldr	r1, [r1, #0]
 8003748:	431a      	orrs	r2, r3
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	3318      	adds	r3, #24
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	440b      	add	r3, r1
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	e00f      	b.n	8003776 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003760:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003766:	68f9      	ldr	r1, [r7, #12]
 8003768:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800376a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	3318      	adds	r3, #24
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	440b      	add	r3, r1
 8003774:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6819      	ldr	r1, [r3, #0]
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	691a      	ldr	r2, [r3, #16]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	3318      	adds	r3, #24
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	440b      	add	r3, r1
 8003786:	3304      	adds	r3, #4
 8003788:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	7d1b      	ldrb	r3, [r3, #20]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d111      	bne.n	80037b6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	3318      	adds	r3, #24
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	4413      	add	r3, r2
 800379e:	3304      	adds	r3, #4
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	6811      	ldr	r1, [r2, #0]
 80037a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	3318      	adds	r3, #24
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	440b      	add	r3, r1
 80037b2:	3304      	adds	r3, #4
 80037b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3307      	adds	r3, #7
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	061a      	lsls	r2, r3, #24
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3306      	adds	r3, #6
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	041b      	lsls	r3, r3, #16
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3305      	adds	r3, #5
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	021b      	lsls	r3, r3, #8
 80037d0:	4313      	orrs	r3, r2
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	3204      	adds	r2, #4
 80037d6:	7812      	ldrb	r2, [r2, #0]
 80037d8:	4610      	mov	r0, r2
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	6811      	ldr	r1, [r2, #0]
 80037de:	ea43 0200 	orr.w	r2, r3, r0
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	440b      	add	r3, r1
 80037e8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80037ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3303      	adds	r3, #3
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	061a      	lsls	r2, r3, #24
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3302      	adds	r3, #2
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	041b      	lsls	r3, r3, #16
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3301      	adds	r3, #1
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	021b      	lsls	r3, r3, #8
 8003808:	4313      	orrs	r3, r2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	7812      	ldrb	r2, [r2, #0]
 800380e:	4610      	mov	r0, r2
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	6811      	ldr	r1, [r2, #0]
 8003814:	ea43 0200 	orr.w	r2, r3, r0
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	440b      	add	r3, r1
 800381e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003822:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	3318      	adds	r3, #24
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	4413      	add	r3, r2
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	6811      	ldr	r1, [r2, #0]
 8003836:	f043 0201 	orr.w	r2, r3, #1
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	3318      	adds	r3, #24
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	440b      	add	r3, r1
 8003842:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003844:	2300      	movs	r3, #0
 8003846:	e00e      	b.n	8003866 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e006      	b.n	8003866 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
  }
}
 8003866:	4618      	mov	r0, r3
 8003868:	3724      	adds	r7, #36	; 0x24
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003872:	b480      	push	{r7}
 8003874:	b087      	sub	sp, #28
 8003876:	af00      	add	r7, sp, #0
 8003878:	60f8      	str	r0, [r7, #12]
 800387a:	60b9      	str	r1, [r7, #8]
 800387c:	607a      	str	r2, [r7, #4]
 800387e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003886:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003888:	7dfb      	ldrb	r3, [r7, #23]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d003      	beq.n	8003896 <HAL_CAN_GetRxMessage+0x24>
 800388e:	7dfb      	ldrb	r3, [r7, #23]
 8003890:	2b02      	cmp	r3, #2
 8003892:	f040 80f3 	bne.w	8003a7c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10e      	bne.n	80038ba <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d116      	bne.n	80038d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e0e7      	b.n	8003a8a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d107      	bne.n	80038d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0d8      	b.n	8003a8a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	331b      	adds	r3, #27
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	4413      	add	r3, r2
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0204 	and.w	r2, r3, #4
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10c      	bne.n	8003910 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	331b      	adds	r3, #27
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	4413      	add	r3, r2
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	0d5b      	lsrs	r3, r3, #21
 8003906:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	e00b      	b.n	8003928 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	331b      	adds	r3, #27
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	4413      	add	r3, r2
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	08db      	lsrs	r3, r3, #3
 8003920:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	331b      	adds	r3, #27
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	4413      	add	r3, r2
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0202 	and.w	r2, r3, #2
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	331b      	adds	r3, #27
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	4413      	add	r3, r2
 800394a:	3304      	adds	r3, #4
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 020f 	and.w	r2, r3, #15
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	331b      	adds	r3, #27
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	4413      	add	r3, r2
 8003962:	3304      	adds	r3, #4
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	0a1b      	lsrs	r3, r3, #8
 8003968:	b2da      	uxtb	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	331b      	adds	r3, #27
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	4413      	add	r3, r2
 800397a:	3304      	adds	r3, #4
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	0c1b      	lsrs	r3, r3, #16
 8003980:	b29a      	uxth	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	4413      	add	r3, r2
 8003990:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	b2da      	uxtb	r2, r3
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	0a1a      	lsrs	r2, r3, #8
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	3301      	adds	r3, #1
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	4413      	add	r3, r2
 80039c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	0c1a      	lsrs	r2, r3, #16
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	3302      	adds	r3, #2
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	4413      	add	r3, r2
 80039da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	0e1a      	lsrs	r2, r3, #24
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	3303      	adds	r3, #3
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	3304      	adds	r3, #4
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	0a1a      	lsrs	r2, r3, #8
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	3305      	adds	r3, #5
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	0c1a      	lsrs	r2, r3, #16
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	3306      	adds	r3, #6
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	0e1a      	lsrs	r2, r3, #24
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	3307      	adds	r3, #7
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d108      	bne.n	8003a68 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0220 	orr.w	r2, r2, #32
 8003a64:	60da      	str	r2, [r3, #12]
 8003a66:	e007      	b.n	8003a78 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691a      	ldr	r2, [r3, #16]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0220 	orr.w	r2, r2, #32
 8003a76:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	e006      	b.n	8003a8a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
  }
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	371c      	adds	r7, #28
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b085      	sub	sp, #20
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aa6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d002      	beq.n	8003ab4 <HAL_CAN_ActivateNotification+0x1e>
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d109      	bne.n	8003ac8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6959      	ldr	r1, [r3, #20]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	e006      	b.n	8003ad6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
  }
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b08a      	sub	sp, #40	; 0x28
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003aea:	2300      	movs	r3, #0
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d07c      	beq.n	8003c22 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d023      	beq.n	8003b7a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2201      	movs	r2, #1
 8003b38:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f983 	bl	8003e50 <HAL_CAN_TxMailbox0CompleteCallback>
 8003b4a:	e016      	b.n	8003b7a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	f003 0304 	and.w	r3, r3, #4
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d004      	beq.n	8003b60 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5e:	e00c      	b.n	8003b7a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d004      	beq.n	8003b74 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
 8003b72:	e002      	b.n	8003b7a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f989 	bl	8003e8c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d024      	beq.n	8003bce <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d003      	beq.n	8003ba0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f963 	bl	8003e64 <HAL_CAN_TxMailbox1CompleteCallback>
 8003b9e:	e016      	b.n	8003bce <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d004      	beq.n	8003bb4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb2:	e00c      	b.n	8003bce <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d004      	beq.n	8003bc8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc6:	e002      	b.n	8003bce <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f969 	bl	8003ea0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d024      	beq.n	8003c22 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003be0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f943 	bl	8003e78 <HAL_CAN_TxMailbox2CompleteCallback>
 8003bf2:	e016      	b.n	8003c22 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d004      	beq.n	8003c08 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
 8003c06:	e00c      	b.n	8003c22 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d004      	beq.n	8003c1c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1a:	e002      	b.n	8003c22 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f949 	bl	8003eb4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00c      	beq.n	8003c46 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f003 0310 	and.w	r3, r3, #16
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2210      	movs	r2, #16
 8003c44:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00b      	beq.n	8003c68 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d006      	beq.n	8003c68 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2208      	movs	r2, #8
 8003c60:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f930 	bl	8003ec8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d009      	beq.n	8003c86 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f003 0303 	and.w	r3, r3, #3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7fd f8ef 	bl	8000e64 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00c      	beq.n	8003caa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f003 0310 	and.w	r3, r3, #16
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d007      	beq.n	8003caa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ca0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2210      	movs	r2, #16
 8003ca8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	f003 0320 	and.w	r3, r3, #32
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00b      	beq.n	8003ccc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d006      	beq.n	8003ccc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2208      	movs	r2, #8
 8003cc4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f912 	bl	8003ef0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	f003 0310 	and.w	r3, r3, #16
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f8f9 	bl	8003edc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00b      	beq.n	8003d0c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d006      	beq.n	8003d0c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2210      	movs	r2, #16
 8003d04:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f8fc 	bl	8003f04 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00b      	beq.n	8003d2e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f003 0308 	and.w	r3, r3, #8
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d006      	beq.n	8003d2e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2208      	movs	r2, #8
 8003d26:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f8f5 	bl	8003f18 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d07b      	beq.n	8003e30 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d072      	beq.n	8003e28 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d008      	beq.n	8003d5e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	f043 0301 	orr.w	r3, r3, #1
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d008      	beq.n	8003d7a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	f043 0302 	orr.w	r3, r3, #2
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	f043 0304 	orr.w	r3, r3, #4
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d043      	beq.n	8003e28 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d03e      	beq.n	8003e28 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003db0:	2b60      	cmp	r3, #96	; 0x60
 8003db2:	d02b      	beq.n	8003e0c <HAL_CAN_IRQHandler+0x32a>
 8003db4:	2b60      	cmp	r3, #96	; 0x60
 8003db6:	d82e      	bhi.n	8003e16 <HAL_CAN_IRQHandler+0x334>
 8003db8:	2b50      	cmp	r3, #80	; 0x50
 8003dba:	d022      	beq.n	8003e02 <HAL_CAN_IRQHandler+0x320>
 8003dbc:	2b50      	cmp	r3, #80	; 0x50
 8003dbe:	d82a      	bhi.n	8003e16 <HAL_CAN_IRQHandler+0x334>
 8003dc0:	2b40      	cmp	r3, #64	; 0x40
 8003dc2:	d019      	beq.n	8003df8 <HAL_CAN_IRQHandler+0x316>
 8003dc4:	2b40      	cmp	r3, #64	; 0x40
 8003dc6:	d826      	bhi.n	8003e16 <HAL_CAN_IRQHandler+0x334>
 8003dc8:	2b30      	cmp	r3, #48	; 0x30
 8003dca:	d010      	beq.n	8003dee <HAL_CAN_IRQHandler+0x30c>
 8003dcc:	2b30      	cmp	r3, #48	; 0x30
 8003dce:	d822      	bhi.n	8003e16 <HAL_CAN_IRQHandler+0x334>
 8003dd0:	2b10      	cmp	r3, #16
 8003dd2:	d002      	beq.n	8003dda <HAL_CAN_IRQHandler+0x2f8>
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d005      	beq.n	8003de4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003dd8:	e01d      	b.n	8003e16 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	f043 0308 	orr.w	r3, r3, #8
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003de2:	e019      	b.n	8003e18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	f043 0310 	orr.w	r3, r3, #16
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003dec:	e014      	b.n	8003e18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	f043 0320 	orr.w	r3, r3, #32
 8003df4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003df6:	e00f      	b.n	8003e18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e00:	e00a      	b.n	8003e18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e0a:	e005      	b.n	8003e18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e14:	e000      	b.n	8003e18 <HAL_CAN_IRQHandler+0x336>
            break;
 8003e16:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699a      	ldr	r2, [r3, #24]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003e26:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d008      	beq.n	8003e48 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f872 	bl	8003f2c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003e48:	bf00      	nop
 8003e4a:	3728      	adds	r7, #40	; 0x28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f50:	4b0c      	ldr	r3, [pc, #48]	; (8003f84 <__NVIC_SetPriorityGrouping+0x44>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f72:	4a04      	ldr	r2, [pc, #16]	; (8003f84 <__NVIC_SetPriorityGrouping+0x44>)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	60d3      	str	r3, [r2, #12]
}
 8003f78:	bf00      	nop
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	e000ed00 	.word	0xe000ed00

08003f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f8c:	4b04      	ldr	r3, [pc, #16]	; (8003fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	0a1b      	lsrs	r3, r3, #8
 8003f92:	f003 0307 	and.w	r3, r3, #7
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	e000ed00 	.word	0xe000ed00

08003fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	4603      	mov	r3, r0
 8003fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	db0b      	blt.n	8003fce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fb6:	79fb      	ldrb	r3, [r7, #7]
 8003fb8:	f003 021f 	and.w	r2, r3, #31
 8003fbc:	4907      	ldr	r1, [pc, #28]	; (8003fdc <__NVIC_EnableIRQ+0x38>)
 8003fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	2001      	movs	r0, #1
 8003fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8003fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	e000e100 	.word	0xe000e100

08003fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	6039      	str	r1, [r7, #0]
 8003fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	db0a      	blt.n	800400a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	490c      	ldr	r1, [pc, #48]	; (800402c <__NVIC_SetPriority+0x4c>)
 8003ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffe:	0112      	lsls	r2, r2, #4
 8004000:	b2d2      	uxtb	r2, r2
 8004002:	440b      	add	r3, r1
 8004004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004008:	e00a      	b.n	8004020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	b2da      	uxtb	r2, r3
 800400e:	4908      	ldr	r1, [pc, #32]	; (8004030 <__NVIC_SetPriority+0x50>)
 8004010:	79fb      	ldrb	r3, [r7, #7]
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	3b04      	subs	r3, #4
 8004018:	0112      	lsls	r2, r2, #4
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	440b      	add	r3, r1
 800401e:	761a      	strb	r2, [r3, #24]
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	e000e100 	.word	0xe000e100
 8004030:	e000ed00 	.word	0xe000ed00

08004034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004034:	b480      	push	{r7}
 8004036:	b089      	sub	sp, #36	; 0x24
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f1c3 0307 	rsb	r3, r3, #7
 800404e:	2b04      	cmp	r3, #4
 8004050:	bf28      	it	cs
 8004052:	2304      	movcs	r3, #4
 8004054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	3304      	adds	r3, #4
 800405a:	2b06      	cmp	r3, #6
 800405c:	d902      	bls.n	8004064 <NVIC_EncodePriority+0x30>
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	3b03      	subs	r3, #3
 8004062:	e000      	b.n	8004066 <NVIC_EncodePriority+0x32>
 8004064:	2300      	movs	r3, #0
 8004066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004068:	f04f 32ff 	mov.w	r2, #4294967295
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43da      	mvns	r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	401a      	ands	r2, r3
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800407c:	f04f 31ff 	mov.w	r1, #4294967295
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	fa01 f303 	lsl.w	r3, r1, r3
 8004086:	43d9      	mvns	r1, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800408c:	4313      	orrs	r3, r2
         );
}
 800408e:	4618      	mov	r0, r3
 8004090:	3724      	adds	r7, #36	; 0x24
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b082      	sub	sp, #8
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7ff ff4c 	bl	8003f40 <__NVIC_SetPriorityGrouping>
}
 80040a8:	bf00      	nop
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	4603      	mov	r3, r0
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040be:	2300      	movs	r3, #0
 80040c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040c2:	f7ff ff61 	bl	8003f88 <__NVIC_GetPriorityGrouping>
 80040c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	68b9      	ldr	r1, [r7, #8]
 80040cc:	6978      	ldr	r0, [r7, #20]
 80040ce:	f7ff ffb1 	bl	8004034 <NVIC_EncodePriority>
 80040d2:	4602      	mov	r2, r0
 80040d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040d8:	4611      	mov	r1, r2
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff ff80 	bl	8003fe0 <__NVIC_SetPriority>
}
 80040e0:	bf00      	nop
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff ff54 	bl	8003fa4 <__NVIC_EnableIRQ>
}
 80040fc:	bf00      	nop
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004110:	f7ff f8a8 	bl	8003264 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e099      	b.n	8004254 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0201 	bic.w	r2, r2, #1
 800413e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004140:	e00f      	b.n	8004162 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004142:	f7ff f88f 	bl	8003264 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b05      	cmp	r3, #5
 800414e:	d908      	bls.n	8004162 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2220      	movs	r2, #32
 8004154:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2203      	movs	r2, #3
 800415a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e078      	b.n	8004254 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1e8      	bne.n	8004142 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	4b38      	ldr	r3, [pc, #224]	; (800425c <HAL_DMA_Init+0x158>)
 800417c:	4013      	ands	r3, r2
 800417e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800418e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800419a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	2b04      	cmp	r3, #4
 80041ba:	d107      	bne.n	80041cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c4:	4313      	orrs	r3, r2
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f023 0307 	bic.w	r3, r3, #7
 80041e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d117      	bne.n	8004226 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00e      	beq.n	8004226 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 fa7b 	bl	8004704 <DMA_CheckFifoParam>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d008      	beq.n	8004226 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2240      	movs	r2, #64	; 0x40
 8004218:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004222:	2301      	movs	r3, #1
 8004224:	e016      	b.n	8004254 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fa32 	bl	8004698 <DMA_CalcBaseAndBitshift>
 8004234:	4603      	mov	r3, r0
 8004236:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423c:	223f      	movs	r2, #63	; 0x3f
 800423e:	409a      	lsls	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3718      	adds	r7, #24
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	f010803f 	.word	0xf010803f

08004260 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800426e:	f7fe fff9 	bl	8003264 <HAL_GetTick>
 8004272:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d008      	beq.n	8004292 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2280      	movs	r2, #128	; 0x80
 8004284:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e052      	b.n	8004338 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0216 	bic.w	r2, r2, #22
 80042a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	695a      	ldr	r2, [r3, #20]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d103      	bne.n	80042c2 <HAL_DMA_Abort+0x62>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d007      	beq.n	80042d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0208 	bic.w	r2, r2, #8
 80042d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0201 	bic.w	r2, r2, #1
 80042e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042e2:	e013      	b.n	800430c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042e4:	f7fe ffbe 	bl	8003264 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b05      	cmp	r3, #5
 80042f0:	d90c      	bls.n	800430c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2220      	movs	r2, #32
 80042f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2203      	movs	r2, #3
 80042fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e015      	b.n	8004338 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1e4      	bne.n	80042e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431e:	223f      	movs	r2, #63	; 0x3f
 8004320:	409a      	lsls	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d004      	beq.n	800435e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2280      	movs	r2, #128	; 0x80
 8004358:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e00c      	b.n	8004378 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2205      	movs	r2, #5
 8004362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0201 	bic.w	r2, r2, #1
 8004374:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004390:	4b92      	ldr	r3, [pc, #584]	; (80045dc <HAL_DMA_IRQHandler+0x258>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a92      	ldr	r2, [pc, #584]	; (80045e0 <HAL_DMA_IRQHandler+0x25c>)
 8004396:	fba2 2303 	umull	r2, r3, r2, r3
 800439a:	0a9b      	lsrs	r3, r3, #10
 800439c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ae:	2208      	movs	r2, #8
 80043b0:	409a      	lsls	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4013      	ands	r3, r2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d01a      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d013      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0204 	bic.w	r2, r2, #4
 80043d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043dc:	2208      	movs	r2, #8
 80043de:	409a      	lsls	r2, r3
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e8:	f043 0201 	orr.w	r2, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f4:	2201      	movs	r2, #1
 80043f6:	409a      	lsls	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4013      	ands	r3, r2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d012      	beq.n	8004426 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00b      	beq.n	8004426 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004412:	2201      	movs	r2, #1
 8004414:	409a      	lsls	r2, r3
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441e:	f043 0202 	orr.w	r2, r3, #2
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442a:	2204      	movs	r2, #4
 800442c:	409a      	lsls	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4013      	ands	r3, r2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d012      	beq.n	800445c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00b      	beq.n	800445c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004448:	2204      	movs	r2, #4
 800444a:	409a      	lsls	r2, r3
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004454:	f043 0204 	orr.w	r2, r3, #4
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004460:	2210      	movs	r2, #16
 8004462:	409a      	lsls	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4013      	ands	r3, r2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d043      	beq.n	80044f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0308 	and.w	r3, r3, #8
 8004476:	2b00      	cmp	r3, #0
 8004478:	d03c      	beq.n	80044f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800447e:	2210      	movs	r2, #16
 8004480:	409a      	lsls	r2, r3
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d018      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d108      	bne.n	80044b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d024      	beq.n	80044f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	4798      	blx	r3
 80044b2:	e01f      	b.n	80044f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d01b      	beq.n	80044f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	4798      	blx	r3
 80044c4:	e016      	b.n	80044f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d107      	bne.n	80044e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0208 	bic.w	r2, r2, #8
 80044e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f8:	2220      	movs	r2, #32
 80044fa:	409a      	lsls	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4013      	ands	r3, r2
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 808e 	beq.w	8004622 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0310 	and.w	r3, r3, #16
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 8086 	beq.w	8004622 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451a:	2220      	movs	r2, #32
 800451c:	409a      	lsls	r2, r3
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b05      	cmp	r3, #5
 800452c:	d136      	bne.n	800459c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0216 	bic.w	r2, r2, #22
 800453c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	695a      	ldr	r2, [r3, #20]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800454c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	2b00      	cmp	r3, #0
 8004554:	d103      	bne.n	800455e <HAL_DMA_IRQHandler+0x1da>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800455a:	2b00      	cmp	r3, #0
 800455c:	d007      	beq.n	800456e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0208 	bic.w	r2, r2, #8
 800456c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004572:	223f      	movs	r2, #63	; 0x3f
 8004574:	409a      	lsls	r2, r3
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800458e:	2b00      	cmp	r3, #0
 8004590:	d07d      	beq.n	800468e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	4798      	blx	r3
        }
        return;
 800459a:	e078      	b.n	800468e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d01c      	beq.n	80045e4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d108      	bne.n	80045ca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d030      	beq.n	8004622 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	4798      	blx	r3
 80045c8:	e02b      	b.n	8004622 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d027      	beq.n	8004622 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	4798      	blx	r3
 80045da:	e022      	b.n	8004622 <HAL_DMA_IRQHandler+0x29e>
 80045dc:	20000000 	.word	0x20000000
 80045e0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10f      	bne.n	8004612 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0210 	bic.w	r2, r2, #16
 8004600:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004626:	2b00      	cmp	r3, #0
 8004628:	d032      	beq.n	8004690 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d022      	beq.n	800467c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2205      	movs	r2, #5
 800463a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0201 	bic.w	r2, r2, #1
 800464c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	3301      	adds	r3, #1
 8004652:	60bb      	str	r3, [r7, #8]
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	429a      	cmp	r2, r3
 8004658:	d307      	bcc.n	800466a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f2      	bne.n	800464e <HAL_DMA_IRQHandler+0x2ca>
 8004668:	e000      	b.n	800466c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800466a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004680:	2b00      	cmp	r3, #0
 8004682:	d005      	beq.n	8004690 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	4798      	blx	r3
 800468c:	e000      	b.n	8004690 <HAL_DMA_IRQHandler+0x30c>
        return;
 800468e:	bf00      	nop
    }
  }
}
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop

08004698 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	3b10      	subs	r3, #16
 80046a8:	4a14      	ldr	r2, [pc, #80]	; (80046fc <DMA_CalcBaseAndBitshift+0x64>)
 80046aa:	fba2 2303 	umull	r2, r3, r2, r3
 80046ae:	091b      	lsrs	r3, r3, #4
 80046b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80046b2:	4a13      	ldr	r2, [pc, #76]	; (8004700 <DMA_CalcBaseAndBitshift+0x68>)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4413      	add	r3, r2
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d909      	bls.n	80046da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046ce:	f023 0303 	bic.w	r3, r3, #3
 80046d2:	1d1a      	adds	r2, r3, #4
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	659a      	str	r2, [r3, #88]	; 0x58
 80046d8:	e007      	b.n	80046ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046e2:	f023 0303 	bic.w	r3, r3, #3
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	aaaaaaab 	.word	0xaaaaaaab
 8004700:	0800d440 	.word	0x0800d440

08004704 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800470c:	2300      	movs	r3, #0
 800470e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004714:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d11f      	bne.n	800475e <DMA_CheckFifoParam+0x5a>
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2b03      	cmp	r3, #3
 8004722:	d856      	bhi.n	80047d2 <DMA_CheckFifoParam+0xce>
 8004724:	a201      	add	r2, pc, #4	; (adr r2, 800472c <DMA_CheckFifoParam+0x28>)
 8004726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472a:	bf00      	nop
 800472c:	0800473d 	.word	0x0800473d
 8004730:	0800474f 	.word	0x0800474f
 8004734:	0800473d 	.word	0x0800473d
 8004738:	080047d3 	.word	0x080047d3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004740:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d046      	beq.n	80047d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800474c:	e043      	b.n	80047d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004752:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004756:	d140      	bne.n	80047da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800475c:	e03d      	b.n	80047da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004766:	d121      	bne.n	80047ac <DMA_CheckFifoParam+0xa8>
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b03      	cmp	r3, #3
 800476c:	d837      	bhi.n	80047de <DMA_CheckFifoParam+0xda>
 800476e:	a201      	add	r2, pc, #4	; (adr r2, 8004774 <DMA_CheckFifoParam+0x70>)
 8004770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004774:	08004785 	.word	0x08004785
 8004778:	0800478b 	.word	0x0800478b
 800477c:	08004785 	.word	0x08004785
 8004780:	0800479d 	.word	0x0800479d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
      break;
 8004788:	e030      	b.n	80047ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d025      	beq.n	80047e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800479a:	e022      	b.n	80047e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047a4:	d11f      	bne.n	80047e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80047aa:	e01c      	b.n	80047e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d903      	bls.n	80047ba <DMA_CheckFifoParam+0xb6>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b03      	cmp	r3, #3
 80047b6:	d003      	beq.n	80047c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80047b8:	e018      	b.n	80047ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	73fb      	strb	r3, [r7, #15]
      break;
 80047be:	e015      	b.n	80047ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00e      	beq.n	80047ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	73fb      	strb	r3, [r7, #15]
      break;
 80047d0:	e00b      	b.n	80047ea <DMA_CheckFifoParam+0xe6>
      break;
 80047d2:	bf00      	nop
 80047d4:	e00a      	b.n	80047ec <DMA_CheckFifoParam+0xe8>
      break;
 80047d6:	bf00      	nop
 80047d8:	e008      	b.n	80047ec <DMA_CheckFifoParam+0xe8>
      break;
 80047da:	bf00      	nop
 80047dc:	e006      	b.n	80047ec <DMA_CheckFifoParam+0xe8>
      break;
 80047de:	bf00      	nop
 80047e0:	e004      	b.n	80047ec <DMA_CheckFifoParam+0xe8>
      break;
 80047e2:	bf00      	nop
 80047e4:	e002      	b.n	80047ec <DMA_CheckFifoParam+0xe8>
      break;   
 80047e6:	bf00      	nop
 80047e8:	e000      	b.n	80047ec <DMA_CheckFifoParam+0xe8>
      break;
 80047ea:	bf00      	nop
    }
  } 
  
  return status; 
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop

080047fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b089      	sub	sp, #36	; 0x24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004806:	2300      	movs	r3, #0
 8004808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800480a:	2300      	movs	r3, #0
 800480c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800480e:	2300      	movs	r3, #0
 8004810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004812:	2300      	movs	r3, #0
 8004814:	61fb      	str	r3, [r7, #28]
 8004816:	e16b      	b.n	8004af0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004818:	2201      	movs	r2, #1
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	fa02 f303 	lsl.w	r3, r2, r3
 8004820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	4013      	ands	r3, r2
 800482a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	429a      	cmp	r2, r3
 8004832:	f040 815a 	bne.w	8004aea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	2b01      	cmp	r3, #1
 8004840:	d005      	beq.n	800484e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800484a:	2b02      	cmp	r3, #2
 800484c:	d130      	bne.n	80048b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	2203      	movs	r2, #3
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	43db      	mvns	r3, r3
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	4013      	ands	r3, r2
 8004864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	fa02 f303 	lsl.w	r3, r2, r3
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	4313      	orrs	r3, r2
 8004876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004884:	2201      	movs	r2, #1
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	43db      	mvns	r3, r3
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	4013      	ands	r3, r2
 8004892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	091b      	lsrs	r3, r3, #4
 800489a:	f003 0201 	and.w	r2, r3, #1
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f003 0303 	and.w	r3, r3, #3
 80048b8:	2b03      	cmp	r3, #3
 80048ba:	d017      	beq.n	80048ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	2203      	movs	r2, #3
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	43db      	mvns	r3, r3
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	4013      	ands	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f003 0303 	and.w	r3, r3, #3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d123      	bne.n	8004940 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	08da      	lsrs	r2, r3, #3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3208      	adds	r2, #8
 8004900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004904:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	220f      	movs	r2, #15
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	43db      	mvns	r3, r3
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	4013      	ands	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	691a      	ldr	r2, [r3, #16]
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4313      	orrs	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	08da      	lsrs	r2, r3, #3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	3208      	adds	r2, #8
 800493a:	69b9      	ldr	r1, [r7, #24]
 800493c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	2203      	movs	r2, #3
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	43db      	mvns	r3, r3
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	4013      	ands	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f003 0203 	and.w	r2, r3, #3
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4313      	orrs	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 80b4 	beq.w	8004aea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004982:	2300      	movs	r3, #0
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	4b60      	ldr	r3, [pc, #384]	; (8004b08 <HAL_GPIO_Init+0x30c>)
 8004988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498a:	4a5f      	ldr	r2, [pc, #380]	; (8004b08 <HAL_GPIO_Init+0x30c>)
 800498c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004990:	6453      	str	r3, [r2, #68]	; 0x44
 8004992:	4b5d      	ldr	r3, [pc, #372]	; (8004b08 <HAL_GPIO_Init+0x30c>)
 8004994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800499e:	4a5b      	ldr	r2, [pc, #364]	; (8004b0c <HAL_GPIO_Init+0x310>)
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	089b      	lsrs	r3, r3, #2
 80049a4:	3302      	adds	r3, #2
 80049a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	220f      	movs	r2, #15
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	43db      	mvns	r3, r3
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	4013      	ands	r3, r2
 80049c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a52      	ldr	r2, [pc, #328]	; (8004b10 <HAL_GPIO_Init+0x314>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d02b      	beq.n	8004a22 <HAL_GPIO_Init+0x226>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a51      	ldr	r2, [pc, #324]	; (8004b14 <HAL_GPIO_Init+0x318>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d025      	beq.n	8004a1e <HAL_GPIO_Init+0x222>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a50      	ldr	r2, [pc, #320]	; (8004b18 <HAL_GPIO_Init+0x31c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d01f      	beq.n	8004a1a <HAL_GPIO_Init+0x21e>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a4f      	ldr	r2, [pc, #316]	; (8004b1c <HAL_GPIO_Init+0x320>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d019      	beq.n	8004a16 <HAL_GPIO_Init+0x21a>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a4e      	ldr	r2, [pc, #312]	; (8004b20 <HAL_GPIO_Init+0x324>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d013      	beq.n	8004a12 <HAL_GPIO_Init+0x216>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a4d      	ldr	r2, [pc, #308]	; (8004b24 <HAL_GPIO_Init+0x328>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d00d      	beq.n	8004a0e <HAL_GPIO_Init+0x212>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a4c      	ldr	r2, [pc, #304]	; (8004b28 <HAL_GPIO_Init+0x32c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d007      	beq.n	8004a0a <HAL_GPIO_Init+0x20e>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a4b      	ldr	r2, [pc, #300]	; (8004b2c <HAL_GPIO_Init+0x330>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d101      	bne.n	8004a06 <HAL_GPIO_Init+0x20a>
 8004a02:	2307      	movs	r3, #7
 8004a04:	e00e      	b.n	8004a24 <HAL_GPIO_Init+0x228>
 8004a06:	2308      	movs	r3, #8
 8004a08:	e00c      	b.n	8004a24 <HAL_GPIO_Init+0x228>
 8004a0a:	2306      	movs	r3, #6
 8004a0c:	e00a      	b.n	8004a24 <HAL_GPIO_Init+0x228>
 8004a0e:	2305      	movs	r3, #5
 8004a10:	e008      	b.n	8004a24 <HAL_GPIO_Init+0x228>
 8004a12:	2304      	movs	r3, #4
 8004a14:	e006      	b.n	8004a24 <HAL_GPIO_Init+0x228>
 8004a16:	2303      	movs	r3, #3
 8004a18:	e004      	b.n	8004a24 <HAL_GPIO_Init+0x228>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e002      	b.n	8004a24 <HAL_GPIO_Init+0x228>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e000      	b.n	8004a24 <HAL_GPIO_Init+0x228>
 8004a22:	2300      	movs	r3, #0
 8004a24:	69fa      	ldr	r2, [r7, #28]
 8004a26:	f002 0203 	and.w	r2, r2, #3
 8004a2a:	0092      	lsls	r2, r2, #2
 8004a2c:	4093      	lsls	r3, r2
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a34:	4935      	ldr	r1, [pc, #212]	; (8004b0c <HAL_GPIO_Init+0x310>)
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	089b      	lsrs	r3, r3, #2
 8004a3a:	3302      	adds	r3, #2
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a42:	4b3b      	ldr	r3, [pc, #236]	; (8004b30 <HAL_GPIO_Init+0x334>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	43db      	mvns	r3, r3
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a66:	4a32      	ldr	r2, [pc, #200]	; (8004b30 <HAL_GPIO_Init+0x334>)
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004a6c:	4b30      	ldr	r3, [pc, #192]	; (8004b30 <HAL_GPIO_Init+0x334>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	43db      	mvns	r3, r3
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a90:	4a27      	ldr	r2, [pc, #156]	; (8004b30 <HAL_GPIO_Init+0x334>)
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a96:	4b26      	ldr	r3, [pc, #152]	; (8004b30 <HAL_GPIO_Init+0x334>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004aba:	4a1d      	ldr	r2, [pc, #116]	; (8004b30 <HAL_GPIO_Init+0x334>)
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ac0:	4b1b      	ldr	r3, [pc, #108]	; (8004b30 <HAL_GPIO_Init+0x334>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	4013      	ands	r3, r2
 8004ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ae4:	4a12      	ldr	r2, [pc, #72]	; (8004b30 <HAL_GPIO_Init+0x334>)
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	3301      	adds	r3, #1
 8004aee:	61fb      	str	r3, [r7, #28]
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	2b0f      	cmp	r3, #15
 8004af4:	f67f ae90 	bls.w	8004818 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004af8:	bf00      	nop
 8004afa:	bf00      	nop
 8004afc:	3724      	adds	r7, #36	; 0x24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	40013800 	.word	0x40013800
 8004b10:	40020000 	.word	0x40020000
 8004b14:	40020400 	.word	0x40020400
 8004b18:	40020800 	.word	0x40020800
 8004b1c:	40020c00 	.word	0x40020c00
 8004b20:	40021000 	.word	0x40021000
 8004b24:	40021400 	.word	0x40021400
 8004b28:	40021800 	.word	0x40021800
 8004b2c:	40021c00 	.word	0x40021c00
 8004b30:	40013c00 	.word	0x40013c00

08004b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	807b      	strh	r3, [r7, #2]
 8004b40:	4613      	mov	r3, r2
 8004b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b44:	787b      	ldrb	r3, [r7, #1]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b4a:	887a      	ldrh	r2, [r7, #2]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b50:	e003      	b.n	8004b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b52:	887b      	ldrh	r3, [r7, #2]
 8004b54:	041a      	lsls	r2, r3, #16
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	619a      	str	r2, [r3, #24]
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004b66:	b590      	push	{r4, r7, lr}
 8004b68:	b08d      	sub	sp, #52	; 0x34
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f004 fb0d 	bl	800919c <USB_GetMode>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f040 839d 	bne.w	80052c4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f004 fa71 	bl	8009076 <USB_ReadInterrupts>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f000 8393 	beq.w	80052c2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f004 fa68 	bl	8009076 <USB_ReadInterrupts>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d107      	bne.n	8004bc0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	695a      	ldr	r2, [r3, #20]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f002 0202 	and.w	r2, r2, #2
 8004bbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f004 fa56 	bl	8009076 <USB_ReadInterrupts>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	f003 0310 	and.w	r3, r3, #16
 8004bd0:	2b10      	cmp	r3, #16
 8004bd2:	d161      	bne.n	8004c98 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699a      	ldr	r2, [r3, #24]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 0210 	bic.w	r2, r2, #16
 8004be2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	f003 020f 	and.w	r2, r3, #15
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	1a9b      	subs	r3, r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	4413      	add	r3, r2
 8004c00:	3304      	adds	r3, #4
 8004c02:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	0c5b      	lsrs	r3, r3, #17
 8004c08:	f003 030f 	and.w	r3, r3, #15
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d124      	bne.n	8004c5a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004c16:	4013      	ands	r3, r2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d035      	beq.n	8004c88 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	091b      	lsrs	r3, r3, #4
 8004c24:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004c26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	6a38      	ldr	r0, [r7, #32]
 8004c30:	f004 f8cf 	bl	8008dd2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	091b      	lsrs	r3, r3, #4
 8004c3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c40:	441a      	add	r2, r3
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	699a      	ldr	r2, [r3, #24]
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	091b      	lsrs	r3, r3, #4
 8004c4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c52:	441a      	add	r2, r3
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	619a      	str	r2, [r3, #24]
 8004c58:	e016      	b.n	8004c88 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	0c5b      	lsrs	r3, r3, #17
 8004c5e:	f003 030f 	and.w	r3, r3, #15
 8004c62:	2b06      	cmp	r3, #6
 8004c64:	d110      	bne.n	8004c88 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004c6c:	2208      	movs	r2, #8
 8004c6e:	4619      	mov	r1, r3
 8004c70:	6a38      	ldr	r0, [r7, #32]
 8004c72:	f004 f8ae 	bl	8008dd2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	699a      	ldr	r2, [r3, #24]
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	091b      	lsrs	r3, r3, #4
 8004c7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c82:	441a      	add	r2, r3
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	699a      	ldr	r2, [r3, #24]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0210 	orr.w	r2, r2, #16
 8004c96:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f004 f9ea 	bl	8009076 <USB_ReadInterrupts>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ca8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004cac:	d16e      	bne.n	8004d8c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f004 f9f0 	bl	800909c <USB_ReadDevAllOutEpInterrupt>
 8004cbc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004cbe:	e062      	b.n	8004d86 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d057      	beq.n	8004d7a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd0:	b2d2      	uxtb	r2, r2
 8004cd2:	4611      	mov	r1, r2
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f004 fa15 	bl	8009104 <USB_ReadDevOutEPInterrupt>
 8004cda:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00c      	beq.n	8004d00 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004cf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fd4e 	bl	800579c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00c      	beq.n	8004d24 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d16:	461a      	mov	r2, r3
 8004d18:	2308      	movs	r3, #8
 8004d1a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004d1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fe48 	bl	80059b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f003 0310 	and.w	r3, r3, #16
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d008      	beq.n	8004d40 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	015a      	lsls	r2, r3, #5
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	4413      	add	r3, r2
 8004d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	2310      	movs	r3, #16
 8004d3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d008      	beq.n	8004d5c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d56:	461a      	mov	r2, r3
 8004d58:	2320      	movs	r3, #32
 8004d5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d009      	beq.n	8004d7a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d72:	461a      	mov	r2, r3
 8004d74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d78:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d82:	085b      	lsrs	r3, r3, #1
 8004d84:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d199      	bne.n	8004cc0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f004 f970 	bl	8009076 <USB_ReadInterrupts>
 8004d96:	4603      	mov	r3, r0
 8004d98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004da0:	f040 80c0 	bne.w	8004f24 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f004 f991 	bl	80090d0 <USB_ReadDevAllInEpInterrupt>
 8004dae:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004db4:	e0b2      	b.n	8004f1c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 80a7 	beq.w	8004f10 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	4611      	mov	r1, r2
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f004 f9b7 	bl	8009140 <USB_ReadDevInEPInterrupt>
 8004dd2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d057      	beq.n	8004e8e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	f003 030f 	and.w	r3, r3, #15
 8004de4:	2201      	movs	r2, #1
 8004de6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dea:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	43db      	mvns	r3, r3
 8004df8:	69f9      	ldr	r1, [r7, #28]
 8004dfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dfe:	4013      	ands	r3, r2
 8004e00:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0e:	461a      	mov	r2, r3
 8004e10:	2301      	movs	r3, #1
 8004e12:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d132      	bne.n	8004e82 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e20:	4613      	mov	r3, r2
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	1a9b      	subs	r3, r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	440b      	add	r3, r1
 8004e2a:	3348      	adds	r3, #72	; 0x48
 8004e2c:	6819      	ldr	r1, [r3, #0]
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e32:	4613      	mov	r3, r2
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	1a9b      	subs	r3, r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4403      	add	r3, r0
 8004e3c:	3344      	adds	r3, #68	; 0x44
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4419      	add	r1, r3
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e46:	4613      	mov	r3, r2
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	1a9b      	subs	r3, r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4403      	add	r3, r0
 8004e50:	3348      	adds	r3, #72	; 0x48
 8004e52:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d113      	bne.n	8004e82 <HAL_PCD_IRQHandler+0x31c>
 8004e5a:	6879      	ldr	r1, [r7, #4]
 8004e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5e:	4613      	mov	r3, r2
 8004e60:	00db      	lsls	r3, r3, #3
 8004e62:	1a9b      	subs	r3, r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	440b      	add	r3, r1
 8004e68:	3350      	adds	r3, #80	; 0x50
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d108      	bne.n	8004e82 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6818      	ldr	r0, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	f004 f9bf 	bl	8009200 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	4619      	mov	r1, r3
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f008 f864 	bl	800cf56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	f003 0308 	and.w	r3, r3, #8
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d008      	beq.n	8004eaa <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	2308      	movs	r3, #8
 8004ea8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f003 0310 	and.w	r3, r3, #16
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d008      	beq.n	8004ec6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	2310      	movs	r3, #16
 8004ec4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d008      	beq.n	8004ee2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004edc:	461a      	mov	r2, r3
 8004ede:	2340      	movs	r3, #64	; 0x40
 8004ee0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d008      	beq.n	8004efe <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef8:	461a      	mov	r2, r3
 8004efa:	2302      	movs	r3, #2
 8004efc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004f08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fbb9 	bl	8005682 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	3301      	adds	r3, #1
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f18:	085b      	lsrs	r3, r3, #1
 8004f1a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f47f af49 	bne.w	8004db6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f004 f8a4 	bl	8009076 <USB_ReadInterrupts>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f38:	d122      	bne.n	8004f80 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	69fa      	ldr	r2, [r7, #28]
 8004f44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f48:	f023 0301 	bic.w	r3, r3, #1
 8004f4c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d108      	bne.n	8004f6a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004f60:	2100      	movs	r1, #0
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 fd6c 	bl	8005a40 <HAL_PCDEx_LPM_Callback>
 8004f68:	e002      	b.n	8004f70 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f008 f86a 	bl	800d044 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	695a      	ldr	r2, [r3, #20]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004f7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f004 f876 	bl	8009076 <USB_ReadInterrupts>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f94:	d112      	bne.n	8004fbc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d102      	bne.n	8004fac <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f008 f826 	bl	800cff8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	695a      	ldr	r2, [r3, #20]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004fba:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f004 f858 	bl	8009076 <USB_ReadInterrupts>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd0:	f040 80c7 	bne.w	8005162 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	69fa      	ldr	r2, [r7, #28]
 8004fde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fe2:	f023 0301 	bic.w	r3, r3, #1
 8004fe6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2110      	movs	r1, #16
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f003 fa4a 	bl	8008488 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ff8:	e056      	b.n	80050a8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	4413      	add	r3, r2
 8005002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005006:	461a      	mov	r2, r3
 8005008:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800500c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800500e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	4413      	add	r3, r2
 8005016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800501e:	0151      	lsls	r1, r2, #5
 8005020:	69fa      	ldr	r2, [r7, #28]
 8005022:	440a      	add	r2, r1
 8005024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005028:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800502c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800502e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	4413      	add	r3, r2
 8005036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800503e:	0151      	lsls	r1, r2, #5
 8005040:	69fa      	ldr	r2, [r7, #28]
 8005042:	440a      	add	r2, r1
 8005044:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005048:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800504c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800504e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	4413      	add	r3, r2
 8005056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505a:	461a      	mov	r2, r3
 800505c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005060:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005064:	015a      	lsls	r2, r3, #5
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	4413      	add	r3, r2
 800506a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005072:	0151      	lsls	r1, r2, #5
 8005074:	69fa      	ldr	r2, [r7, #28]
 8005076:	440a      	add	r2, r1
 8005078:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800507c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005080:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005092:	0151      	lsls	r1, r2, #5
 8005094:	69fa      	ldr	r2, [r7, #28]
 8005096:	440a      	add	r2, r1
 8005098:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800509c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050a0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a4:	3301      	adds	r3, #1
 80050a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d3a3      	bcc.n	8004ffa <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	69fa      	ldr	r2, [r7, #28]
 80050bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050c0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80050c4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d016      	beq.n	80050fc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050d8:	69fa      	ldr	r2, [r7, #28]
 80050da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050de:	f043 030b 	orr.w	r3, r3, #11
 80050e2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ee:	69fa      	ldr	r2, [r7, #28]
 80050f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050f4:	f043 030b 	orr.w	r3, r3, #11
 80050f8:	6453      	str	r3, [r2, #68]	; 0x44
 80050fa:	e015      	b.n	8005128 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	69fa      	ldr	r2, [r7, #28]
 8005106:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800510a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800510e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005112:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	69fa      	ldr	r2, [r7, #28]
 800511e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005122:	f043 030b 	orr.w	r3, r3, #11
 8005126:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	69fa      	ldr	r2, [r7, #28]
 8005132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005136:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800513a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6818      	ldr	r0, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800514c:	461a      	mov	r2, r3
 800514e:	f004 f857 	bl	8009200 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	695a      	ldr	r2, [r3, #20]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005160:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4618      	mov	r0, r3
 8005168:	f003 ff85 	bl	8009076 <USB_ReadInterrupts>
 800516c:	4603      	mov	r3, r0
 800516e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005176:	d124      	bne.n	80051c2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4618      	mov	r0, r3
 800517e:	f004 f81b 	bl	80091b8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4618      	mov	r0, r3
 8005188:	f003 f9a2 	bl	80084d0 <USB_GetDevSpeed>
 800518c:	4603      	mov	r3, r0
 800518e:	461a      	mov	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681c      	ldr	r4, [r3, #0]
 8005198:	f001 f872 	bl	8006280 <HAL_RCC_GetHCLKFreq>
 800519c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	461a      	mov	r2, r3
 80051a6:	4620      	mov	r0, r4
 80051a8:	f003 f8cc 	bl	8008344 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f007 fefa 	bl	800cfa6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	695a      	ldr	r2, [r3, #20]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80051c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f003 ff55 	bl	8009076 <USB_ReadInterrupts>
 80051cc:	4603      	mov	r3, r0
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b08      	cmp	r3, #8
 80051d4:	d10a      	bne.n	80051ec <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f007 fed7 	bl	800cf8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	695a      	ldr	r2, [r3, #20]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f002 0208 	and.w	r2, r2, #8
 80051ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f003 ff40 	bl	8009076 <USB_ReadInterrupts>
 80051f6:	4603      	mov	r3, r0
 80051f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005200:	d10f      	bne.n	8005222 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	b2db      	uxtb	r3, r3
 800520a:	4619      	mov	r1, r3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f007 ff39 	bl	800d084 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	695a      	ldr	r2, [r3, #20]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005220:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f003 ff25 	bl	8009076 <USB_ReadInterrupts>
 800522c:	4603      	mov	r3, r0
 800522e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005232:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005236:	d10f      	bne.n	8005258 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	b2db      	uxtb	r3, r3
 8005240:	4619      	mov	r1, r3
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f007 ff0c 	bl	800d060 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	695a      	ldr	r2, [r3, #20]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005256:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4618      	mov	r0, r3
 800525e:	f003 ff0a 	bl	8009076 <USB_ReadInterrupts>
 8005262:	4603      	mov	r3, r0
 8005264:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800526c:	d10a      	bne.n	8005284 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f007 ff1a 	bl	800d0a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	695a      	ldr	r2, [r3, #20]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005282:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4618      	mov	r0, r3
 800528a:	f003 fef4 	bl	8009076 <USB_ReadInterrupts>
 800528e:	4603      	mov	r3, r0
 8005290:	f003 0304 	and.w	r3, r3, #4
 8005294:	2b04      	cmp	r3, #4
 8005296:	d115      	bne.n	80052c4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	f003 0304 	and.w	r3, r3, #4
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f007 ff0a 	bl	800d0c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6859      	ldr	r1, [r3, #4]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	430a      	orrs	r2, r1
 80052be:	605a      	str	r2, [r3, #4]
 80052c0:	e000      	b.n	80052c4 <HAL_PCD_IRQHandler+0x75e>
      return;
 80052c2:	bf00      	nop
    }
  }
}
 80052c4:	3734      	adds	r7, #52	; 0x34
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd90      	pop	{r4, r7, pc}

080052ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b082      	sub	sp, #8
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	460b      	mov	r3, r1
 80052d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d101      	bne.n	80052e4 <HAL_PCD_SetAddress+0x1a>
 80052e0:	2302      	movs	r3, #2
 80052e2:	e013      	b.n	800530c <HAL_PCD_SetAddress+0x42>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	78fa      	ldrb	r2, [r7, #3]
 80052f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	78fa      	ldrb	r2, [r7, #3]
 80052fa:	4611      	mov	r1, r2
 80052fc:	4618      	mov	r0, r3
 80052fe:	f003 fe94 	bl	800902a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	4608      	mov	r0, r1
 800531e:	4611      	mov	r1, r2
 8005320:	461a      	mov	r2, r3
 8005322:	4603      	mov	r3, r0
 8005324:	70fb      	strb	r3, [r7, #3]
 8005326:	460b      	mov	r3, r1
 8005328:	803b      	strh	r3, [r7, #0]
 800532a:	4613      	mov	r3, r2
 800532c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005332:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005336:	2b00      	cmp	r3, #0
 8005338:	da0f      	bge.n	800535a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800533a:	78fb      	ldrb	r3, [r7, #3]
 800533c:	f003 020f 	and.w	r2, r3, #15
 8005340:	4613      	mov	r3, r2
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	1a9b      	subs	r3, r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	3338      	adds	r3, #56	; 0x38
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	4413      	add	r3, r2
 800534e:	3304      	adds	r3, #4
 8005350:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2201      	movs	r2, #1
 8005356:	705a      	strb	r2, [r3, #1]
 8005358:	e00f      	b.n	800537a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800535a:	78fb      	ldrb	r3, [r7, #3]
 800535c:	f003 020f 	and.w	r2, r3, #15
 8005360:	4613      	mov	r3, r2
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	1a9b      	subs	r3, r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	4413      	add	r3, r2
 8005370:	3304      	adds	r3, #4
 8005372:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800537a:	78fb      	ldrb	r3, [r7, #3]
 800537c:	f003 030f 	and.w	r3, r3, #15
 8005380:	b2da      	uxtb	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005386:	883a      	ldrh	r2, [r7, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	78ba      	ldrb	r2, [r7, #2]
 8005390:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	785b      	ldrb	r3, [r3, #1]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d004      	beq.n	80053a4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80053a4:	78bb      	ldrb	r3, [r7, #2]
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d102      	bne.n	80053b0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d101      	bne.n	80053be <HAL_PCD_EP_Open+0xaa>
 80053ba:	2302      	movs	r3, #2
 80053bc:	e00e      	b.n	80053dc <HAL_PCD_EP_Open+0xc8>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68f9      	ldr	r1, [r7, #12]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f003 f8a4 	bl	800851a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80053da:	7afb      	ldrb	r3, [r7, #11]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	607a      	str	r2, [r7, #4]
 80053ee:	603b      	str	r3, [r7, #0]
 80053f0:	460b      	mov	r3, r1
 80053f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053f4:	7afb      	ldrb	r3, [r7, #11]
 80053f6:	f003 020f 	and.w	r2, r3, #15
 80053fa:	4613      	mov	r3, r2
 80053fc:	00db      	lsls	r3, r3, #3
 80053fe:	1a9b      	subs	r3, r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	4413      	add	r3, r2
 800540a:	3304      	adds	r3, #4
 800540c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2200      	movs	r2, #0
 800541e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	2200      	movs	r2, #0
 8005424:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005426:	7afb      	ldrb	r3, [r7, #11]
 8005428:	f003 030f 	and.w	r3, r3, #15
 800542c:	b2da      	uxtb	r2, r3
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d102      	bne.n	8005440 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005440:	7afb      	ldrb	r3, [r7, #11]
 8005442:	f003 030f 	and.w	r3, r3, #15
 8005446:	2b00      	cmp	r3, #0
 8005448:	d109      	bne.n	800545e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6818      	ldr	r0, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	b2db      	uxtb	r3, r3
 8005454:	461a      	mov	r2, r3
 8005456:	6979      	ldr	r1, [r7, #20]
 8005458:	f003 fb2a 	bl	8008ab0 <USB_EP0StartXfer>
 800545c:	e008      	b.n	8005470 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6818      	ldr	r0, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	b2db      	uxtb	r3, r3
 8005468:	461a      	mov	r2, r3
 800546a:	6979      	ldr	r1, [r7, #20]
 800546c:	f003 f8dc 	bl	8008628 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3718      	adds	r7, #24
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b086      	sub	sp, #24
 800547e:	af00      	add	r7, sp, #0
 8005480:	60f8      	str	r0, [r7, #12]
 8005482:	607a      	str	r2, [r7, #4]
 8005484:	603b      	str	r3, [r7, #0]
 8005486:	460b      	mov	r3, r1
 8005488:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800548a:	7afb      	ldrb	r3, [r7, #11]
 800548c:	f003 020f 	and.w	r2, r3, #15
 8005490:	4613      	mov	r3, r2
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	1a9b      	subs	r3, r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	3338      	adds	r3, #56	; 0x38
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	4413      	add	r3, r2
 800549e:	3304      	adds	r3, #4
 80054a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2200      	movs	r2, #0
 80054b2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2201      	movs	r2, #1
 80054b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054ba:	7afb      	ldrb	r3, [r7, #11]
 80054bc:	f003 030f 	and.w	r3, r3, #15
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d102      	bne.n	80054d4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054d4:	7afb      	ldrb	r3, [r7, #11]
 80054d6:	f003 030f 	and.w	r3, r3, #15
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d109      	bne.n	80054f2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6818      	ldr	r0, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	461a      	mov	r2, r3
 80054ea:	6979      	ldr	r1, [r7, #20]
 80054ec:	f003 fae0 	bl	8008ab0 <USB_EP0StartXfer>
 80054f0:	e008      	b.n	8005504 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6818      	ldr	r0, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	461a      	mov	r2, r3
 80054fe:	6979      	ldr	r1, [r7, #20]
 8005500:	f003 f892 	bl	8008628 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b084      	sub	sp, #16
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	460b      	mov	r3, r1
 8005518:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	f003 020f 	and.w	r2, r3, #15
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	429a      	cmp	r2, r3
 8005526:	d901      	bls.n	800552c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e050      	b.n	80055ce <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800552c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005530:	2b00      	cmp	r3, #0
 8005532:	da0f      	bge.n	8005554 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005534:	78fb      	ldrb	r3, [r7, #3]
 8005536:	f003 020f 	and.w	r2, r3, #15
 800553a:	4613      	mov	r3, r2
 800553c:	00db      	lsls	r3, r3, #3
 800553e:	1a9b      	subs	r3, r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	3338      	adds	r3, #56	; 0x38
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	4413      	add	r3, r2
 8005548:	3304      	adds	r3, #4
 800554a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2201      	movs	r2, #1
 8005550:	705a      	strb	r2, [r3, #1]
 8005552:	e00d      	b.n	8005570 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005554:	78fa      	ldrb	r2, [r7, #3]
 8005556:	4613      	mov	r3, r2
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	1a9b      	subs	r3, r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	4413      	add	r3, r2
 8005566:	3304      	adds	r3, #4
 8005568:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2201      	movs	r2, #1
 8005574:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005576:	78fb      	ldrb	r3, [r7, #3]
 8005578:	f003 030f 	and.w	r3, r3, #15
 800557c:	b2da      	uxtb	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005588:	2b01      	cmp	r3, #1
 800558a:	d101      	bne.n	8005590 <HAL_PCD_EP_SetStall+0x82>
 800558c:	2302      	movs	r3, #2
 800558e:	e01e      	b.n	80055ce <HAL_PCD_EP_SetStall+0xc0>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68f9      	ldr	r1, [r7, #12]
 800559e:	4618      	mov	r0, r3
 80055a0:	f003 fc6f 	bl	8008e82 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80055a4:	78fb      	ldrb	r3, [r7, #3]
 80055a6:	f003 030f 	and.w	r3, r3, #15
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10a      	bne.n	80055c4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6818      	ldr	r0, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	b2d9      	uxtb	r1, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80055be:	461a      	mov	r2, r3
 80055c0:	f003 fe1e 	bl	8009200 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b084      	sub	sp, #16
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	460b      	mov	r3, r1
 80055e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80055e2:	78fb      	ldrb	r3, [r7, #3]
 80055e4:	f003 020f 	and.w	r2, r3, #15
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d901      	bls.n	80055f4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e042      	b.n	800567a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80055f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	da0f      	bge.n	800561c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055fc:	78fb      	ldrb	r3, [r7, #3]
 80055fe:	f003 020f 	and.w	r2, r3, #15
 8005602:	4613      	mov	r3, r2
 8005604:	00db      	lsls	r3, r3, #3
 8005606:	1a9b      	subs	r3, r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	3338      	adds	r3, #56	; 0x38
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	4413      	add	r3, r2
 8005610:	3304      	adds	r3, #4
 8005612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2201      	movs	r2, #1
 8005618:	705a      	strb	r2, [r3, #1]
 800561a:	e00f      	b.n	800563c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	f003 020f 	and.w	r2, r3, #15
 8005622:	4613      	mov	r3, r2
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	1a9b      	subs	r3, r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	4413      	add	r3, r2
 8005632:	3304      	adds	r3, #4
 8005634:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005642:	78fb      	ldrb	r3, [r7, #3]
 8005644:	f003 030f 	and.w	r3, r3, #15
 8005648:	b2da      	uxtb	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <HAL_PCD_EP_ClrStall+0x86>
 8005658:	2302      	movs	r3, #2
 800565a:	e00e      	b.n	800567a <HAL_PCD_EP_ClrStall+0xa4>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68f9      	ldr	r1, [r7, #12]
 800566a:	4618      	mov	r0, r3
 800566c:	f003 fc77 	bl	8008f5e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b08a      	sub	sp, #40	; 0x28
 8005686:	af02      	add	r7, sp, #8
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	4613      	mov	r3, r2
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	1a9b      	subs	r3, r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	3338      	adds	r3, #56	; 0x38
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	4413      	add	r3, r2
 80056a6:	3304      	adds	r3, #4
 80056a8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	699a      	ldr	r2, [r3, #24]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d901      	bls.n	80056ba <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e06c      	b.n	8005794 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	695a      	ldr	r2, [r3, #20]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	69fa      	ldr	r2, [r7, #28]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d902      	bls.n	80056d6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	3303      	adds	r3, #3
 80056da:	089b      	lsrs	r3, r3, #2
 80056dc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056de:	e02b      	b.n	8005738 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	695a      	ldr	r2, [r3, #20]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	69fa      	ldr	r2, [r7, #28]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d902      	bls.n	80056fc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	3303      	adds	r3, #3
 8005700:	089b      	lsrs	r3, r3, #2
 8005702:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	68d9      	ldr	r1, [r3, #12]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	b2da      	uxtb	r2, r3
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005714:	b2db      	uxtb	r3, r3
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	4603      	mov	r3, r0
 800571a:	6978      	ldr	r0, [r7, #20]
 800571c:	f003 fb1b 	bl	8008d56 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	441a      	add	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	699a      	ldr	r2, [r3, #24]
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	441a      	add	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	b29b      	uxth	r3, r3
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	429a      	cmp	r2, r3
 800574c:	d809      	bhi.n	8005762 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	699a      	ldr	r2, [r3, #24]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005756:	429a      	cmp	r2, r3
 8005758:	d203      	bcs.n	8005762 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1be      	bne.n	80056e0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	695a      	ldr	r2, [r3, #20]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	429a      	cmp	r2, r3
 800576c:	d811      	bhi.n	8005792 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	f003 030f 	and.w	r3, r3, #15
 8005774:	2201      	movs	r2, #1
 8005776:	fa02 f303 	lsl.w	r3, r2, r3
 800577a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	43db      	mvns	r3, r3
 8005788:	6939      	ldr	r1, [r7, #16]
 800578a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800578e:	4013      	ands	r3, r2
 8005790:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3720      	adds	r7, #32
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	333c      	adds	r3, #60	; 0x3c
 80057b4:	3304      	adds	r3, #4
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	f040 80a0 	bne.w	8005914 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f003 0308 	and.w	r3, r3, #8
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d015      	beq.n	800580a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	4a72      	ldr	r2, [pc, #456]	; (80059ac <PCD_EP_OutXfrComplete_int+0x210>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	f240 80dd 	bls.w	80059a2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f000 80d7 	beq.w	80059a2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005800:	461a      	mov	r2, r3
 8005802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005806:	6093      	str	r3, [r2, #8]
 8005808:	e0cb      	b.n	80059a2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	f003 0320 	and.w	r3, r3, #32
 8005810:	2b00      	cmp	r3, #0
 8005812:	d009      	beq.n	8005828 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005820:	461a      	mov	r2, r3
 8005822:	2320      	movs	r3, #32
 8005824:	6093      	str	r3, [r2, #8]
 8005826:	e0bc      	b.n	80059a2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800582e:	2b00      	cmp	r3, #0
 8005830:	f040 80b7 	bne.w	80059a2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	4a5d      	ldr	r2, [pc, #372]	; (80059ac <PCD_EP_OutXfrComplete_int+0x210>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d90f      	bls.n	800585c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	4413      	add	r3, r2
 800584e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005852:	461a      	mov	r2, r3
 8005854:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005858:	6093      	str	r3, [r2, #8]
 800585a:	e0a2      	b.n	80059a2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800585c:	6879      	ldr	r1, [r7, #4]
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	4613      	mov	r3, r2
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	1a9b      	subs	r3, r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	440b      	add	r3, r1
 800586a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800586e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	0159      	lsls	r1, r3, #5
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	440b      	add	r3, r1
 8005878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005882:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	4613      	mov	r3, r2
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	1a9b      	subs	r3, r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4403      	add	r3, r0
 8005892:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005896:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005898:	6879      	ldr	r1, [r7, #4]
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	4613      	mov	r3, r2
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	1a9b      	subs	r3, r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	440b      	add	r3, r1
 80058a6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80058aa:	6819      	ldr	r1, [r3, #0]
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	4613      	mov	r3, r2
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	1a9b      	subs	r3, r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4403      	add	r3, r0
 80058ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4419      	add	r1, r3
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	4613      	mov	r3, r2
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	1a9b      	subs	r3, r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4403      	add	r3, r0
 80058d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80058d4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d114      	bne.n	8005906 <PCD_EP_OutXfrComplete_int+0x16a>
 80058dc:	6879      	ldr	r1, [r7, #4]
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	4613      	mov	r3, r2
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	1a9b      	subs	r3, r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	440b      	add	r3, r1
 80058ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d108      	bne.n	8005906 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6818      	ldr	r0, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80058fe:	461a      	mov	r2, r3
 8005900:	2101      	movs	r1, #1
 8005902:	f003 fc7d 	bl	8009200 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	b2db      	uxtb	r3, r3
 800590a:	4619      	mov	r1, r3
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f007 fb07 	bl	800cf20 <HAL_PCD_DataOutStageCallback>
 8005912:	e046      	b.n	80059a2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4a26      	ldr	r2, [pc, #152]	; (80059b0 <PCD_EP_OutXfrComplete_int+0x214>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d124      	bne.n	8005966 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	4413      	add	r3, r2
 800592e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005932:	461a      	mov	r2, r3
 8005934:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005938:	6093      	str	r3, [r2, #8]
 800593a:	e032      	b.n	80059a2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f003 0320 	and.w	r3, r3, #32
 8005942:	2b00      	cmp	r3, #0
 8005944:	d008      	beq.n	8005958 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	4413      	add	r3, r2
 800594e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005952:	461a      	mov	r2, r3
 8005954:	2320      	movs	r3, #32
 8005956:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	b2db      	uxtb	r3, r3
 800595c:	4619      	mov	r1, r3
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f007 fade 	bl	800cf20 <HAL_PCD_DataOutStageCallback>
 8005964:	e01d      	b.n	80059a2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d114      	bne.n	8005996 <PCD_EP_OutXfrComplete_int+0x1fa>
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	4613      	mov	r3, r2
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	1a9b      	subs	r3, r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	440b      	add	r3, r1
 800597a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d108      	bne.n	8005996 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6818      	ldr	r0, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800598e:	461a      	mov	r2, r3
 8005990:	2100      	movs	r1, #0
 8005992:	f003 fc35 	bl	8009200 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	b2db      	uxtb	r3, r3
 800599a:	4619      	mov	r1, r3
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f007 fabf 	bl	800cf20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3718      	adds	r7, #24
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	4f54300a 	.word	0x4f54300a
 80059b0:	4f54310a 	.word	0x4f54310a

080059b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	333c      	adds	r3, #60	; 0x3c
 80059cc:	3304      	adds	r3, #4
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	4a15      	ldr	r2, [pc, #84]	; (8005a3c <PCD_EP_OutSetupPacket_int+0x88>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d90e      	bls.n	8005a08 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d009      	beq.n	8005a08 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a00:	461a      	mov	r2, r3
 8005a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a06:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f007 fa77 	bl	800cefc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4a0a      	ldr	r2, [pc, #40]	; (8005a3c <PCD_EP_OutSetupPacket_int+0x88>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d90c      	bls.n	8005a30 <PCD_EP_OutSetupPacket_int+0x7c>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d108      	bne.n	8005a30 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6818      	ldr	r0, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a28:	461a      	mov	r2, r3
 8005a2a:	2101      	movs	r1, #1
 8005a2c:	f003 fbe8 	bl	8009200 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	4f54300a 	.word	0x4f54300a

08005a40 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e264      	b.n	8005f34 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d075      	beq.n	8005b62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a76:	4ba3      	ldr	r3, [pc, #652]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f003 030c 	and.w	r3, r3, #12
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d00c      	beq.n	8005a9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a82:	4ba0      	ldr	r3, [pc, #640]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a8a:	2b08      	cmp	r3, #8
 8005a8c:	d112      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a8e:	4b9d      	ldr	r3, [pc, #628]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a9a:	d10b      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a9c:	4b99      	ldr	r3, [pc, #612]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d05b      	beq.n	8005b60 <HAL_RCC_OscConfig+0x108>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d157      	bne.n	8005b60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e23f      	b.n	8005f34 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005abc:	d106      	bne.n	8005acc <HAL_RCC_OscConfig+0x74>
 8005abe:	4b91      	ldr	r3, [pc, #580]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a90      	ldr	r2, [pc, #576]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac8:	6013      	str	r3, [r2, #0]
 8005aca:	e01d      	b.n	8005b08 <HAL_RCC_OscConfig+0xb0>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ad4:	d10c      	bne.n	8005af0 <HAL_RCC_OscConfig+0x98>
 8005ad6:	4b8b      	ldr	r3, [pc, #556]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a8a      	ldr	r2, [pc, #552]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ae0:	6013      	str	r3, [r2, #0]
 8005ae2:	4b88      	ldr	r3, [pc, #544]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a87      	ldr	r2, [pc, #540]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aec:	6013      	str	r3, [r2, #0]
 8005aee:	e00b      	b.n	8005b08 <HAL_RCC_OscConfig+0xb0>
 8005af0:	4b84      	ldr	r3, [pc, #528]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a83      	ldr	r2, [pc, #524]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005afa:	6013      	str	r3, [r2, #0]
 8005afc:	4b81      	ldr	r3, [pc, #516]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a80      	ldr	r2, [pc, #512]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d013      	beq.n	8005b38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b10:	f7fd fba8 	bl	8003264 <HAL_GetTick>
 8005b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b16:	e008      	b.n	8005b2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b18:	f7fd fba4 	bl	8003264 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	2b64      	cmp	r3, #100	; 0x64
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e204      	b.n	8005f34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b2a:	4b76      	ldr	r3, [pc, #472]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0f0      	beq.n	8005b18 <HAL_RCC_OscConfig+0xc0>
 8005b36:	e014      	b.n	8005b62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b38:	f7fd fb94 	bl	8003264 <HAL_GetTick>
 8005b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b3e:	e008      	b.n	8005b52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b40:	f7fd fb90 	bl	8003264 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b64      	cmp	r3, #100	; 0x64
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e1f0      	b.n	8005f34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b52:	4b6c      	ldr	r3, [pc, #432]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1f0      	bne.n	8005b40 <HAL_RCC_OscConfig+0xe8>
 8005b5e:	e000      	b.n	8005b62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d063      	beq.n	8005c36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b6e:	4b65      	ldr	r3, [pc, #404]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f003 030c 	and.w	r3, r3, #12
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00b      	beq.n	8005b92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b7a:	4b62      	ldr	r3, [pc, #392]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b82:	2b08      	cmp	r3, #8
 8005b84:	d11c      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b86:	4b5f      	ldr	r3, [pc, #380]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d116      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b92:	4b5c      	ldr	r3, [pc, #368]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d005      	beq.n	8005baa <HAL_RCC_OscConfig+0x152>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d001      	beq.n	8005baa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e1c4      	b.n	8005f34 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005baa:	4b56      	ldr	r3, [pc, #344]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	4952      	ldr	r1, [pc, #328]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bbe:	e03a      	b.n	8005c36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d020      	beq.n	8005c0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bc8:	4b4f      	ldr	r3, [pc, #316]	; (8005d08 <HAL_RCC_OscConfig+0x2b0>)
 8005bca:	2201      	movs	r2, #1
 8005bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bce:	f7fd fb49 	bl	8003264 <HAL_GetTick>
 8005bd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bd4:	e008      	b.n	8005be8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bd6:	f7fd fb45 	bl	8003264 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d901      	bls.n	8005be8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e1a5      	b.n	8005f34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005be8:	4b46      	ldr	r3, [pc, #280]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0f0      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bf4:	4b43      	ldr	r3, [pc, #268]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	00db      	lsls	r3, r3, #3
 8005c02:	4940      	ldr	r1, [pc, #256]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	600b      	str	r3, [r1, #0]
 8005c08:	e015      	b.n	8005c36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c0a:	4b3f      	ldr	r3, [pc, #252]	; (8005d08 <HAL_RCC_OscConfig+0x2b0>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c10:	f7fd fb28 	bl	8003264 <HAL_GetTick>
 8005c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c16:	e008      	b.n	8005c2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c18:	f7fd fb24 	bl	8003264 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e184      	b.n	8005f34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c2a:	4b36      	ldr	r3, [pc, #216]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1f0      	bne.n	8005c18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0308 	and.w	r3, r3, #8
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d030      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d016      	beq.n	8005c78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c4a:	4b30      	ldr	r3, [pc, #192]	; (8005d0c <HAL_RCC_OscConfig+0x2b4>)
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c50:	f7fd fb08 	bl	8003264 <HAL_GetTick>
 8005c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c56:	e008      	b.n	8005c6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c58:	f7fd fb04 	bl	8003264 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e164      	b.n	8005f34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c6a:	4b26      	ldr	r3, [pc, #152]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0f0      	beq.n	8005c58 <HAL_RCC_OscConfig+0x200>
 8005c76:	e015      	b.n	8005ca4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c78:	4b24      	ldr	r3, [pc, #144]	; (8005d0c <HAL_RCC_OscConfig+0x2b4>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c7e:	f7fd faf1 	bl	8003264 <HAL_GetTick>
 8005c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c84:	e008      	b.n	8005c98 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c86:	f7fd faed 	bl	8003264 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d901      	bls.n	8005c98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e14d      	b.n	8005f34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c98:	4b1a      	ldr	r3, [pc, #104]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1f0      	bne.n	8005c86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 80a0 	beq.w	8005df2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cb6:	4b13      	ldr	r3, [pc, #76]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10f      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60bb      	str	r3, [r7, #8]
 8005cc6:	4b0f      	ldr	r3, [pc, #60]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	4a0e      	ldr	r2, [pc, #56]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8005cd2:	4b0c      	ldr	r3, [pc, #48]	; (8005d04 <HAL_RCC_OscConfig+0x2ac>)
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cda:	60bb      	str	r3, [r7, #8]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ce2:	4b0b      	ldr	r3, [pc, #44]	; (8005d10 <HAL_RCC_OscConfig+0x2b8>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d121      	bne.n	8005d32 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cee:	4b08      	ldr	r3, [pc, #32]	; (8005d10 <HAL_RCC_OscConfig+0x2b8>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a07      	ldr	r2, [pc, #28]	; (8005d10 <HAL_RCC_OscConfig+0x2b8>)
 8005cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cfa:	f7fd fab3 	bl	8003264 <HAL_GetTick>
 8005cfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d00:	e011      	b.n	8005d26 <HAL_RCC_OscConfig+0x2ce>
 8005d02:	bf00      	nop
 8005d04:	40023800 	.word	0x40023800
 8005d08:	42470000 	.word	0x42470000
 8005d0c:	42470e80 	.word	0x42470e80
 8005d10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d14:	f7fd faa6 	bl	8003264 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e106      	b.n	8005f34 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d26:	4b85      	ldr	r3, [pc, #532]	; (8005f3c <HAL_RCC_OscConfig+0x4e4>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d0f0      	beq.n	8005d14 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d106      	bne.n	8005d48 <HAL_RCC_OscConfig+0x2f0>
 8005d3a:	4b81      	ldr	r3, [pc, #516]	; (8005f40 <HAL_RCC_OscConfig+0x4e8>)
 8005d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d3e:	4a80      	ldr	r2, [pc, #512]	; (8005f40 <HAL_RCC_OscConfig+0x4e8>)
 8005d40:	f043 0301 	orr.w	r3, r3, #1
 8005d44:	6713      	str	r3, [r2, #112]	; 0x70
 8005d46:	e01c      	b.n	8005d82 <HAL_RCC_OscConfig+0x32a>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	2b05      	cmp	r3, #5
 8005d4e:	d10c      	bne.n	8005d6a <HAL_RCC_OscConfig+0x312>
 8005d50:	4b7b      	ldr	r3, [pc, #492]	; (8005f40 <HAL_RCC_OscConfig+0x4e8>)
 8005d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d54:	4a7a      	ldr	r2, [pc, #488]	; (8005f40 <HAL_RCC_OscConfig+0x4e8>)
 8005d56:	f043 0304 	orr.w	r3, r3, #4
 8005d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d5c:	4b78      	ldr	r3, [pc, #480]	; (8005f40 <HAL_RCC_OscConfig+0x4e8>)
 8005d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d60:	4a77      	ldr	r2, [pc, #476]	; (8005f40 <HAL_RCC_OscConfig+0x4e8>)
 8005d62:	f043 0301 	orr.w	r3, r3, #1
 8005d66:	6713      	str	r3, [r2, #112]	; 0x70
 8005d68:	e00b      	b.n	8005d82 <HAL_RCC_OscConfig+0x32a>
 8005d6a:	4b75      	ldr	r3, [pc, #468]	; (8005f40 <HAL_RCC_OscConfig+0x4e8>)
 8005d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6e:	4a74      	ldr	r2, [pc, #464]	; (8005f40 <HAL_RCC_OscConfig+0x4e8>)
 8005d70:	f023 0301 	bic.w	r3, r3, #1
 8005d74:	6713      	str	r3, [r2, #112]	; 0x70
 8005d76:	4b72      	ldr	r3, [pc, #456]	; (8005f40 <HAL_RCC_OscConfig+0x4e8>)
 8005d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d7a:	4a71      	ldr	r2, [pc, #452]	; (8005f40 <HAL_RCC_OscConfig+0x4e8>)
 8005d7c:	f023 0304 	bic.w	r3, r3, #4
 8005d80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d015      	beq.n	8005db6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d8a:	f7fd fa6b 	bl	8003264 <HAL_GetTick>
 8005d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d90:	e00a      	b.n	8005da8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d92:	f7fd fa67 	bl	8003264 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d901      	bls.n	8005da8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e0c5      	b.n	8005f34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005da8:	4b65      	ldr	r3, [pc, #404]	; (8005f40 <HAL_RCC_OscConfig+0x4e8>)
 8005daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0ee      	beq.n	8005d92 <HAL_RCC_OscConfig+0x33a>
 8005db4:	e014      	b.n	8005de0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005db6:	f7fd fa55 	bl	8003264 <HAL_GetTick>
 8005dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dbc:	e00a      	b.n	8005dd4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dbe:	f7fd fa51 	bl	8003264 <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d901      	bls.n	8005dd4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e0af      	b.n	8005f34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dd4:	4b5a      	ldr	r3, [pc, #360]	; (8005f40 <HAL_RCC_OscConfig+0x4e8>)
 8005dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1ee      	bne.n	8005dbe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005de0:	7dfb      	ldrb	r3, [r7, #23]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d105      	bne.n	8005df2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005de6:	4b56      	ldr	r3, [pc, #344]	; (8005f40 <HAL_RCC_OscConfig+0x4e8>)
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	4a55      	ldr	r2, [pc, #340]	; (8005f40 <HAL_RCC_OscConfig+0x4e8>)
 8005dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005df0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 809b 	beq.w	8005f32 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005dfc:	4b50      	ldr	r3, [pc, #320]	; (8005f40 <HAL_RCC_OscConfig+0x4e8>)
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f003 030c 	and.w	r3, r3, #12
 8005e04:	2b08      	cmp	r3, #8
 8005e06:	d05c      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d141      	bne.n	8005e94 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e10:	4b4c      	ldr	r3, [pc, #304]	; (8005f44 <HAL_RCC_OscConfig+0x4ec>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e16:	f7fd fa25 	bl	8003264 <HAL_GetTick>
 8005e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e1c:	e008      	b.n	8005e30 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e1e:	f7fd fa21 	bl	8003264 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d901      	bls.n	8005e30 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e081      	b.n	8005f34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e30:	4b43      	ldr	r3, [pc, #268]	; (8005f40 <HAL_RCC_OscConfig+0x4e8>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1f0      	bne.n	8005e1e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	69da      	ldr	r2, [r3, #28]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	431a      	orrs	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	019b      	lsls	r3, r3, #6
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e52:	085b      	lsrs	r3, r3, #1
 8005e54:	3b01      	subs	r3, #1
 8005e56:	041b      	lsls	r3, r3, #16
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5e:	061b      	lsls	r3, r3, #24
 8005e60:	4937      	ldr	r1, [pc, #220]	; (8005f40 <HAL_RCC_OscConfig+0x4e8>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e66:	4b37      	ldr	r3, [pc, #220]	; (8005f44 <HAL_RCC_OscConfig+0x4ec>)
 8005e68:	2201      	movs	r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e6c:	f7fd f9fa 	bl	8003264 <HAL_GetTick>
 8005e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e72:	e008      	b.n	8005e86 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e74:	f7fd f9f6 	bl	8003264 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e056      	b.n	8005f34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e86:	4b2e      	ldr	r3, [pc, #184]	; (8005f40 <HAL_RCC_OscConfig+0x4e8>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d0f0      	beq.n	8005e74 <HAL_RCC_OscConfig+0x41c>
 8005e92:	e04e      	b.n	8005f32 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e94:	4b2b      	ldr	r3, [pc, #172]	; (8005f44 <HAL_RCC_OscConfig+0x4ec>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e9a:	f7fd f9e3 	bl	8003264 <HAL_GetTick>
 8005e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ea0:	e008      	b.n	8005eb4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ea2:	f7fd f9df 	bl	8003264 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d901      	bls.n	8005eb4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e03f      	b.n	8005f34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eb4:	4b22      	ldr	r3, [pc, #136]	; (8005f40 <HAL_RCC_OscConfig+0x4e8>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1f0      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x44a>
 8005ec0:	e037      	b.n	8005f32 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d101      	bne.n	8005ece <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e032      	b.n	8005f34 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ece:	4b1c      	ldr	r3, [pc, #112]	; (8005f40 <HAL_RCC_OscConfig+0x4e8>)
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d028      	beq.n	8005f2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d121      	bne.n	8005f2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d11a      	bne.n	8005f2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005efe:	4013      	ands	r3, r2
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f04:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d111      	bne.n	8005f2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f14:	085b      	lsrs	r3, r3, #1
 8005f16:	3b01      	subs	r3, #1
 8005f18:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d107      	bne.n	8005f2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f28:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d001      	beq.n	8005f32 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e000      	b.n	8005f34 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3718      	adds	r7, #24
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	40007000 	.word	0x40007000
 8005f40:	40023800 	.word	0x40023800
 8005f44:	42470060 	.word	0x42470060

08005f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d101      	bne.n	8005f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e0cc      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f5c:	4b68      	ldr	r3, [pc, #416]	; (8006100 <HAL_RCC_ClockConfig+0x1b8>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0307 	and.w	r3, r3, #7
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d90c      	bls.n	8005f84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f6a:	4b65      	ldr	r3, [pc, #404]	; (8006100 <HAL_RCC_ClockConfig+0x1b8>)
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	b2d2      	uxtb	r2, r2
 8005f70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f72:	4b63      	ldr	r3, [pc, #396]	; (8006100 <HAL_RCC_ClockConfig+0x1b8>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0307 	and.w	r3, r3, #7
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d001      	beq.n	8005f84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e0b8      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0302 	and.w	r3, r3, #2
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d020      	beq.n	8005fd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0304 	and.w	r3, r3, #4
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d005      	beq.n	8005fa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f9c:	4b59      	ldr	r3, [pc, #356]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	4a58      	ldr	r2, [pc, #352]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005fa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0308 	and.w	r3, r3, #8
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d005      	beq.n	8005fc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fb4:	4b53      	ldr	r3, [pc, #332]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	4a52      	ldr	r2, [pc, #328]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 8005fba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005fbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fc0:	4b50      	ldr	r3, [pc, #320]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	494d      	ldr	r1, [pc, #308]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d044      	beq.n	8006068 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d107      	bne.n	8005ff6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fe6:	4b47      	ldr	r3, [pc, #284]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d119      	bne.n	8006026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e07f      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d003      	beq.n	8006006 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006002:	2b03      	cmp	r3, #3
 8006004:	d107      	bne.n	8006016 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006006:	4b3f      	ldr	r3, [pc, #252]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d109      	bne.n	8006026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e06f      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006016:	4b3b      	ldr	r3, [pc, #236]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e067      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006026:	4b37      	ldr	r3, [pc, #220]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f023 0203 	bic.w	r2, r3, #3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	4934      	ldr	r1, [pc, #208]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 8006034:	4313      	orrs	r3, r2
 8006036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006038:	f7fd f914 	bl	8003264 <HAL_GetTick>
 800603c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800603e:	e00a      	b.n	8006056 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006040:	f7fd f910 	bl	8003264 <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	f241 3288 	movw	r2, #5000	; 0x1388
 800604e:	4293      	cmp	r3, r2
 8006050:	d901      	bls.n	8006056 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e04f      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006056:	4b2b      	ldr	r3, [pc, #172]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f003 020c 	and.w	r2, r3, #12
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	429a      	cmp	r2, r3
 8006066:	d1eb      	bne.n	8006040 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006068:	4b25      	ldr	r3, [pc, #148]	; (8006100 <HAL_RCC_ClockConfig+0x1b8>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0307 	and.w	r3, r3, #7
 8006070:	683a      	ldr	r2, [r7, #0]
 8006072:	429a      	cmp	r2, r3
 8006074:	d20c      	bcs.n	8006090 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006076:	4b22      	ldr	r3, [pc, #136]	; (8006100 <HAL_RCC_ClockConfig+0x1b8>)
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	b2d2      	uxtb	r2, r2
 800607c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800607e:	4b20      	ldr	r3, [pc, #128]	; (8006100 <HAL_RCC_ClockConfig+0x1b8>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0307 	and.w	r3, r3, #7
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	429a      	cmp	r2, r3
 800608a:	d001      	beq.n	8006090 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e032      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0304 	and.w	r3, r3, #4
 8006098:	2b00      	cmp	r3, #0
 800609a:	d008      	beq.n	80060ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800609c:	4b19      	ldr	r3, [pc, #100]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	4916      	ldr	r1, [pc, #88]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0308 	and.w	r3, r3, #8
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d009      	beq.n	80060ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060ba:	4b12      	ldr	r3, [pc, #72]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	490e      	ldr	r1, [pc, #56]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80060ce:	f000 f821 	bl	8006114 <HAL_RCC_GetSysClockFreq>
 80060d2:	4602      	mov	r2, r0
 80060d4:	4b0b      	ldr	r3, [pc, #44]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	091b      	lsrs	r3, r3, #4
 80060da:	f003 030f 	and.w	r3, r3, #15
 80060de:	490a      	ldr	r1, [pc, #40]	; (8006108 <HAL_RCC_ClockConfig+0x1c0>)
 80060e0:	5ccb      	ldrb	r3, [r1, r3]
 80060e2:	fa22 f303 	lsr.w	r3, r2, r3
 80060e6:	4a09      	ldr	r2, [pc, #36]	; (800610c <HAL_RCC_ClockConfig+0x1c4>)
 80060e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80060ea:	4b09      	ldr	r3, [pc, #36]	; (8006110 <HAL_RCC_ClockConfig+0x1c8>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fc fa98 	bl	8002624 <HAL_InitTick>

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	40023c00 	.word	0x40023c00
 8006104:	40023800 	.word	0x40023800
 8006108:	0800d428 	.word	0x0800d428
 800610c:	20000000 	.word	0x20000000
 8006110:	20000004 	.word	0x20000004

08006114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006114:	b5b0      	push	{r4, r5, r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800611a:	2100      	movs	r1, #0
 800611c:	6079      	str	r1, [r7, #4]
 800611e:	2100      	movs	r1, #0
 8006120:	60f9      	str	r1, [r7, #12]
 8006122:	2100      	movs	r1, #0
 8006124:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006126:	2100      	movs	r1, #0
 8006128:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800612a:	4952      	ldr	r1, [pc, #328]	; (8006274 <HAL_RCC_GetSysClockFreq+0x160>)
 800612c:	6889      	ldr	r1, [r1, #8]
 800612e:	f001 010c 	and.w	r1, r1, #12
 8006132:	2908      	cmp	r1, #8
 8006134:	d00d      	beq.n	8006152 <HAL_RCC_GetSysClockFreq+0x3e>
 8006136:	2908      	cmp	r1, #8
 8006138:	f200 8094 	bhi.w	8006264 <HAL_RCC_GetSysClockFreq+0x150>
 800613c:	2900      	cmp	r1, #0
 800613e:	d002      	beq.n	8006146 <HAL_RCC_GetSysClockFreq+0x32>
 8006140:	2904      	cmp	r1, #4
 8006142:	d003      	beq.n	800614c <HAL_RCC_GetSysClockFreq+0x38>
 8006144:	e08e      	b.n	8006264 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006146:	4b4c      	ldr	r3, [pc, #304]	; (8006278 <HAL_RCC_GetSysClockFreq+0x164>)
 8006148:	60bb      	str	r3, [r7, #8]
       break;
 800614a:	e08e      	b.n	800626a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800614c:	4b4b      	ldr	r3, [pc, #300]	; (800627c <HAL_RCC_GetSysClockFreq+0x168>)
 800614e:	60bb      	str	r3, [r7, #8]
      break;
 8006150:	e08b      	b.n	800626a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006152:	4948      	ldr	r1, [pc, #288]	; (8006274 <HAL_RCC_GetSysClockFreq+0x160>)
 8006154:	6849      	ldr	r1, [r1, #4]
 8006156:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800615a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800615c:	4945      	ldr	r1, [pc, #276]	; (8006274 <HAL_RCC_GetSysClockFreq+0x160>)
 800615e:	6849      	ldr	r1, [r1, #4]
 8006160:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006164:	2900      	cmp	r1, #0
 8006166:	d024      	beq.n	80061b2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006168:	4942      	ldr	r1, [pc, #264]	; (8006274 <HAL_RCC_GetSysClockFreq+0x160>)
 800616a:	6849      	ldr	r1, [r1, #4]
 800616c:	0989      	lsrs	r1, r1, #6
 800616e:	4608      	mov	r0, r1
 8006170:	f04f 0100 	mov.w	r1, #0
 8006174:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006178:	f04f 0500 	mov.w	r5, #0
 800617c:	ea00 0204 	and.w	r2, r0, r4
 8006180:	ea01 0305 	and.w	r3, r1, r5
 8006184:	493d      	ldr	r1, [pc, #244]	; (800627c <HAL_RCC_GetSysClockFreq+0x168>)
 8006186:	fb01 f003 	mul.w	r0, r1, r3
 800618a:	2100      	movs	r1, #0
 800618c:	fb01 f102 	mul.w	r1, r1, r2
 8006190:	1844      	adds	r4, r0, r1
 8006192:	493a      	ldr	r1, [pc, #232]	; (800627c <HAL_RCC_GetSysClockFreq+0x168>)
 8006194:	fba2 0101 	umull	r0, r1, r2, r1
 8006198:	1863      	adds	r3, r4, r1
 800619a:	4619      	mov	r1, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	461a      	mov	r2, r3
 80061a0:	f04f 0300 	mov.w	r3, #0
 80061a4:	f7fa fce2 	bl	8000b6c <__aeabi_uldivmod>
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	4613      	mov	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	e04a      	b.n	8006248 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061b2:	4b30      	ldr	r3, [pc, #192]	; (8006274 <HAL_RCC_GetSysClockFreq+0x160>)
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	099b      	lsrs	r3, r3, #6
 80061b8:	461a      	mov	r2, r3
 80061ba:	f04f 0300 	mov.w	r3, #0
 80061be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80061c2:	f04f 0100 	mov.w	r1, #0
 80061c6:	ea02 0400 	and.w	r4, r2, r0
 80061ca:	ea03 0501 	and.w	r5, r3, r1
 80061ce:	4620      	mov	r0, r4
 80061d0:	4629      	mov	r1, r5
 80061d2:	f04f 0200 	mov.w	r2, #0
 80061d6:	f04f 0300 	mov.w	r3, #0
 80061da:	014b      	lsls	r3, r1, #5
 80061dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80061e0:	0142      	lsls	r2, r0, #5
 80061e2:	4610      	mov	r0, r2
 80061e4:	4619      	mov	r1, r3
 80061e6:	1b00      	subs	r0, r0, r4
 80061e8:	eb61 0105 	sbc.w	r1, r1, r5
 80061ec:	f04f 0200 	mov.w	r2, #0
 80061f0:	f04f 0300 	mov.w	r3, #0
 80061f4:	018b      	lsls	r3, r1, #6
 80061f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80061fa:	0182      	lsls	r2, r0, #6
 80061fc:	1a12      	subs	r2, r2, r0
 80061fe:	eb63 0301 	sbc.w	r3, r3, r1
 8006202:	f04f 0000 	mov.w	r0, #0
 8006206:	f04f 0100 	mov.w	r1, #0
 800620a:	00d9      	lsls	r1, r3, #3
 800620c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006210:	00d0      	lsls	r0, r2, #3
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	1912      	adds	r2, r2, r4
 8006218:	eb45 0303 	adc.w	r3, r5, r3
 800621c:	f04f 0000 	mov.w	r0, #0
 8006220:	f04f 0100 	mov.w	r1, #0
 8006224:	0299      	lsls	r1, r3, #10
 8006226:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800622a:	0290      	lsls	r0, r2, #10
 800622c:	4602      	mov	r2, r0
 800622e:	460b      	mov	r3, r1
 8006230:	4610      	mov	r0, r2
 8006232:	4619      	mov	r1, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	461a      	mov	r2, r3
 8006238:	f04f 0300 	mov.w	r3, #0
 800623c:	f7fa fc96 	bl	8000b6c <__aeabi_uldivmod>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	4613      	mov	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006248:	4b0a      	ldr	r3, [pc, #40]	; (8006274 <HAL_RCC_GetSysClockFreq+0x160>)
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	0c1b      	lsrs	r3, r3, #16
 800624e:	f003 0303 	and.w	r3, r3, #3
 8006252:	3301      	adds	r3, #1
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006260:	60bb      	str	r3, [r7, #8]
      break;
 8006262:	e002      	b.n	800626a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006264:	4b04      	ldr	r3, [pc, #16]	; (8006278 <HAL_RCC_GetSysClockFreq+0x164>)
 8006266:	60bb      	str	r3, [r7, #8]
      break;
 8006268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800626a:	68bb      	ldr	r3, [r7, #8]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bdb0      	pop	{r4, r5, r7, pc}
 8006274:	40023800 	.word	0x40023800
 8006278:	00f42400 	.word	0x00f42400
 800627c:	00b71b00 	.word	0x00b71b00

08006280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006284:	4b03      	ldr	r3, [pc, #12]	; (8006294 <HAL_RCC_GetHCLKFreq+0x14>)
 8006286:	681b      	ldr	r3, [r3, #0]
}
 8006288:	4618      	mov	r0, r3
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	20000000 	.word	0x20000000

08006298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800629c:	f7ff fff0 	bl	8006280 <HAL_RCC_GetHCLKFreq>
 80062a0:	4602      	mov	r2, r0
 80062a2:	4b05      	ldr	r3, [pc, #20]	; (80062b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	0a9b      	lsrs	r3, r3, #10
 80062a8:	f003 0307 	and.w	r3, r3, #7
 80062ac:	4903      	ldr	r1, [pc, #12]	; (80062bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80062ae:	5ccb      	ldrb	r3, [r1, r3]
 80062b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	40023800 	.word	0x40023800
 80062bc:	0800d438 	.word	0x0800d438

080062c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80062c4:	f7ff ffdc 	bl	8006280 <HAL_RCC_GetHCLKFreq>
 80062c8:	4602      	mov	r2, r0
 80062ca:	4b05      	ldr	r3, [pc, #20]	; (80062e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	0b5b      	lsrs	r3, r3, #13
 80062d0:	f003 0307 	and.w	r3, r3, #7
 80062d4:	4903      	ldr	r1, [pc, #12]	; (80062e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062d6:	5ccb      	ldrb	r3, [r1, r3]
 80062d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062dc:	4618      	mov	r0, r3
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	40023800 	.word	0x40023800
 80062e4:	0800d438 	.word	0x0800d438

080062e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	220f      	movs	r2, #15
 80062f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80062f8:	4b12      	ldr	r3, [pc, #72]	; (8006344 <HAL_RCC_GetClockConfig+0x5c>)
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f003 0203 	and.w	r2, r3, #3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006304:	4b0f      	ldr	r3, [pc, #60]	; (8006344 <HAL_RCC_GetClockConfig+0x5c>)
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006310:	4b0c      	ldr	r3, [pc, #48]	; (8006344 <HAL_RCC_GetClockConfig+0x5c>)
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800631c:	4b09      	ldr	r3, [pc, #36]	; (8006344 <HAL_RCC_GetClockConfig+0x5c>)
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	08db      	lsrs	r3, r3, #3
 8006322:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800632a:	4b07      	ldr	r3, [pc, #28]	; (8006348 <HAL_RCC_GetClockConfig+0x60>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0207 	and.w	r2, r3, #7
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	601a      	str	r2, [r3, #0]
}
 8006336:	bf00      	nop
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	40023800 	.word	0x40023800
 8006348:	40023c00 	.word	0x40023c00

0800634c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006354:	2300      	movs	r3, #0
 8006356:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	2b00      	cmp	r3, #0
 8006366:	d105      	bne.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006370:	2b00      	cmp	r3, #0
 8006372:	d035      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006374:	4b62      	ldr	r3, [pc, #392]	; (8006500 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006376:	2200      	movs	r2, #0
 8006378:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800637a:	f7fc ff73 	bl	8003264 <HAL_GetTick>
 800637e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006380:	e008      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006382:	f7fc ff6f 	bl	8003264 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	2b02      	cmp	r3, #2
 800638e:	d901      	bls.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e0b0      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006394:	4b5b      	ldr	r3, [pc, #364]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1f0      	bne.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	019a      	lsls	r2, r3, #6
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	071b      	lsls	r3, r3, #28
 80063ac:	4955      	ldr	r1, [pc, #340]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80063b4:	4b52      	ldr	r3, [pc, #328]	; (8006500 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80063b6:	2201      	movs	r2, #1
 80063b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80063ba:	f7fc ff53 	bl	8003264 <HAL_GetTick>
 80063be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80063c0:	e008      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80063c2:	f7fc ff4f 	bl	8003264 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d901      	bls.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e090      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80063d4:	4b4b      	ldr	r3, [pc, #300]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d0f0      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 8083 	beq.w	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80063ee:	2300      	movs	r3, #0
 80063f0:	60fb      	str	r3, [r7, #12]
 80063f2:	4b44      	ldr	r3, [pc, #272]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f6:	4a43      	ldr	r2, [pc, #268]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063fc:	6413      	str	r3, [r2, #64]	; 0x40
 80063fe:	4b41      	ldr	r3, [pc, #260]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006406:	60fb      	str	r3, [r7, #12]
 8006408:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800640a:	4b3f      	ldr	r3, [pc, #252]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a3e      	ldr	r2, [pc, #248]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006414:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006416:	f7fc ff25 	bl	8003264 <HAL_GetTick>
 800641a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800641c:	e008      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800641e:	f7fc ff21 	bl	8003264 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b02      	cmp	r3, #2
 800642a:	d901      	bls.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e062      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006430:	4b35      	ldr	r3, [pc, #212]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006438:	2b00      	cmp	r3, #0
 800643a:	d0f0      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800643c:	4b31      	ldr	r3, [pc, #196]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800643e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006444:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d02f      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x160>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	429a      	cmp	r2, r3
 8006458:	d028      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800645a:	4b2a      	ldr	r3, [pc, #168]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800645c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800645e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006462:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006464:	4b29      	ldr	r3, [pc, #164]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006466:	2201      	movs	r2, #1
 8006468:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800646a:	4b28      	ldr	r3, [pc, #160]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800646c:	2200      	movs	r2, #0
 800646e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006470:	4a24      	ldr	r2, [pc, #144]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006476:	4b23      	ldr	r3, [pc, #140]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b01      	cmp	r3, #1
 8006480:	d114      	bne.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006482:	f7fc feef 	bl	8003264 <HAL_GetTick>
 8006486:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006488:	e00a      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800648a:	f7fc feeb 	bl	8003264 <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	f241 3288 	movw	r2, #5000	; 0x1388
 8006498:	4293      	cmp	r3, r2
 800649a:	d901      	bls.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e02a      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064a0:	4b18      	ldr	r3, [pc, #96]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d0ee      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064b8:	d10d      	bne.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80064ba:	4b12      	ldr	r3, [pc, #72]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80064ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064ce:	490d      	ldr	r1, [pc, #52]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	608b      	str	r3, [r1, #8]
 80064d4:	e005      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80064d6:	4b0b      	ldr	r3, [pc, #44]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	4a0a      	ldr	r2, [pc, #40]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064dc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80064e0:	6093      	str	r3, [r2, #8]
 80064e2:	4b08      	ldr	r3, [pc, #32]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064ee:	4905      	ldr	r1, [pc, #20]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	42470068 	.word	0x42470068
 8006504:	40023800 	.word	0x40023800
 8006508:	40007000 	.word	0x40007000
 800650c:	42470e40 	.word	0x42470e40

08006510 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e083      	b.n	800662a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	7f5b      	ldrb	r3, [r3, #29]
 8006526:	b2db      	uxtb	r3, r3
 8006528:	2b00      	cmp	r3, #0
 800652a:	d105      	bne.n	8006538 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7fb ff30 	bl	8002398 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	22ca      	movs	r2, #202	; 0xca
 8006544:	625a      	str	r2, [r3, #36]	; 0x24
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2253      	movs	r2, #83	; 0x53
 800654c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f897 	bl	8006682 <RTC_EnterInitMode>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d008      	beq.n	800656c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	22ff      	movs	r2, #255	; 0xff
 8006560:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2204      	movs	r2, #4
 8006566:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e05e      	b.n	800662a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	6812      	ldr	r2, [r2, #0]
 8006576:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800657a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800657e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6899      	ldr	r1, [r3, #8]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	431a      	orrs	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	431a      	orrs	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	68d2      	ldr	r2, [r2, #12]
 80065a6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6919      	ldr	r1, [r3, #16]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	041a      	lsls	r2, r3, #16
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	430a      	orrs	r2, r1
 80065ba:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68da      	ldr	r2, [r3, #12]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065ca:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f003 0320 	and.w	r3, r3, #32
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10e      	bne.n	80065f8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f829 	bl	8006632 <HAL_RTC_WaitForSynchro>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d008      	beq.n	80065f8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	22ff      	movs	r2, #255	; 0xff
 80065ec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2204      	movs	r2, #4
 80065f2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e018      	b.n	800662a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006606:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	699a      	ldr	r2, [r3, #24]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	430a      	orrs	r2, r1
 8006618:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	22ff      	movs	r2, #255	; 0xff
 8006620:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006628:	2300      	movs	r3, #0
  }
}
 800662a:	4618      	mov	r0, r3
 800662c:	3708      	adds	r7, #8
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b084      	sub	sp, #16
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68da      	ldr	r2, [r3, #12]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800664c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800664e:	f7fc fe09 	bl	8003264 <HAL_GetTick>
 8006652:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006654:	e009      	b.n	800666a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006656:	f7fc fe05 	bl	8003264 <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006664:	d901      	bls.n	800666a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e007      	b.n	800667a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	f003 0320 	and.w	r3, r3, #32
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0ee      	beq.n	8006656 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b084      	sub	sp, #16
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800668a:	2300      	movs	r3, #0
 800668c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006698:	2b00      	cmp	r3, #0
 800669a:	d119      	bne.n	80066d0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f04f 32ff 	mov.w	r2, #4294967295
 80066a4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80066a6:	f7fc fddd 	bl	8003264 <HAL_GetTick>
 80066aa:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80066ac:	e009      	b.n	80066c2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80066ae:	f7fc fdd9 	bl	8003264 <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066bc:	d901      	bls.n	80066c2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e007      	b.n	80066d2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d0ee      	beq.n	80066ae <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b082      	sub	sp, #8
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e07b      	b.n	80067e4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d108      	bne.n	8006706 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066fc:	d009      	beq.n	8006712 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	61da      	str	r2, [r3, #28]
 8006704:	e005      	b.n	8006712 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b00      	cmp	r3, #0
 8006722:	d106      	bne.n	8006732 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7fb fe7f 	bl	8002430 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2202      	movs	r2, #2
 8006736:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006748:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800675a:	431a      	orrs	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006764:	431a      	orrs	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	431a      	orrs	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006782:	431a      	orrs	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	69db      	ldr	r3, [r3, #28]
 8006788:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800678c:	431a      	orrs	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006796:	ea42 0103 	orr.w	r1, r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	0c1b      	lsrs	r3, r3, #16
 80067b0:	f003 0104 	and.w	r1, r3, #4
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	f003 0210 	and.w	r2, r3, #16
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	430a      	orrs	r2, r1
 80067c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	69da      	ldr	r2, [r3, #28]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d101      	bne.n	80067fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e041      	b.n	8006882 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d106      	bne.n	8006818 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7fc f9c2 	bl	8002b9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	3304      	adds	r3, #4
 8006828:	4619      	mov	r1, r3
 800682a:	4610      	mov	r0, r2
 800682c:	f000 fba8 	bl	8006f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
	...

0800688c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b01      	cmp	r3, #1
 800689e:	d001      	beq.n	80068a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e04e      	b.n	8006942 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2202      	movs	r2, #2
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68da      	ldr	r2, [r3, #12]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f042 0201 	orr.w	r2, r2, #1
 80068ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a23      	ldr	r2, [pc, #140]	; (8006950 <HAL_TIM_Base_Start_IT+0xc4>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d022      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x80>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ce:	d01d      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x80>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a1f      	ldr	r2, [pc, #124]	; (8006954 <HAL_TIM_Base_Start_IT+0xc8>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d018      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x80>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a1e      	ldr	r2, [pc, #120]	; (8006958 <HAL_TIM_Base_Start_IT+0xcc>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d013      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x80>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a1c      	ldr	r2, [pc, #112]	; (800695c <HAL_TIM_Base_Start_IT+0xd0>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d00e      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x80>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a1b      	ldr	r2, [pc, #108]	; (8006960 <HAL_TIM_Base_Start_IT+0xd4>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d009      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x80>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a19      	ldr	r2, [pc, #100]	; (8006964 <HAL_TIM_Base_Start_IT+0xd8>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d004      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x80>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a18      	ldr	r2, [pc, #96]	; (8006968 <HAL_TIM_Base_Start_IT+0xdc>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d111      	bne.n	8006930 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2b06      	cmp	r3, #6
 800691c:	d010      	beq.n	8006940 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f042 0201 	orr.w	r2, r2, #1
 800692c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800692e:	e007      	b.n	8006940 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f042 0201 	orr.w	r2, r2, #1
 800693e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	40010000 	.word	0x40010000
 8006954:	40000400 	.word	0x40000400
 8006958:	40000800 	.word	0x40000800
 800695c:	40000c00 	.word	0x40000c00
 8006960:	40010400 	.word	0x40010400
 8006964:	40014000 	.word	0x40014000
 8006968:	40001800 	.word	0x40001800

0800696c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e041      	b.n	8006a02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d106      	bne.n	8006998 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7fc f954 	bl	8002c40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2202      	movs	r2, #2
 800699c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	3304      	adds	r3, #4
 80069a8:	4619      	mov	r1, r3
 80069aa:	4610      	mov	r0, r2
 80069ac:	f000 fae8 	bl	8006f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b082      	sub	sp, #8
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	f003 0302 	and.w	r3, r3, #2
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d122      	bne.n	8006a66 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d11b      	bne.n	8006a66 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f06f 0202 	mvn.w	r2, #2
 8006a36:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	f003 0303 	and.w	r3, r3, #3
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fa78 	bl	8006f42 <HAL_TIM_IC_CaptureCallback>
 8006a52:	e005      	b.n	8006a60 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fa6a 	bl	8006f2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fa7b 	bl	8006f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	f003 0304 	and.w	r3, r3, #4
 8006a70:	2b04      	cmp	r3, #4
 8006a72:	d122      	bne.n	8006aba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	f003 0304 	and.w	r3, r3, #4
 8006a7e:	2b04      	cmp	r3, #4
 8006a80:	d11b      	bne.n	8006aba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f06f 0204 	mvn.w	r2, #4
 8006a8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2202      	movs	r2, #2
 8006a90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d003      	beq.n	8006aa8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fa4e 	bl	8006f42 <HAL_TIM_IC_CaptureCallback>
 8006aa6:	e005      	b.n	8006ab4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fa40 	bl	8006f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fa51 	bl	8006f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	f003 0308 	and.w	r3, r3, #8
 8006ac4:	2b08      	cmp	r3, #8
 8006ac6:	d122      	bne.n	8006b0e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	f003 0308 	and.w	r3, r3, #8
 8006ad2:	2b08      	cmp	r3, #8
 8006ad4:	d11b      	bne.n	8006b0e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f06f 0208 	mvn.w	r2, #8
 8006ade:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2204      	movs	r2, #4
 8006ae4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69db      	ldr	r3, [r3, #28]
 8006aec:	f003 0303 	and.w	r3, r3, #3
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d003      	beq.n	8006afc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 fa24 	bl	8006f42 <HAL_TIM_IC_CaptureCallback>
 8006afa:	e005      	b.n	8006b08 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fa16 	bl	8006f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fa27 	bl	8006f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	f003 0310 	and.w	r3, r3, #16
 8006b18:	2b10      	cmp	r3, #16
 8006b1a:	d122      	bne.n	8006b62 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	f003 0310 	and.w	r3, r3, #16
 8006b26:	2b10      	cmp	r3, #16
 8006b28:	d11b      	bne.n	8006b62 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f06f 0210 	mvn.w	r2, #16
 8006b32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2208      	movs	r2, #8
 8006b38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	69db      	ldr	r3, [r3, #28]
 8006b40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d003      	beq.n	8006b50 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 f9fa 	bl	8006f42 <HAL_TIM_IC_CaptureCallback>
 8006b4e:	e005      	b.n	8006b5c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f9ec 	bl	8006f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f9fd 	bl	8006f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d10e      	bne.n	8006b8e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d107      	bne.n	8006b8e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f06f 0201 	mvn.w	r2, #1
 8006b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f7fa fc19 	bl	80013c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b98:	2b80      	cmp	r3, #128	; 0x80
 8006b9a:	d10e      	bne.n	8006bba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba6:	2b80      	cmp	r3, #128	; 0x80
 8006ba8:	d107      	bne.n	8006bba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fd53 	bl	8007660 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc4:	2b40      	cmp	r3, #64	; 0x40
 8006bc6:	d10e      	bne.n	8006be6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd2:	2b40      	cmp	r3, #64	; 0x40
 8006bd4:	d107      	bne.n	8006be6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f9c2 	bl	8006f6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	f003 0320 	and.w	r3, r3, #32
 8006bf0:	2b20      	cmp	r3, #32
 8006bf2:	d10e      	bne.n	8006c12 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	f003 0320 	and.w	r3, r3, #32
 8006bfe:	2b20      	cmp	r3, #32
 8006c00:	d107      	bne.n	8006c12 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f06f 0220 	mvn.w	r2, #32
 8006c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 fd1d 	bl	800764c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c12:	bf00      	nop
 8006c14:	3708      	adds	r7, #8
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
	...

08006c1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d101      	bne.n	8006c3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c36:	2302      	movs	r3, #2
 8006c38:	e0ae      	b.n	8006d98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b0c      	cmp	r3, #12
 8006c46:	f200 809f 	bhi.w	8006d88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006c4a:	a201      	add	r2, pc, #4	; (adr r2, 8006c50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c50:	08006c85 	.word	0x08006c85
 8006c54:	08006d89 	.word	0x08006d89
 8006c58:	08006d89 	.word	0x08006d89
 8006c5c:	08006d89 	.word	0x08006d89
 8006c60:	08006cc5 	.word	0x08006cc5
 8006c64:	08006d89 	.word	0x08006d89
 8006c68:	08006d89 	.word	0x08006d89
 8006c6c:	08006d89 	.word	0x08006d89
 8006c70:	08006d07 	.word	0x08006d07
 8006c74:	08006d89 	.word	0x08006d89
 8006c78:	08006d89 	.word	0x08006d89
 8006c7c:	08006d89 	.word	0x08006d89
 8006c80:	08006d47 	.word	0x08006d47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68b9      	ldr	r1, [r7, #8]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 fa18 	bl	80070c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	699a      	ldr	r2, [r3, #24]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f042 0208 	orr.w	r2, r2, #8
 8006c9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	699a      	ldr	r2, [r3, #24]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 0204 	bic.w	r2, r2, #4
 8006cae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6999      	ldr	r1, [r3, #24]
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	691a      	ldr	r2, [r3, #16]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	619a      	str	r2, [r3, #24]
      break;
 8006cc2:	e064      	b.n	8006d8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68b9      	ldr	r1, [r7, #8]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 fa68 	bl	80071a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	699a      	ldr	r2, [r3, #24]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	699a      	ldr	r2, [r3, #24]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6999      	ldr	r1, [r3, #24]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	021a      	lsls	r2, r3, #8
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	430a      	orrs	r2, r1
 8006d02:	619a      	str	r2, [r3, #24]
      break;
 8006d04:	e043      	b.n	8006d8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68b9      	ldr	r1, [r7, #8]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f000 fabd 	bl	800728c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	69da      	ldr	r2, [r3, #28]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f042 0208 	orr.w	r2, r2, #8
 8006d20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	69da      	ldr	r2, [r3, #28]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f022 0204 	bic.w	r2, r2, #4
 8006d30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	69d9      	ldr	r1, [r3, #28]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	691a      	ldr	r2, [r3, #16]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	430a      	orrs	r2, r1
 8006d42:	61da      	str	r2, [r3, #28]
      break;
 8006d44:	e023      	b.n	8006d8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68b9      	ldr	r1, [r7, #8]
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f000 fb11 	bl	8007374 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	69da      	ldr	r2, [r3, #28]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	69da      	ldr	r2, [r3, #28]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	69d9      	ldr	r1, [r3, #28]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	021a      	lsls	r2, r3, #8
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	61da      	str	r2, [r3, #28]
      break;
 8006d86:	e002      	b.n	8006d8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3718      	adds	r7, #24
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006daa:	2300      	movs	r3, #0
 8006dac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d101      	bne.n	8006dbc <HAL_TIM_ConfigClockSource+0x1c>
 8006db8:	2302      	movs	r3, #2
 8006dba:	e0b4      	b.n	8006f26 <HAL_TIM_ConfigClockSource+0x186>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006dda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006de2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006df4:	d03e      	beq.n	8006e74 <HAL_TIM_ConfigClockSource+0xd4>
 8006df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dfa:	f200 8087 	bhi.w	8006f0c <HAL_TIM_ConfigClockSource+0x16c>
 8006dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e02:	f000 8086 	beq.w	8006f12 <HAL_TIM_ConfigClockSource+0x172>
 8006e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e0a:	d87f      	bhi.n	8006f0c <HAL_TIM_ConfigClockSource+0x16c>
 8006e0c:	2b70      	cmp	r3, #112	; 0x70
 8006e0e:	d01a      	beq.n	8006e46 <HAL_TIM_ConfigClockSource+0xa6>
 8006e10:	2b70      	cmp	r3, #112	; 0x70
 8006e12:	d87b      	bhi.n	8006f0c <HAL_TIM_ConfigClockSource+0x16c>
 8006e14:	2b60      	cmp	r3, #96	; 0x60
 8006e16:	d050      	beq.n	8006eba <HAL_TIM_ConfigClockSource+0x11a>
 8006e18:	2b60      	cmp	r3, #96	; 0x60
 8006e1a:	d877      	bhi.n	8006f0c <HAL_TIM_ConfigClockSource+0x16c>
 8006e1c:	2b50      	cmp	r3, #80	; 0x50
 8006e1e:	d03c      	beq.n	8006e9a <HAL_TIM_ConfigClockSource+0xfa>
 8006e20:	2b50      	cmp	r3, #80	; 0x50
 8006e22:	d873      	bhi.n	8006f0c <HAL_TIM_ConfigClockSource+0x16c>
 8006e24:	2b40      	cmp	r3, #64	; 0x40
 8006e26:	d058      	beq.n	8006eda <HAL_TIM_ConfigClockSource+0x13a>
 8006e28:	2b40      	cmp	r3, #64	; 0x40
 8006e2a:	d86f      	bhi.n	8006f0c <HAL_TIM_ConfigClockSource+0x16c>
 8006e2c:	2b30      	cmp	r3, #48	; 0x30
 8006e2e:	d064      	beq.n	8006efa <HAL_TIM_ConfigClockSource+0x15a>
 8006e30:	2b30      	cmp	r3, #48	; 0x30
 8006e32:	d86b      	bhi.n	8006f0c <HAL_TIM_ConfigClockSource+0x16c>
 8006e34:	2b20      	cmp	r3, #32
 8006e36:	d060      	beq.n	8006efa <HAL_TIM_ConfigClockSource+0x15a>
 8006e38:	2b20      	cmp	r3, #32
 8006e3a:	d867      	bhi.n	8006f0c <HAL_TIM_ConfigClockSource+0x16c>
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d05c      	beq.n	8006efa <HAL_TIM_ConfigClockSource+0x15a>
 8006e40:	2b10      	cmp	r3, #16
 8006e42:	d05a      	beq.n	8006efa <HAL_TIM_ConfigClockSource+0x15a>
 8006e44:	e062      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6818      	ldr	r0, [r3, #0]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	6899      	ldr	r1, [r3, #8]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	f000 fb5d 	bl	8007514 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	609a      	str	r2, [r3, #8]
      break;
 8006e72:	e04f      	b.n	8006f14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6818      	ldr	r0, [r3, #0]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	6899      	ldr	r1, [r3, #8]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	f000 fb46 	bl	8007514 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	689a      	ldr	r2, [r3, #8]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e96:	609a      	str	r2, [r3, #8]
      break;
 8006e98:	e03c      	b.n	8006f14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6818      	ldr	r0, [r3, #0]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	6859      	ldr	r1, [r3, #4]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	f000 faba 	bl	8007420 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2150      	movs	r1, #80	; 0x50
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 fb13 	bl	80074de <TIM_ITRx_SetConfig>
      break;
 8006eb8:	e02c      	b.n	8006f14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6818      	ldr	r0, [r3, #0]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	6859      	ldr	r1, [r3, #4]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	f000 fad9 	bl	800747e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2160      	movs	r1, #96	; 0x60
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 fb03 	bl	80074de <TIM_ITRx_SetConfig>
      break;
 8006ed8:	e01c      	b.n	8006f14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6818      	ldr	r0, [r3, #0]
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	6859      	ldr	r1, [r3, #4]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	f000 fa9a 	bl	8007420 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2140      	movs	r1, #64	; 0x40
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f000 faf3 	bl	80074de <TIM_ITRx_SetConfig>
      break;
 8006ef8:	e00c      	b.n	8006f14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4619      	mov	r1, r3
 8006f04:	4610      	mov	r0, r2
 8006f06:	f000 faea 	bl	80074de <TIM_ITRx_SetConfig>
      break;
 8006f0a:	e003      	b.n	8006f14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f10:	e000      	b.n	8006f14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b083      	sub	sp, #12
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f36:	bf00      	nop
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b083      	sub	sp, #12
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f4a:	bf00      	nop
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b083      	sub	sp, #12
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f5e:	bf00      	nop
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b083      	sub	sp, #12
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f72:	bf00      	nop
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
	...

08006f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a40      	ldr	r2, [pc, #256]	; (8007094 <TIM_Base_SetConfig+0x114>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d013      	beq.n	8006fc0 <TIM_Base_SetConfig+0x40>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f9e:	d00f      	beq.n	8006fc0 <TIM_Base_SetConfig+0x40>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a3d      	ldr	r2, [pc, #244]	; (8007098 <TIM_Base_SetConfig+0x118>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d00b      	beq.n	8006fc0 <TIM_Base_SetConfig+0x40>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a3c      	ldr	r2, [pc, #240]	; (800709c <TIM_Base_SetConfig+0x11c>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d007      	beq.n	8006fc0 <TIM_Base_SetConfig+0x40>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a3b      	ldr	r2, [pc, #236]	; (80070a0 <TIM_Base_SetConfig+0x120>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d003      	beq.n	8006fc0 <TIM_Base_SetConfig+0x40>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a3a      	ldr	r2, [pc, #232]	; (80070a4 <TIM_Base_SetConfig+0x124>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d108      	bne.n	8006fd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a2f      	ldr	r2, [pc, #188]	; (8007094 <TIM_Base_SetConfig+0x114>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d02b      	beq.n	8007032 <TIM_Base_SetConfig+0xb2>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fe0:	d027      	beq.n	8007032 <TIM_Base_SetConfig+0xb2>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a2c      	ldr	r2, [pc, #176]	; (8007098 <TIM_Base_SetConfig+0x118>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d023      	beq.n	8007032 <TIM_Base_SetConfig+0xb2>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a2b      	ldr	r2, [pc, #172]	; (800709c <TIM_Base_SetConfig+0x11c>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d01f      	beq.n	8007032 <TIM_Base_SetConfig+0xb2>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a2a      	ldr	r2, [pc, #168]	; (80070a0 <TIM_Base_SetConfig+0x120>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d01b      	beq.n	8007032 <TIM_Base_SetConfig+0xb2>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a29      	ldr	r2, [pc, #164]	; (80070a4 <TIM_Base_SetConfig+0x124>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d017      	beq.n	8007032 <TIM_Base_SetConfig+0xb2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a28      	ldr	r2, [pc, #160]	; (80070a8 <TIM_Base_SetConfig+0x128>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d013      	beq.n	8007032 <TIM_Base_SetConfig+0xb2>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a27      	ldr	r2, [pc, #156]	; (80070ac <TIM_Base_SetConfig+0x12c>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d00f      	beq.n	8007032 <TIM_Base_SetConfig+0xb2>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a26      	ldr	r2, [pc, #152]	; (80070b0 <TIM_Base_SetConfig+0x130>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d00b      	beq.n	8007032 <TIM_Base_SetConfig+0xb2>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a25      	ldr	r2, [pc, #148]	; (80070b4 <TIM_Base_SetConfig+0x134>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d007      	beq.n	8007032 <TIM_Base_SetConfig+0xb2>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a24      	ldr	r2, [pc, #144]	; (80070b8 <TIM_Base_SetConfig+0x138>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d003      	beq.n	8007032 <TIM_Base_SetConfig+0xb2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a23      	ldr	r2, [pc, #140]	; (80070bc <TIM_Base_SetConfig+0x13c>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d108      	bne.n	8007044 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	4313      	orrs	r3, r2
 8007042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	4313      	orrs	r3, r2
 8007050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a0a      	ldr	r2, [pc, #40]	; (8007094 <TIM_Base_SetConfig+0x114>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d003      	beq.n	8007078 <TIM_Base_SetConfig+0xf8>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a0c      	ldr	r2, [pc, #48]	; (80070a4 <TIM_Base_SetConfig+0x124>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d103      	bne.n	8007080 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	691a      	ldr	r2, [r3, #16]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	615a      	str	r2, [r3, #20]
}
 8007086:	bf00      	nop
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	40010000 	.word	0x40010000
 8007098:	40000400 	.word	0x40000400
 800709c:	40000800 	.word	0x40000800
 80070a0:	40000c00 	.word	0x40000c00
 80070a4:	40010400 	.word	0x40010400
 80070a8:	40014000 	.word	0x40014000
 80070ac:	40014400 	.word	0x40014400
 80070b0:	40014800 	.word	0x40014800
 80070b4:	40001800 	.word	0x40001800
 80070b8:	40001c00 	.word	0x40001c00
 80070bc:	40002000 	.word	0x40002000

080070c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b087      	sub	sp, #28
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	f023 0201 	bic.w	r2, r3, #1
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f023 0303 	bic.w	r3, r3, #3
 80070f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	4313      	orrs	r3, r2
 8007100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f023 0302 	bic.w	r3, r3, #2
 8007108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	4313      	orrs	r3, r2
 8007112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a20      	ldr	r2, [pc, #128]	; (8007198 <TIM_OC1_SetConfig+0xd8>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d003      	beq.n	8007124 <TIM_OC1_SetConfig+0x64>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a1f      	ldr	r2, [pc, #124]	; (800719c <TIM_OC1_SetConfig+0xdc>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d10c      	bne.n	800713e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	f023 0308 	bic.w	r3, r3, #8
 800712a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	4313      	orrs	r3, r2
 8007134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f023 0304 	bic.w	r3, r3, #4
 800713c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a15      	ldr	r2, [pc, #84]	; (8007198 <TIM_OC1_SetConfig+0xd8>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d003      	beq.n	800714e <TIM_OC1_SetConfig+0x8e>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a14      	ldr	r2, [pc, #80]	; (800719c <TIM_OC1_SetConfig+0xdc>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d111      	bne.n	8007172 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800715c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	4313      	orrs	r3, r2
 8007166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	4313      	orrs	r3, r2
 8007170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	685a      	ldr	r2, [r3, #4]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	621a      	str	r2, [r3, #32]
}
 800718c:	bf00      	nop
 800718e:	371c      	adds	r7, #28
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr
 8007198:	40010000 	.word	0x40010000
 800719c:	40010400 	.word	0x40010400

080071a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	f023 0210 	bic.w	r2, r3, #16
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	021b      	lsls	r3, r3, #8
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f023 0320 	bic.w	r3, r3, #32
 80071ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	011b      	lsls	r3, r3, #4
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a22      	ldr	r2, [pc, #136]	; (8007284 <TIM_OC2_SetConfig+0xe4>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d003      	beq.n	8007208 <TIM_OC2_SetConfig+0x68>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a21      	ldr	r2, [pc, #132]	; (8007288 <TIM_OC2_SetConfig+0xe8>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d10d      	bne.n	8007224 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800720e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	011b      	lsls	r3, r3, #4
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	4313      	orrs	r3, r2
 800721a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007222:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a17      	ldr	r2, [pc, #92]	; (8007284 <TIM_OC2_SetConfig+0xe4>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d003      	beq.n	8007234 <TIM_OC2_SetConfig+0x94>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a16      	ldr	r2, [pc, #88]	; (8007288 <TIM_OC2_SetConfig+0xe8>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d113      	bne.n	800725c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800723a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007242:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	695b      	ldr	r3, [r3, #20]
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	4313      	orrs	r3, r2
 800724e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	4313      	orrs	r3, r2
 800725a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	697a      	ldr	r2, [r7, #20]
 8007274:	621a      	str	r2, [r3, #32]
}
 8007276:	bf00      	nop
 8007278:	371c      	adds	r7, #28
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	40010000 	.word	0x40010000
 8007288:	40010400 	.word	0x40010400

0800728c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f023 0303 	bic.w	r3, r3, #3
 80072c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	021b      	lsls	r3, r3, #8
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	4313      	orrs	r3, r2
 80072e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a21      	ldr	r2, [pc, #132]	; (800736c <TIM_OC3_SetConfig+0xe0>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d003      	beq.n	80072f2 <TIM_OC3_SetConfig+0x66>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a20      	ldr	r2, [pc, #128]	; (8007370 <TIM_OC3_SetConfig+0xe4>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d10d      	bne.n	800730e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	021b      	lsls	r3, r3, #8
 8007300:	697a      	ldr	r2, [r7, #20]
 8007302:	4313      	orrs	r3, r2
 8007304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800730c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a16      	ldr	r2, [pc, #88]	; (800736c <TIM_OC3_SetConfig+0xe0>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d003      	beq.n	800731e <TIM_OC3_SetConfig+0x92>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a15      	ldr	r2, [pc, #84]	; (8007370 <TIM_OC3_SetConfig+0xe4>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d113      	bne.n	8007346 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800732c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	011b      	lsls	r3, r3, #4
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	4313      	orrs	r3, r2
 8007338:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	011b      	lsls	r3, r3, #4
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	4313      	orrs	r3, r2
 8007344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	685a      	ldr	r2, [r3, #4]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	697a      	ldr	r2, [r7, #20]
 800735e:	621a      	str	r2, [r3, #32]
}
 8007360:	bf00      	nop
 8007362:	371c      	adds	r7, #28
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr
 800736c:	40010000 	.word	0x40010000
 8007370:	40010400 	.word	0x40010400

08007374 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007374:	b480      	push	{r7}
 8007376:	b087      	sub	sp, #28
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	021b      	lsls	r3, r3, #8
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	031b      	lsls	r3, r3, #12
 80073c6:	693a      	ldr	r2, [r7, #16]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a12      	ldr	r2, [pc, #72]	; (8007418 <TIM_OC4_SetConfig+0xa4>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d003      	beq.n	80073dc <TIM_OC4_SetConfig+0x68>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a11      	ldr	r2, [pc, #68]	; (800741c <TIM_OC4_SetConfig+0xa8>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d109      	bne.n	80073f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	695b      	ldr	r3, [r3, #20]
 80073e8:	019b      	lsls	r3, r3, #6
 80073ea:	697a      	ldr	r2, [r7, #20]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	685a      	ldr	r2, [r3, #4]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	621a      	str	r2, [r3, #32]
}
 800740a:	bf00      	nop
 800740c:	371c      	adds	r7, #28
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop
 8007418:	40010000 	.word	0x40010000
 800741c:	40010400 	.word	0x40010400

08007420 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007420:	b480      	push	{r7}
 8007422:	b087      	sub	sp, #28
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6a1b      	ldr	r3, [r3, #32]
 8007430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	f023 0201 	bic.w	r2, r3, #1
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800744a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	011b      	lsls	r3, r3, #4
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	4313      	orrs	r3, r2
 8007454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	f023 030a 	bic.w	r3, r3, #10
 800745c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	4313      	orrs	r3, r2
 8007464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	621a      	str	r2, [r3, #32]
}
 8007472:	bf00      	nop
 8007474:	371c      	adds	r7, #28
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr

0800747e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800747e:	b480      	push	{r7}
 8007480:	b087      	sub	sp, #28
 8007482:	af00      	add	r7, sp, #0
 8007484:	60f8      	str	r0, [r7, #12]
 8007486:	60b9      	str	r1, [r7, #8]
 8007488:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	f023 0210 	bic.w	r2, r3, #16
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6a1b      	ldr	r3, [r3, #32]
 80074a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	031b      	lsls	r3, r3, #12
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	011b      	lsls	r3, r3, #4
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	697a      	ldr	r2, [r7, #20]
 80074ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	621a      	str	r2, [r3, #32]
}
 80074d2:	bf00      	nop
 80074d4:	371c      	adds	r7, #28
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074de:	b480      	push	{r7}
 80074e0:	b085      	sub	sp, #20
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
 80074e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	f043 0307 	orr.w	r3, r3, #7
 8007500:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	609a      	str	r2, [r3, #8]
}
 8007508:	bf00      	nop
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007514:	b480      	push	{r7}
 8007516:	b087      	sub	sp, #28
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
 8007520:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800752e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	021a      	lsls	r2, r3, #8
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	431a      	orrs	r2, r3
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	4313      	orrs	r3, r2
 800753c:	697a      	ldr	r2, [r7, #20]
 800753e:	4313      	orrs	r3, r2
 8007540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	609a      	str	r2, [r3, #8]
}
 8007548:	bf00      	nop
 800754a:	371c      	adds	r7, #28
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007564:	2b01      	cmp	r3, #1
 8007566:	d101      	bne.n	800756c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007568:	2302      	movs	r3, #2
 800756a:	e05a      	b.n	8007622 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2202      	movs	r2, #2
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007592:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	4313      	orrs	r3, r2
 800759c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a21      	ldr	r2, [pc, #132]	; (8007630 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d022      	beq.n	80075f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075b8:	d01d      	beq.n	80075f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a1d      	ldr	r2, [pc, #116]	; (8007634 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d018      	beq.n	80075f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a1b      	ldr	r2, [pc, #108]	; (8007638 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d013      	beq.n	80075f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a1a      	ldr	r2, [pc, #104]	; (800763c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d00e      	beq.n	80075f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a18      	ldr	r2, [pc, #96]	; (8007640 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d009      	beq.n	80075f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a17      	ldr	r2, [pc, #92]	; (8007644 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d004      	beq.n	80075f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a15      	ldr	r2, [pc, #84]	; (8007648 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d10c      	bne.n	8007610 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	68ba      	ldr	r2, [r7, #8]
 8007604:	4313      	orrs	r3, r2
 8007606:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3714      	adds	r7, #20
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	40010000 	.word	0x40010000
 8007634:	40000400 	.word	0x40000400
 8007638:	40000800 	.word	0x40000800
 800763c:	40000c00 	.word	0x40000c00
 8007640:	40010400 	.word	0x40010400
 8007644:	40014000 	.word	0x40014000
 8007648:	40001800 	.word	0x40001800

0800764c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007654:	bf00      	nop
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007668:	bf00      	nop
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d101      	bne.n	8007686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e03f      	b.n	8007706 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b00      	cmp	r3, #0
 8007690:	d106      	bne.n	80076a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f7fb fbf8 	bl	8002e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2224      	movs	r2, #36	; 0x24
 80076a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68da      	ldr	r2, [r3, #12]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fc7b 	bl	8007fb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	691a      	ldr	r2, [r3, #16]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	695a      	ldr	r2, [r3, #20]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68da      	ldr	r2, [r3, #12]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2220      	movs	r2, #32
 80076f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2220      	movs	r2, #32
 8007700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
	...

08007710 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b0ba      	sub	sp, #232	; 0xe8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007736:	2300      	movs	r3, #0
 8007738:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800773c:	2300      	movs	r3, #0
 800773e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007746:	f003 030f 	and.w	r3, r3, #15
 800774a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800774e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10f      	bne.n	8007776 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800775a:	f003 0320 	and.w	r3, r3, #32
 800775e:	2b00      	cmp	r3, #0
 8007760:	d009      	beq.n	8007776 <HAL_UART_IRQHandler+0x66>
 8007762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007766:	f003 0320 	and.w	r3, r3, #32
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fb65 	bl	8007e3e <UART_Receive_IT>
      return;
 8007774:	e256      	b.n	8007c24 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007776:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800777a:	2b00      	cmp	r3, #0
 800777c:	f000 80de 	beq.w	800793c <HAL_UART_IRQHandler+0x22c>
 8007780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007784:	f003 0301 	and.w	r3, r3, #1
 8007788:	2b00      	cmp	r3, #0
 800778a:	d106      	bne.n	800779a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800778c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007790:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 80d1 	beq.w	800793c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800779a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00b      	beq.n	80077be <HAL_UART_IRQHandler+0xae>
 80077a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d005      	beq.n	80077be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b6:	f043 0201 	orr.w	r2, r3, #1
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077c2:	f003 0304 	and.w	r3, r3, #4
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00b      	beq.n	80077e2 <HAL_UART_IRQHandler+0xd2>
 80077ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077ce:	f003 0301 	and.w	r3, r3, #1
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d005      	beq.n	80077e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077da:	f043 0202 	orr.w	r2, r3, #2
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077e6:	f003 0302 	and.w	r3, r3, #2
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00b      	beq.n	8007806 <HAL_UART_IRQHandler+0xf6>
 80077ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d005      	beq.n	8007806 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fe:	f043 0204 	orr.w	r2, r3, #4
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800780a:	f003 0308 	and.w	r3, r3, #8
 800780e:	2b00      	cmp	r3, #0
 8007810:	d011      	beq.n	8007836 <HAL_UART_IRQHandler+0x126>
 8007812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007816:	f003 0320 	and.w	r3, r3, #32
 800781a:	2b00      	cmp	r3, #0
 800781c:	d105      	bne.n	800782a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800781e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	2b00      	cmp	r3, #0
 8007828:	d005      	beq.n	8007836 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782e:	f043 0208 	orr.w	r2, r3, #8
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783a:	2b00      	cmp	r3, #0
 800783c:	f000 81ed 	beq.w	8007c1a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007844:	f003 0320 	and.w	r3, r3, #32
 8007848:	2b00      	cmp	r3, #0
 800784a:	d008      	beq.n	800785e <HAL_UART_IRQHandler+0x14e>
 800784c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007850:	f003 0320 	and.w	r3, r3, #32
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 faf0 	bl	8007e3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	695b      	ldr	r3, [r3, #20]
 8007864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007868:	2b40      	cmp	r3, #64	; 0x40
 800786a:	bf0c      	ite	eq
 800786c:	2301      	moveq	r3, #1
 800786e:	2300      	movne	r3, #0
 8007870:	b2db      	uxtb	r3, r3
 8007872:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787a:	f003 0308 	and.w	r3, r3, #8
 800787e:	2b00      	cmp	r3, #0
 8007880:	d103      	bne.n	800788a <HAL_UART_IRQHandler+0x17a>
 8007882:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007886:	2b00      	cmp	r3, #0
 8007888:	d04f      	beq.n	800792a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f9f8 	bl	8007c80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789a:	2b40      	cmp	r3, #64	; 0x40
 800789c:	d141      	bne.n	8007922 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	3314      	adds	r3, #20
 80078a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078ac:	e853 3f00 	ldrex	r3, [r3]
 80078b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80078b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	3314      	adds	r3, #20
 80078c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80078ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80078ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80078d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80078da:	e841 2300 	strex	r3, r2, [r1]
 80078de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80078e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1d9      	bne.n	800789e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d013      	beq.n	800791a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f6:	4a7d      	ldr	r2, [pc, #500]	; (8007aec <HAL_UART_IRQHandler+0x3dc>)
 80078f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fe:	4618      	mov	r0, r3
 8007900:	f7fc fd1e 	bl	8004340 <HAL_DMA_Abort_IT>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d016      	beq.n	8007938 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007914:	4610      	mov	r0, r2
 8007916:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007918:	e00e      	b.n	8007938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f99a 	bl	8007c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007920:	e00a      	b.n	8007938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f996 	bl	8007c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007928:	e006      	b.n	8007938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f992 	bl	8007c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007936:	e170      	b.n	8007c1a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007938:	bf00      	nop
    return;
 800793a:	e16e      	b.n	8007c1a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007940:	2b01      	cmp	r3, #1
 8007942:	f040 814a 	bne.w	8007bda <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800794a:	f003 0310 	and.w	r3, r3, #16
 800794e:	2b00      	cmp	r3, #0
 8007950:	f000 8143 	beq.w	8007bda <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007958:	f003 0310 	and.w	r3, r3, #16
 800795c:	2b00      	cmp	r3, #0
 800795e:	f000 813c 	beq.w	8007bda <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007962:	2300      	movs	r3, #0
 8007964:	60bb      	str	r3, [r7, #8]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	60bb      	str	r3, [r7, #8]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	60bb      	str	r3, [r7, #8]
 8007976:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007982:	2b40      	cmp	r3, #64	; 0x40
 8007984:	f040 80b4 	bne.w	8007af0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007994:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007998:	2b00      	cmp	r3, #0
 800799a:	f000 8140 	beq.w	8007c1e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079a6:	429a      	cmp	r2, r3
 80079a8:	f080 8139 	bcs.w	8007c1e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079be:	f000 8088 	beq.w	8007ad2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	330c      	adds	r3, #12
 80079c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079d0:	e853 3f00 	ldrex	r3, [r3]
 80079d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80079d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	330c      	adds	r3, #12
 80079ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80079ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80079f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80079fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80079fe:	e841 2300 	strex	r3, r2, [r1]
 8007a02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1d9      	bne.n	80079c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3314      	adds	r3, #20
 8007a14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a18:	e853 3f00 	ldrex	r3, [r3]
 8007a1c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a20:	f023 0301 	bic.w	r3, r3, #1
 8007a24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3314      	adds	r3, #20
 8007a2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a32:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a36:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a3e:	e841 2300 	strex	r3, r2, [r1]
 8007a42:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1e1      	bne.n	8007a0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	3314      	adds	r3, #20
 8007a50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a54:	e853 3f00 	ldrex	r3, [r3]
 8007a58:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	3314      	adds	r3, #20
 8007a6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a76:	e841 2300 	strex	r3, r2, [r1]
 8007a7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1e3      	bne.n	8007a4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2220      	movs	r2, #32
 8007a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	330c      	adds	r3, #12
 8007a96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a9a:	e853 3f00 	ldrex	r3, [r3]
 8007a9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007aa2:	f023 0310 	bic.w	r3, r3, #16
 8007aa6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	330c      	adds	r3, #12
 8007ab0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007ab4:	65ba      	str	r2, [r7, #88]	; 0x58
 8007ab6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007aba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007abc:	e841 2300 	strex	r3, r2, [r1]
 8007ac0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1e3      	bne.n	8007a90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7fc fbc7 	bl	8004260 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	1ad3      	subs	r3, r2, r3
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f8c0 	bl	8007c68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ae8:	e099      	b.n	8007c1e <HAL_UART_IRQHandler+0x50e>
 8007aea:	bf00      	nop
 8007aec:	08007d47 	.word	0x08007d47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	1ad3      	subs	r3, r2, r3
 8007afc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f000 808b 	beq.w	8007c22 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007b0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f000 8086 	beq.w	8007c22 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	330c      	adds	r3, #12
 8007b1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b20:	e853 3f00 	ldrex	r3, [r3]
 8007b24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	330c      	adds	r3, #12
 8007b36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007b3a:	647a      	str	r2, [r7, #68]	; 0x44
 8007b3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b42:	e841 2300 	strex	r3, r2, [r1]
 8007b46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1e3      	bne.n	8007b16 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	3314      	adds	r3, #20
 8007b54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b58:	e853 3f00 	ldrex	r3, [r3]
 8007b5c:	623b      	str	r3, [r7, #32]
   return(result);
 8007b5e:	6a3b      	ldr	r3, [r7, #32]
 8007b60:	f023 0301 	bic.w	r3, r3, #1
 8007b64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3314      	adds	r3, #20
 8007b6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b72:	633a      	str	r2, [r7, #48]	; 0x30
 8007b74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b7a:	e841 2300 	strex	r3, r2, [r1]
 8007b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1e3      	bne.n	8007b4e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	330c      	adds	r3, #12
 8007b9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	e853 3f00 	ldrex	r3, [r3]
 8007ba2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f023 0310 	bic.w	r3, r3, #16
 8007baa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	330c      	adds	r3, #12
 8007bb4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007bb8:	61fa      	str	r2, [r7, #28]
 8007bba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbc:	69b9      	ldr	r1, [r7, #24]
 8007bbe:	69fa      	ldr	r2, [r7, #28]
 8007bc0:	e841 2300 	strex	r3, r2, [r1]
 8007bc4:	617b      	str	r3, [r7, #20]
   return(result);
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1e3      	bne.n	8007b94 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007bcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 f848 	bl	8007c68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007bd8:	e023      	b.n	8007c22 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d009      	beq.n	8007bfa <HAL_UART_IRQHandler+0x4ea>
 8007be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d003      	beq.n	8007bfa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f8bb 	bl	8007d6e <UART_Transmit_IT>
    return;
 8007bf8:	e014      	b.n	8007c24 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00e      	beq.n	8007c24 <HAL_UART_IRQHandler+0x514>
 8007c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d008      	beq.n	8007c24 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f8fb 	bl	8007e0e <UART_EndTransmit_IT>
    return;
 8007c18:	e004      	b.n	8007c24 <HAL_UART_IRQHandler+0x514>
    return;
 8007c1a:	bf00      	nop
 8007c1c:	e002      	b.n	8007c24 <HAL_UART_IRQHandler+0x514>
      return;
 8007c1e:	bf00      	nop
 8007c20:	e000      	b.n	8007c24 <HAL_UART_IRQHandler+0x514>
      return;
 8007c22:	bf00      	nop
  }
}
 8007c24:	37e8      	adds	r7, #232	; 0xe8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop

08007c2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	460b      	mov	r3, r1
 8007c72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c74:	bf00      	nop
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b095      	sub	sp, #84	; 0x54
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	330c      	adds	r3, #12
 8007c8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c92:	e853 3f00 	ldrex	r3, [r3]
 8007c96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	330c      	adds	r3, #12
 8007ca6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ca8:	643a      	str	r2, [r7, #64]	; 0x40
 8007caa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cb0:	e841 2300 	strex	r3, r2, [r1]
 8007cb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1e5      	bne.n	8007c88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	3314      	adds	r3, #20
 8007cc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc4:	6a3b      	ldr	r3, [r7, #32]
 8007cc6:	e853 3f00 	ldrex	r3, [r3]
 8007cca:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	f023 0301 	bic.w	r3, r3, #1
 8007cd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	3314      	adds	r3, #20
 8007cda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cdc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ce2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ce4:	e841 2300 	strex	r3, r2, [r1]
 8007ce8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1e5      	bne.n	8007cbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d119      	bne.n	8007d2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	330c      	adds	r3, #12
 8007cfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	e853 3f00 	ldrex	r3, [r3]
 8007d06:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	f023 0310 	bic.w	r3, r3, #16
 8007d0e:	647b      	str	r3, [r7, #68]	; 0x44
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	330c      	adds	r3, #12
 8007d16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d18:	61ba      	str	r2, [r7, #24]
 8007d1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1c:	6979      	ldr	r1, [r7, #20]
 8007d1e:	69ba      	ldr	r2, [r7, #24]
 8007d20:	e841 2300 	strex	r3, r2, [r1]
 8007d24:	613b      	str	r3, [r7, #16]
   return(result);
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1e5      	bne.n	8007cf8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2220      	movs	r2, #32
 8007d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007d3a:	bf00      	nop
 8007d3c:	3754      	adds	r7, #84	; 0x54
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b084      	sub	sp, #16
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f7ff ff77 	bl	8007c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d66:	bf00      	nop
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b085      	sub	sp, #20
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b21      	cmp	r3, #33	; 0x21
 8007d80:	d13e      	bne.n	8007e00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d8a:	d114      	bne.n	8007db6 <UART_Transmit_IT+0x48>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d110      	bne.n	8007db6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a1b      	ldr	r3, [r3, #32]
 8007d98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	881b      	ldrh	r3, [r3, #0]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007da8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a1b      	ldr	r3, [r3, #32]
 8007dae:	1c9a      	adds	r2, r3, #2
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	621a      	str	r2, [r3, #32]
 8007db4:	e008      	b.n	8007dc8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	1c59      	adds	r1, r3, #1
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	6211      	str	r1, [r2, #32]
 8007dc0:	781a      	ldrb	r2, [r3, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d10f      	bne.n	8007dfc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68da      	ldr	r2, [r3, #12]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007dea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68da      	ldr	r2, [r3, #12]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dfa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	e000      	b.n	8007e02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007e00:	2302      	movs	r3, #2
  }
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3714      	adds	r7, #20
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr

08007e0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b082      	sub	sp, #8
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68da      	ldr	r2, [r3, #12]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2220      	movs	r2, #32
 8007e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7ff fefc 	bl	8007c2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b08c      	sub	sp, #48	; 0x30
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b22      	cmp	r3, #34	; 0x22
 8007e50:	f040 80ab 	bne.w	8007faa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e5c:	d117      	bne.n	8007e8e <UART_Receive_IT+0x50>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d113      	bne.n	8007e8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007e66:	2300      	movs	r3, #0
 8007e68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e6e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e86:	1c9a      	adds	r2, r3, #2
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	629a      	str	r2, [r3, #40]	; 0x28
 8007e8c:	e026      	b.n	8007edc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007e94:	2300      	movs	r3, #0
 8007e96:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ea0:	d007      	beq.n	8007eb2 <UART_Receive_IT+0x74>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10a      	bne.n	8007ec0 <UART_Receive_IT+0x82>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d106      	bne.n	8007ec0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	b2da      	uxtb	r2, r3
 8007eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebc:	701a      	strb	r2, [r3, #0]
 8007ebe:	e008      	b.n	8007ed2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ecc:	b2da      	uxtb	r2, r3
 8007ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed6:	1c5a      	adds	r2, r3, #1
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	4619      	mov	r1, r3
 8007eea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d15a      	bne.n	8007fa6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68da      	ldr	r2, [r3, #12]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f022 0220 	bic.w	r2, r2, #32
 8007efe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68da      	ldr	r2, [r3, #12]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	695a      	ldr	r2, [r3, #20]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f022 0201 	bic.w	r2, r2, #1
 8007f1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2220      	movs	r2, #32
 8007f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d135      	bne.n	8007f9c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	330c      	adds	r3, #12
 8007f3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	e853 3f00 	ldrex	r3, [r3]
 8007f44:	613b      	str	r3, [r7, #16]
   return(result);
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	f023 0310 	bic.w	r3, r3, #16
 8007f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	330c      	adds	r3, #12
 8007f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f56:	623a      	str	r2, [r7, #32]
 8007f58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5a:	69f9      	ldr	r1, [r7, #28]
 8007f5c:	6a3a      	ldr	r2, [r7, #32]
 8007f5e:	e841 2300 	strex	r3, r2, [r1]
 8007f62:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1e5      	bne.n	8007f36 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 0310 	and.w	r3, r3, #16
 8007f74:	2b10      	cmp	r3, #16
 8007f76:	d10a      	bne.n	8007f8e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f78:	2300      	movs	r3, #0
 8007f7a:	60fb      	str	r3, [r7, #12]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	60fb      	str	r3, [r7, #12]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	60fb      	str	r3, [r7, #12]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f92:	4619      	mov	r1, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f7ff fe67 	bl	8007c68 <HAL_UARTEx_RxEventCallback>
 8007f9a:	e002      	b.n	8007fa2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7ff fe4f 	bl	8007c40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	e002      	b.n	8007fac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	e000      	b.n	8007fac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007faa:	2302      	movs	r3, #2
  }
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3730      	adds	r7, #48	; 0x30
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb8:	b09f      	sub	sp, #124	; 0x7c
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fca:	68d9      	ldr	r1, [r3, #12]
 8007fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	ea40 0301 	orr.w	r3, r0, r1
 8007fd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fd8:	689a      	ldr	r2, [r3, #8]
 8007fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	431a      	orrs	r2, r3
 8007fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fe2:	695b      	ldr	r3, [r3, #20]
 8007fe4:	431a      	orrs	r2, r3
 8007fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fe8:	69db      	ldr	r3, [r3, #28]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007ff8:	f021 010c 	bic.w	r1, r1, #12
 8007ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008002:	430b      	orrs	r3, r1
 8008004:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	695b      	ldr	r3, [r3, #20]
 800800c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008012:	6999      	ldr	r1, [r3, #24]
 8008014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	ea40 0301 	orr.w	r3, r0, r1
 800801c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800801e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	4bc5      	ldr	r3, [pc, #788]	; (8008338 <UART_SetConfig+0x384>)
 8008024:	429a      	cmp	r2, r3
 8008026:	d004      	beq.n	8008032 <UART_SetConfig+0x7e>
 8008028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	4bc3      	ldr	r3, [pc, #780]	; (800833c <UART_SetConfig+0x388>)
 800802e:	429a      	cmp	r2, r3
 8008030:	d103      	bne.n	800803a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008032:	f7fe f945 	bl	80062c0 <HAL_RCC_GetPCLK2Freq>
 8008036:	6778      	str	r0, [r7, #116]	; 0x74
 8008038:	e002      	b.n	8008040 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800803a:	f7fe f92d 	bl	8006298 <HAL_RCC_GetPCLK1Freq>
 800803e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008042:	69db      	ldr	r3, [r3, #28]
 8008044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008048:	f040 80b6 	bne.w	80081b8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800804c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800804e:	461c      	mov	r4, r3
 8008050:	f04f 0500 	mov.w	r5, #0
 8008054:	4622      	mov	r2, r4
 8008056:	462b      	mov	r3, r5
 8008058:	1891      	adds	r1, r2, r2
 800805a:	6439      	str	r1, [r7, #64]	; 0x40
 800805c:	415b      	adcs	r3, r3
 800805e:	647b      	str	r3, [r7, #68]	; 0x44
 8008060:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008064:	1912      	adds	r2, r2, r4
 8008066:	eb45 0303 	adc.w	r3, r5, r3
 800806a:	f04f 0000 	mov.w	r0, #0
 800806e:	f04f 0100 	mov.w	r1, #0
 8008072:	00d9      	lsls	r1, r3, #3
 8008074:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008078:	00d0      	lsls	r0, r2, #3
 800807a:	4602      	mov	r2, r0
 800807c:	460b      	mov	r3, r1
 800807e:	1911      	adds	r1, r2, r4
 8008080:	6639      	str	r1, [r7, #96]	; 0x60
 8008082:	416b      	adcs	r3, r5
 8008084:	667b      	str	r3, [r7, #100]	; 0x64
 8008086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	461a      	mov	r2, r3
 800808c:	f04f 0300 	mov.w	r3, #0
 8008090:	1891      	adds	r1, r2, r2
 8008092:	63b9      	str	r1, [r7, #56]	; 0x38
 8008094:	415b      	adcs	r3, r3
 8008096:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008098:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800809c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80080a0:	f7f8 fd64 	bl	8000b6c <__aeabi_uldivmod>
 80080a4:	4602      	mov	r2, r0
 80080a6:	460b      	mov	r3, r1
 80080a8:	4ba5      	ldr	r3, [pc, #660]	; (8008340 <UART_SetConfig+0x38c>)
 80080aa:	fba3 2302 	umull	r2, r3, r3, r2
 80080ae:	095b      	lsrs	r3, r3, #5
 80080b0:	011e      	lsls	r6, r3, #4
 80080b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080b4:	461c      	mov	r4, r3
 80080b6:	f04f 0500 	mov.w	r5, #0
 80080ba:	4622      	mov	r2, r4
 80080bc:	462b      	mov	r3, r5
 80080be:	1891      	adds	r1, r2, r2
 80080c0:	6339      	str	r1, [r7, #48]	; 0x30
 80080c2:	415b      	adcs	r3, r3
 80080c4:	637b      	str	r3, [r7, #52]	; 0x34
 80080c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80080ca:	1912      	adds	r2, r2, r4
 80080cc:	eb45 0303 	adc.w	r3, r5, r3
 80080d0:	f04f 0000 	mov.w	r0, #0
 80080d4:	f04f 0100 	mov.w	r1, #0
 80080d8:	00d9      	lsls	r1, r3, #3
 80080da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80080de:	00d0      	lsls	r0, r2, #3
 80080e0:	4602      	mov	r2, r0
 80080e2:	460b      	mov	r3, r1
 80080e4:	1911      	adds	r1, r2, r4
 80080e6:	65b9      	str	r1, [r7, #88]	; 0x58
 80080e8:	416b      	adcs	r3, r5
 80080ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	461a      	mov	r2, r3
 80080f2:	f04f 0300 	mov.w	r3, #0
 80080f6:	1891      	adds	r1, r2, r2
 80080f8:	62b9      	str	r1, [r7, #40]	; 0x28
 80080fa:	415b      	adcs	r3, r3
 80080fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008102:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008106:	f7f8 fd31 	bl	8000b6c <__aeabi_uldivmod>
 800810a:	4602      	mov	r2, r0
 800810c:	460b      	mov	r3, r1
 800810e:	4b8c      	ldr	r3, [pc, #560]	; (8008340 <UART_SetConfig+0x38c>)
 8008110:	fba3 1302 	umull	r1, r3, r3, r2
 8008114:	095b      	lsrs	r3, r3, #5
 8008116:	2164      	movs	r1, #100	; 0x64
 8008118:	fb01 f303 	mul.w	r3, r1, r3
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	00db      	lsls	r3, r3, #3
 8008120:	3332      	adds	r3, #50	; 0x32
 8008122:	4a87      	ldr	r2, [pc, #540]	; (8008340 <UART_SetConfig+0x38c>)
 8008124:	fba2 2303 	umull	r2, r3, r2, r3
 8008128:	095b      	lsrs	r3, r3, #5
 800812a:	005b      	lsls	r3, r3, #1
 800812c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008130:	441e      	add	r6, r3
 8008132:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008134:	4618      	mov	r0, r3
 8008136:	f04f 0100 	mov.w	r1, #0
 800813a:	4602      	mov	r2, r0
 800813c:	460b      	mov	r3, r1
 800813e:	1894      	adds	r4, r2, r2
 8008140:	623c      	str	r4, [r7, #32]
 8008142:	415b      	adcs	r3, r3
 8008144:	627b      	str	r3, [r7, #36]	; 0x24
 8008146:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800814a:	1812      	adds	r2, r2, r0
 800814c:	eb41 0303 	adc.w	r3, r1, r3
 8008150:	f04f 0400 	mov.w	r4, #0
 8008154:	f04f 0500 	mov.w	r5, #0
 8008158:	00dd      	lsls	r5, r3, #3
 800815a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800815e:	00d4      	lsls	r4, r2, #3
 8008160:	4622      	mov	r2, r4
 8008162:	462b      	mov	r3, r5
 8008164:	1814      	adds	r4, r2, r0
 8008166:	653c      	str	r4, [r7, #80]	; 0x50
 8008168:	414b      	adcs	r3, r1
 800816a:	657b      	str	r3, [r7, #84]	; 0x54
 800816c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	461a      	mov	r2, r3
 8008172:	f04f 0300 	mov.w	r3, #0
 8008176:	1891      	adds	r1, r2, r2
 8008178:	61b9      	str	r1, [r7, #24]
 800817a:	415b      	adcs	r3, r3
 800817c:	61fb      	str	r3, [r7, #28]
 800817e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008182:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008186:	f7f8 fcf1 	bl	8000b6c <__aeabi_uldivmod>
 800818a:	4602      	mov	r2, r0
 800818c:	460b      	mov	r3, r1
 800818e:	4b6c      	ldr	r3, [pc, #432]	; (8008340 <UART_SetConfig+0x38c>)
 8008190:	fba3 1302 	umull	r1, r3, r3, r2
 8008194:	095b      	lsrs	r3, r3, #5
 8008196:	2164      	movs	r1, #100	; 0x64
 8008198:	fb01 f303 	mul.w	r3, r1, r3
 800819c:	1ad3      	subs	r3, r2, r3
 800819e:	00db      	lsls	r3, r3, #3
 80081a0:	3332      	adds	r3, #50	; 0x32
 80081a2:	4a67      	ldr	r2, [pc, #412]	; (8008340 <UART_SetConfig+0x38c>)
 80081a4:	fba2 2303 	umull	r2, r3, r2, r3
 80081a8:	095b      	lsrs	r3, r3, #5
 80081aa:	f003 0207 	and.w	r2, r3, #7
 80081ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4432      	add	r2, r6
 80081b4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80081b6:	e0b9      	b.n	800832c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081ba:	461c      	mov	r4, r3
 80081bc:	f04f 0500 	mov.w	r5, #0
 80081c0:	4622      	mov	r2, r4
 80081c2:	462b      	mov	r3, r5
 80081c4:	1891      	adds	r1, r2, r2
 80081c6:	6139      	str	r1, [r7, #16]
 80081c8:	415b      	adcs	r3, r3
 80081ca:	617b      	str	r3, [r7, #20]
 80081cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80081d0:	1912      	adds	r2, r2, r4
 80081d2:	eb45 0303 	adc.w	r3, r5, r3
 80081d6:	f04f 0000 	mov.w	r0, #0
 80081da:	f04f 0100 	mov.w	r1, #0
 80081de:	00d9      	lsls	r1, r3, #3
 80081e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80081e4:	00d0      	lsls	r0, r2, #3
 80081e6:	4602      	mov	r2, r0
 80081e8:	460b      	mov	r3, r1
 80081ea:	eb12 0804 	adds.w	r8, r2, r4
 80081ee:	eb43 0905 	adc.w	r9, r3, r5
 80081f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	4618      	mov	r0, r3
 80081f8:	f04f 0100 	mov.w	r1, #0
 80081fc:	f04f 0200 	mov.w	r2, #0
 8008200:	f04f 0300 	mov.w	r3, #0
 8008204:	008b      	lsls	r3, r1, #2
 8008206:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800820a:	0082      	lsls	r2, r0, #2
 800820c:	4640      	mov	r0, r8
 800820e:	4649      	mov	r1, r9
 8008210:	f7f8 fcac 	bl	8000b6c <__aeabi_uldivmod>
 8008214:	4602      	mov	r2, r0
 8008216:	460b      	mov	r3, r1
 8008218:	4b49      	ldr	r3, [pc, #292]	; (8008340 <UART_SetConfig+0x38c>)
 800821a:	fba3 2302 	umull	r2, r3, r3, r2
 800821e:	095b      	lsrs	r3, r3, #5
 8008220:	011e      	lsls	r6, r3, #4
 8008222:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008224:	4618      	mov	r0, r3
 8008226:	f04f 0100 	mov.w	r1, #0
 800822a:	4602      	mov	r2, r0
 800822c:	460b      	mov	r3, r1
 800822e:	1894      	adds	r4, r2, r2
 8008230:	60bc      	str	r4, [r7, #8]
 8008232:	415b      	adcs	r3, r3
 8008234:	60fb      	str	r3, [r7, #12]
 8008236:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800823a:	1812      	adds	r2, r2, r0
 800823c:	eb41 0303 	adc.w	r3, r1, r3
 8008240:	f04f 0400 	mov.w	r4, #0
 8008244:	f04f 0500 	mov.w	r5, #0
 8008248:	00dd      	lsls	r5, r3, #3
 800824a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800824e:	00d4      	lsls	r4, r2, #3
 8008250:	4622      	mov	r2, r4
 8008252:	462b      	mov	r3, r5
 8008254:	1814      	adds	r4, r2, r0
 8008256:	64bc      	str	r4, [r7, #72]	; 0x48
 8008258:	414b      	adcs	r3, r1
 800825a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800825c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	4618      	mov	r0, r3
 8008262:	f04f 0100 	mov.w	r1, #0
 8008266:	f04f 0200 	mov.w	r2, #0
 800826a:	f04f 0300 	mov.w	r3, #0
 800826e:	008b      	lsls	r3, r1, #2
 8008270:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008274:	0082      	lsls	r2, r0, #2
 8008276:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800827a:	f7f8 fc77 	bl	8000b6c <__aeabi_uldivmod>
 800827e:	4602      	mov	r2, r0
 8008280:	460b      	mov	r3, r1
 8008282:	4b2f      	ldr	r3, [pc, #188]	; (8008340 <UART_SetConfig+0x38c>)
 8008284:	fba3 1302 	umull	r1, r3, r3, r2
 8008288:	095b      	lsrs	r3, r3, #5
 800828a:	2164      	movs	r1, #100	; 0x64
 800828c:	fb01 f303 	mul.w	r3, r1, r3
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	011b      	lsls	r3, r3, #4
 8008294:	3332      	adds	r3, #50	; 0x32
 8008296:	4a2a      	ldr	r2, [pc, #168]	; (8008340 <UART_SetConfig+0x38c>)
 8008298:	fba2 2303 	umull	r2, r3, r2, r3
 800829c:	095b      	lsrs	r3, r3, #5
 800829e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082a2:	441e      	add	r6, r3
 80082a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082a6:	4618      	mov	r0, r3
 80082a8:	f04f 0100 	mov.w	r1, #0
 80082ac:	4602      	mov	r2, r0
 80082ae:	460b      	mov	r3, r1
 80082b0:	1894      	adds	r4, r2, r2
 80082b2:	603c      	str	r4, [r7, #0]
 80082b4:	415b      	adcs	r3, r3
 80082b6:	607b      	str	r3, [r7, #4]
 80082b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082bc:	1812      	adds	r2, r2, r0
 80082be:	eb41 0303 	adc.w	r3, r1, r3
 80082c2:	f04f 0400 	mov.w	r4, #0
 80082c6:	f04f 0500 	mov.w	r5, #0
 80082ca:	00dd      	lsls	r5, r3, #3
 80082cc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80082d0:	00d4      	lsls	r4, r2, #3
 80082d2:	4622      	mov	r2, r4
 80082d4:	462b      	mov	r3, r5
 80082d6:	eb12 0a00 	adds.w	sl, r2, r0
 80082da:	eb43 0b01 	adc.w	fp, r3, r1
 80082de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	4618      	mov	r0, r3
 80082e4:	f04f 0100 	mov.w	r1, #0
 80082e8:	f04f 0200 	mov.w	r2, #0
 80082ec:	f04f 0300 	mov.w	r3, #0
 80082f0:	008b      	lsls	r3, r1, #2
 80082f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80082f6:	0082      	lsls	r2, r0, #2
 80082f8:	4650      	mov	r0, sl
 80082fa:	4659      	mov	r1, fp
 80082fc:	f7f8 fc36 	bl	8000b6c <__aeabi_uldivmod>
 8008300:	4602      	mov	r2, r0
 8008302:	460b      	mov	r3, r1
 8008304:	4b0e      	ldr	r3, [pc, #56]	; (8008340 <UART_SetConfig+0x38c>)
 8008306:	fba3 1302 	umull	r1, r3, r3, r2
 800830a:	095b      	lsrs	r3, r3, #5
 800830c:	2164      	movs	r1, #100	; 0x64
 800830e:	fb01 f303 	mul.w	r3, r1, r3
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	011b      	lsls	r3, r3, #4
 8008316:	3332      	adds	r3, #50	; 0x32
 8008318:	4a09      	ldr	r2, [pc, #36]	; (8008340 <UART_SetConfig+0x38c>)
 800831a:	fba2 2303 	umull	r2, r3, r2, r3
 800831e:	095b      	lsrs	r3, r3, #5
 8008320:	f003 020f 	and.w	r2, r3, #15
 8008324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4432      	add	r2, r6
 800832a:	609a      	str	r2, [r3, #8]
}
 800832c:	bf00      	nop
 800832e:	377c      	adds	r7, #124	; 0x7c
 8008330:	46bd      	mov	sp, r7
 8008332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008336:	bf00      	nop
 8008338:	40011000 	.word	0x40011000
 800833c:	40011400 	.word	0x40011400
 8008340:	51eb851f 	.word	0x51eb851f

08008344 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008344:	b480      	push	{r7}
 8008346:	b087      	sub	sp, #28
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	4613      	mov	r3, r2
 8008350:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008352:	79fb      	ldrb	r3, [r7, #7]
 8008354:	2b02      	cmp	r3, #2
 8008356:	d165      	bne.n	8008424 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	4a41      	ldr	r2, [pc, #260]	; (8008460 <USB_SetTurnaroundTime+0x11c>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d906      	bls.n	800836e <USB_SetTurnaroundTime+0x2a>
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	4a40      	ldr	r2, [pc, #256]	; (8008464 <USB_SetTurnaroundTime+0x120>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d202      	bcs.n	800836e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008368:	230f      	movs	r3, #15
 800836a:	617b      	str	r3, [r7, #20]
 800836c:	e062      	b.n	8008434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	4a3c      	ldr	r2, [pc, #240]	; (8008464 <USB_SetTurnaroundTime+0x120>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d306      	bcc.n	8008384 <USB_SetTurnaroundTime+0x40>
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	4a3b      	ldr	r2, [pc, #236]	; (8008468 <USB_SetTurnaroundTime+0x124>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d202      	bcs.n	8008384 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800837e:	230e      	movs	r3, #14
 8008380:	617b      	str	r3, [r7, #20]
 8008382:	e057      	b.n	8008434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	4a38      	ldr	r2, [pc, #224]	; (8008468 <USB_SetTurnaroundTime+0x124>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d306      	bcc.n	800839a <USB_SetTurnaroundTime+0x56>
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	4a37      	ldr	r2, [pc, #220]	; (800846c <USB_SetTurnaroundTime+0x128>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d202      	bcs.n	800839a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008394:	230d      	movs	r3, #13
 8008396:	617b      	str	r3, [r7, #20]
 8008398:	e04c      	b.n	8008434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	4a33      	ldr	r2, [pc, #204]	; (800846c <USB_SetTurnaroundTime+0x128>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d306      	bcc.n	80083b0 <USB_SetTurnaroundTime+0x6c>
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	4a32      	ldr	r2, [pc, #200]	; (8008470 <USB_SetTurnaroundTime+0x12c>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d802      	bhi.n	80083b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80083aa:	230c      	movs	r3, #12
 80083ac:	617b      	str	r3, [r7, #20]
 80083ae:	e041      	b.n	8008434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	4a2f      	ldr	r2, [pc, #188]	; (8008470 <USB_SetTurnaroundTime+0x12c>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d906      	bls.n	80083c6 <USB_SetTurnaroundTime+0x82>
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	4a2e      	ldr	r2, [pc, #184]	; (8008474 <USB_SetTurnaroundTime+0x130>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d802      	bhi.n	80083c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80083c0:	230b      	movs	r3, #11
 80083c2:	617b      	str	r3, [r7, #20]
 80083c4:	e036      	b.n	8008434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	4a2a      	ldr	r2, [pc, #168]	; (8008474 <USB_SetTurnaroundTime+0x130>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d906      	bls.n	80083dc <USB_SetTurnaroundTime+0x98>
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	4a29      	ldr	r2, [pc, #164]	; (8008478 <USB_SetTurnaroundTime+0x134>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d802      	bhi.n	80083dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80083d6:	230a      	movs	r3, #10
 80083d8:	617b      	str	r3, [r7, #20]
 80083da:	e02b      	b.n	8008434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	4a26      	ldr	r2, [pc, #152]	; (8008478 <USB_SetTurnaroundTime+0x134>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d906      	bls.n	80083f2 <USB_SetTurnaroundTime+0xae>
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	4a25      	ldr	r2, [pc, #148]	; (800847c <USB_SetTurnaroundTime+0x138>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d202      	bcs.n	80083f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80083ec:	2309      	movs	r3, #9
 80083ee:	617b      	str	r3, [r7, #20]
 80083f0:	e020      	b.n	8008434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	4a21      	ldr	r2, [pc, #132]	; (800847c <USB_SetTurnaroundTime+0x138>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d306      	bcc.n	8008408 <USB_SetTurnaroundTime+0xc4>
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	4a20      	ldr	r2, [pc, #128]	; (8008480 <USB_SetTurnaroundTime+0x13c>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d802      	bhi.n	8008408 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008402:	2308      	movs	r3, #8
 8008404:	617b      	str	r3, [r7, #20]
 8008406:	e015      	b.n	8008434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	4a1d      	ldr	r2, [pc, #116]	; (8008480 <USB_SetTurnaroundTime+0x13c>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d906      	bls.n	800841e <USB_SetTurnaroundTime+0xda>
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	4a1c      	ldr	r2, [pc, #112]	; (8008484 <USB_SetTurnaroundTime+0x140>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d202      	bcs.n	800841e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008418:	2307      	movs	r3, #7
 800841a:	617b      	str	r3, [r7, #20]
 800841c:	e00a      	b.n	8008434 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800841e:	2306      	movs	r3, #6
 8008420:	617b      	str	r3, [r7, #20]
 8008422:	e007      	b.n	8008434 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008424:	79fb      	ldrb	r3, [r7, #7]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d102      	bne.n	8008430 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800842a:	2309      	movs	r3, #9
 800842c:	617b      	str	r3, [r7, #20]
 800842e:	e001      	b.n	8008434 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008430:	2309      	movs	r3, #9
 8008432:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	68da      	ldr	r2, [r3, #12]
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	029b      	lsls	r3, r3, #10
 8008448:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800844c:	431a      	orrs	r2, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	371c      	adds	r7, #28
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr
 8008460:	00d8acbf 	.word	0x00d8acbf
 8008464:	00e4e1c0 	.word	0x00e4e1c0
 8008468:	00f42400 	.word	0x00f42400
 800846c:	01067380 	.word	0x01067380
 8008470:	011a499f 	.word	0x011a499f
 8008474:	01312cff 	.word	0x01312cff
 8008478:	014ca43f 	.word	0x014ca43f
 800847c:	016e3600 	.word	0x016e3600
 8008480:	01a6ab1f 	.word	0x01a6ab1f
 8008484:	01e84800 	.word	0x01e84800

08008488 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008492:	2300      	movs	r3, #0
 8008494:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	019b      	lsls	r3, r3, #6
 800849a:	f043 0220 	orr.w	r2, r3, #32
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	3301      	adds	r3, #1
 80084a6:	60fb      	str	r3, [r7, #12]
 80084a8:	4a08      	ldr	r2, [pc, #32]	; (80084cc <USB_FlushTxFifo+0x44>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d901      	bls.n	80084b2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e006      	b.n	80084c0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	f003 0320 	and.w	r3, r3, #32
 80084ba:	2b20      	cmp	r3, #32
 80084bc:	d0f1      	beq.n	80084a2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3714      	adds	r7, #20
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr
 80084cc:	00030d40 	.word	0x00030d40

080084d0 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b087      	sub	sp, #28
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	f003 0306 	and.w	r3, r3, #6
 80084e8:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d102      	bne.n	80084f6 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80084f0:	2300      	movs	r3, #0
 80084f2:	75fb      	strb	r3, [r7, #23]
 80084f4:	e00a      	b.n	800850c <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d002      	beq.n	8008502 <USB_GetDevSpeed+0x32>
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2b06      	cmp	r3, #6
 8008500:	d102      	bne.n	8008508 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008502:	2302      	movs	r3, #2
 8008504:	75fb      	strb	r3, [r7, #23]
 8008506:	e001      	b.n	800850c <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008508:	230f      	movs	r3, #15
 800850a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800850c:	7dfb      	ldrb	r3, [r7, #23]
}
 800850e:	4618      	mov	r0, r3
 8008510:	371c      	adds	r7, #28
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800851a:	b480      	push	{r7}
 800851c:	b085      	sub	sp, #20
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
 8008522:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	785b      	ldrb	r3, [r3, #1]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d13a      	bne.n	80085ac <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800853c:	69da      	ldr	r2, [r3, #28]
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	f003 030f 	and.w	r3, r3, #15
 8008546:	2101      	movs	r1, #1
 8008548:	fa01 f303 	lsl.w	r3, r1, r3
 800854c:	b29b      	uxth	r3, r3
 800854e:	68f9      	ldr	r1, [r7, #12]
 8008550:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008554:	4313      	orrs	r3, r2
 8008556:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	015a      	lsls	r2, r3, #5
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	4413      	add	r3, r2
 8008560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d155      	bne.n	800861a <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	015a      	lsls	r2, r3, #5
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	4413      	add	r3, r2
 8008576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	78db      	ldrb	r3, [r3, #3]
 8008588:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800858a:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	059b      	lsls	r3, r3, #22
 8008590:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008592:	4313      	orrs	r3, r2
 8008594:	68ba      	ldr	r2, [r7, #8]
 8008596:	0151      	lsls	r1, r2, #5
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	440a      	add	r2, r1
 800859c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085a8:	6013      	str	r3, [r2, #0]
 80085aa:	e036      	b.n	800861a <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085b2:	69da      	ldr	r2, [r3, #28]
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	f003 030f 	and.w	r3, r3, #15
 80085bc:	2101      	movs	r1, #1
 80085be:	fa01 f303 	lsl.w	r3, r1, r3
 80085c2:	041b      	lsls	r3, r3, #16
 80085c4:	68f9      	ldr	r1, [r7, #12]
 80085c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085ca:	4313      	orrs	r3, r2
 80085cc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	015a      	lsls	r2, r3, #5
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	4413      	add	r3, r2
 80085d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d11a      	bne.n	800861a <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	015a      	lsls	r2, r3, #5
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	4413      	add	r3, r2
 80085ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	78db      	ldrb	r3, [r3, #3]
 80085fe:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008600:	430b      	orrs	r3, r1
 8008602:	4313      	orrs	r3, r2
 8008604:	68ba      	ldr	r2, [r7, #8]
 8008606:	0151      	lsls	r1, r2, #5
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	440a      	add	r2, r1
 800860c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008614:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008618:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3714      	adds	r7, #20
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b08a      	sub	sp, #40	; 0x28
 800862c:	af02      	add	r7, sp, #8
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	4613      	mov	r3, r2
 8008634:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	785b      	ldrb	r3, [r3, #1]
 8008644:	2b01      	cmp	r3, #1
 8008646:	f040 815c 	bne.w	8008902 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d132      	bne.n	80086b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	015a      	lsls	r2, r3, #5
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	4413      	add	r3, r2
 800865a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	69ba      	ldr	r2, [r7, #24]
 8008662:	0151      	lsls	r1, r2, #5
 8008664:	69fa      	ldr	r2, [r7, #28]
 8008666:	440a      	add	r2, r1
 8008668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800866c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008670:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008674:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	015a      	lsls	r2, r3, #5
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	4413      	add	r3, r2
 800867e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	69ba      	ldr	r2, [r7, #24]
 8008686:	0151      	lsls	r1, r2, #5
 8008688:	69fa      	ldr	r2, [r7, #28]
 800868a:	440a      	add	r2, r1
 800868c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008690:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008694:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	015a      	lsls	r2, r3, #5
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	4413      	add	r3, r2
 800869e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	69ba      	ldr	r2, [r7, #24]
 80086a6:	0151      	lsls	r1, r2, #5
 80086a8:	69fa      	ldr	r2, [r7, #28]
 80086aa:	440a      	add	r2, r1
 80086ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086b0:	0cdb      	lsrs	r3, r3, #19
 80086b2:	04db      	lsls	r3, r3, #19
 80086b4:	6113      	str	r3, [r2, #16]
 80086b6:	e074      	b.n	80087a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	015a      	lsls	r2, r3, #5
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	4413      	add	r3, r2
 80086c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	69ba      	ldr	r2, [r7, #24]
 80086c8:	0151      	lsls	r1, r2, #5
 80086ca:	69fa      	ldr	r2, [r7, #28]
 80086cc:	440a      	add	r2, r1
 80086ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086d2:	0cdb      	lsrs	r3, r3, #19
 80086d4:	04db      	lsls	r3, r3, #19
 80086d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	015a      	lsls	r2, r3, #5
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	4413      	add	r3, r2
 80086e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	69ba      	ldr	r2, [r7, #24]
 80086e8:	0151      	lsls	r1, r2, #5
 80086ea:	69fa      	ldr	r2, [r7, #28]
 80086ec:	440a      	add	r2, r1
 80086ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80086f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80086fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	015a      	lsls	r2, r3, #5
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	4413      	add	r3, r2
 8008704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008708:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	6959      	ldr	r1, [r3, #20]
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	440b      	add	r3, r1
 8008714:	1e59      	subs	r1, r3, #1
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	fbb1 f3f3 	udiv	r3, r1, r3
 800871e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008720:	4b9d      	ldr	r3, [pc, #628]	; (8008998 <USB_EPStartXfer+0x370>)
 8008722:	400b      	ands	r3, r1
 8008724:	69b9      	ldr	r1, [r7, #24]
 8008726:	0148      	lsls	r0, r1, #5
 8008728:	69f9      	ldr	r1, [r7, #28]
 800872a:	4401      	add	r1, r0
 800872c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008730:	4313      	orrs	r3, r2
 8008732:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	015a      	lsls	r2, r3, #5
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	4413      	add	r3, r2
 800873c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008740:	691a      	ldr	r2, [r3, #16]
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	695b      	ldr	r3, [r3, #20]
 8008746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800874a:	69b9      	ldr	r1, [r7, #24]
 800874c:	0148      	lsls	r0, r1, #5
 800874e:	69f9      	ldr	r1, [r7, #28]
 8008750:	4401      	add	r1, r0
 8008752:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008756:	4313      	orrs	r3, r2
 8008758:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	78db      	ldrb	r3, [r3, #3]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d11f      	bne.n	80087a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	015a      	lsls	r2, r3, #5
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	4413      	add	r3, r2
 800876a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	69ba      	ldr	r2, [r7, #24]
 8008772:	0151      	lsls	r1, r2, #5
 8008774:	69fa      	ldr	r2, [r7, #28]
 8008776:	440a      	add	r2, r1
 8008778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800877c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008780:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	015a      	lsls	r2, r3, #5
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	4413      	add	r3, r2
 800878a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	69ba      	ldr	r2, [r7, #24]
 8008792:	0151      	lsls	r1, r2, #5
 8008794:	69fa      	ldr	r2, [r7, #28]
 8008796:	440a      	add	r2, r1
 8008798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800879c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80087a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80087a2:	79fb      	ldrb	r3, [r7, #7]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d14b      	bne.n	8008840 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d009      	beq.n	80087c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	015a      	lsls	r2, r3, #5
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	4413      	add	r3, r2
 80087b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087bc:	461a      	mov	r2, r3
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	78db      	ldrb	r3, [r3, #3]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d128      	bne.n	800881e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d110      	bne.n	80087fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	015a      	lsls	r2, r3, #5
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	4413      	add	r3, r2
 80087e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	69ba      	ldr	r2, [r7, #24]
 80087ec:	0151      	lsls	r1, r2, #5
 80087ee:	69fa      	ldr	r2, [r7, #28]
 80087f0:	440a      	add	r2, r1
 80087f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80087fa:	6013      	str	r3, [r2, #0]
 80087fc:	e00f      	b.n	800881e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	015a      	lsls	r2, r3, #5
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	4413      	add	r3, r2
 8008806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	69ba      	ldr	r2, [r7, #24]
 800880e:	0151      	lsls	r1, r2, #5
 8008810:	69fa      	ldr	r2, [r7, #28]
 8008812:	440a      	add	r2, r1
 8008814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800881c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	015a      	lsls	r2, r3, #5
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	4413      	add	r3, r2
 8008826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	69ba      	ldr	r2, [r7, #24]
 800882e:	0151      	lsls	r1, r2, #5
 8008830:	69fa      	ldr	r2, [r7, #28]
 8008832:	440a      	add	r2, r1
 8008834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008838:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800883c:	6013      	str	r3, [r2, #0]
 800883e:	e12f      	b.n	8008aa0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	015a      	lsls	r2, r3, #5
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	4413      	add	r3, r2
 8008848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	69ba      	ldr	r2, [r7, #24]
 8008850:	0151      	lsls	r1, r2, #5
 8008852:	69fa      	ldr	r2, [r7, #28]
 8008854:	440a      	add	r2, r1
 8008856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800885a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800885e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	78db      	ldrb	r3, [r3, #3]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d015      	beq.n	8008894 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	695b      	ldr	r3, [r3, #20]
 800886c:	2b00      	cmp	r3, #0
 800886e:	f000 8117 	beq.w	8008aa0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008872:	69fb      	ldr	r3, [r7, #28]
 8008874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	f003 030f 	and.w	r3, r3, #15
 8008882:	2101      	movs	r1, #1
 8008884:	fa01 f303 	lsl.w	r3, r1, r3
 8008888:	69f9      	ldr	r1, [r7, #28]
 800888a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800888e:	4313      	orrs	r3, r2
 8008890:	634b      	str	r3, [r1, #52]	; 0x34
 8008892:	e105      	b.n	8008aa0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d110      	bne.n	80088c6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	015a      	lsls	r2, r3, #5
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	4413      	add	r3, r2
 80088ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	69ba      	ldr	r2, [r7, #24]
 80088b4:	0151      	lsls	r1, r2, #5
 80088b6:	69fa      	ldr	r2, [r7, #28]
 80088b8:	440a      	add	r2, r1
 80088ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80088c2:	6013      	str	r3, [r2, #0]
 80088c4:	e00f      	b.n	80088e6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	015a      	lsls	r2, r3, #5
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	4413      	add	r3, r2
 80088ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	69ba      	ldr	r2, [r7, #24]
 80088d6:	0151      	lsls	r1, r2, #5
 80088d8:	69fa      	ldr	r2, [r7, #28]
 80088da:	440a      	add	r2, r1
 80088dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088e4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	68d9      	ldr	r1, [r3, #12]
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	781a      	ldrb	r2, [r3, #0]
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	695b      	ldr	r3, [r3, #20]
 80088f2:	b298      	uxth	r0, r3
 80088f4:	79fb      	ldrb	r3, [r7, #7]
 80088f6:	9300      	str	r3, [sp, #0]
 80088f8:	4603      	mov	r3, r0
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f000 fa2b 	bl	8008d56 <USB_WritePacket>
 8008900:	e0ce      	b.n	8008aa0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	015a      	lsls	r2, r3, #5
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	4413      	add	r3, r2
 800890a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	69ba      	ldr	r2, [r7, #24]
 8008912:	0151      	lsls	r1, r2, #5
 8008914:	69fa      	ldr	r2, [r7, #28]
 8008916:	440a      	add	r2, r1
 8008918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800891c:	0cdb      	lsrs	r3, r3, #19
 800891e:	04db      	lsls	r3, r3, #19
 8008920:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	015a      	lsls	r2, r3, #5
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	4413      	add	r3, r2
 800892a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	69ba      	ldr	r2, [r7, #24]
 8008932:	0151      	lsls	r1, r2, #5
 8008934:	69fa      	ldr	r2, [r7, #28]
 8008936:	440a      	add	r2, r1
 8008938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800893c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008940:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008944:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	695b      	ldr	r3, [r3, #20]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d126      	bne.n	800899c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	015a      	lsls	r2, r3, #5
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	4413      	add	r3, r2
 8008956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800895a:	691a      	ldr	r2, [r3, #16]
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008964:	69b9      	ldr	r1, [r7, #24]
 8008966:	0148      	lsls	r0, r1, #5
 8008968:	69f9      	ldr	r1, [r7, #28]
 800896a:	4401      	add	r1, r0
 800896c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008970:	4313      	orrs	r3, r2
 8008972:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	015a      	lsls	r2, r3, #5
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	4413      	add	r3, r2
 800897c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008980:	691b      	ldr	r3, [r3, #16]
 8008982:	69ba      	ldr	r2, [r7, #24]
 8008984:	0151      	lsls	r1, r2, #5
 8008986:	69fa      	ldr	r2, [r7, #28]
 8008988:	440a      	add	r2, r1
 800898a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800898e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008992:	6113      	str	r3, [r2, #16]
 8008994:	e036      	b.n	8008a04 <USB_EPStartXfer+0x3dc>
 8008996:	bf00      	nop
 8008998:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	695a      	ldr	r2, [r3, #20]
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	4413      	add	r3, r2
 80089a6:	1e5a      	subs	r2, r3, #1
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80089b0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	015a      	lsls	r2, r3, #5
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	4413      	add	r3, r2
 80089ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089be:	691a      	ldr	r2, [r3, #16]
 80089c0:	8afb      	ldrh	r3, [r7, #22]
 80089c2:	04d9      	lsls	r1, r3, #19
 80089c4:	4b39      	ldr	r3, [pc, #228]	; (8008aac <USB_EPStartXfer+0x484>)
 80089c6:	400b      	ands	r3, r1
 80089c8:	69b9      	ldr	r1, [r7, #24]
 80089ca:	0148      	lsls	r0, r1, #5
 80089cc:	69f9      	ldr	r1, [r7, #28]
 80089ce:	4401      	add	r1, r0
 80089d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80089d4:	4313      	orrs	r3, r2
 80089d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	015a      	lsls	r2, r3, #5
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	4413      	add	r3, r2
 80089e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089e4:	691a      	ldr	r2, [r3, #16]
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	8af9      	ldrh	r1, [r7, #22]
 80089ec:	fb01 f303 	mul.w	r3, r1, r3
 80089f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089f4:	69b9      	ldr	r1, [r7, #24]
 80089f6:	0148      	lsls	r0, r1, #5
 80089f8:	69f9      	ldr	r1, [r7, #28]
 80089fa:	4401      	add	r1, r0
 80089fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008a00:	4313      	orrs	r3, r2
 8008a02:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008a04:	79fb      	ldrb	r3, [r7, #7]
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d10d      	bne.n	8008a26 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d009      	beq.n	8008a26 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	68d9      	ldr	r1, [r3, #12]
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	015a      	lsls	r2, r3, #5
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a22:	460a      	mov	r2, r1
 8008a24:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	78db      	ldrb	r3, [r3, #3]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d128      	bne.n	8008a80 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d110      	bne.n	8008a60 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	015a      	lsls	r2, r3, #5
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	4413      	add	r3, r2
 8008a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	69ba      	ldr	r2, [r7, #24]
 8008a4e:	0151      	lsls	r1, r2, #5
 8008a50:	69fa      	ldr	r2, [r7, #28]
 8008a52:	440a      	add	r2, r1
 8008a54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a5c:	6013      	str	r3, [r2, #0]
 8008a5e:	e00f      	b.n	8008a80 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	015a      	lsls	r2, r3, #5
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	4413      	add	r3, r2
 8008a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	69ba      	ldr	r2, [r7, #24]
 8008a70:	0151      	lsls	r1, r2, #5
 8008a72:	69fa      	ldr	r2, [r7, #28]
 8008a74:	440a      	add	r2, r1
 8008a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a7e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	015a      	lsls	r2, r3, #5
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	69ba      	ldr	r2, [r7, #24]
 8008a90:	0151      	lsls	r1, r2, #5
 8008a92:	69fa      	ldr	r2, [r7, #28]
 8008a94:	440a      	add	r2, r1
 8008a96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3720      	adds	r7, #32
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	1ff80000 	.word	0x1ff80000

08008ab0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b087      	sub	sp, #28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	4613      	mov	r3, r2
 8008abc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	785b      	ldrb	r3, [r3, #1]
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	f040 80cd 	bne.w	8008c6c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	695b      	ldr	r3, [r3, #20]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d132      	bne.n	8008b40 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	015a      	lsls	r2, r3, #5
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	0151      	lsls	r1, r2, #5
 8008aec:	697a      	ldr	r2, [r7, #20]
 8008aee:	440a      	add	r2, r1
 8008af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008af4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008af8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008afc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	015a      	lsls	r2, r3, #5
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	4413      	add	r3, r2
 8008b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	693a      	ldr	r2, [r7, #16]
 8008b0e:	0151      	lsls	r1, r2, #5
 8008b10:	697a      	ldr	r2, [r7, #20]
 8008b12:	440a      	add	r2, r1
 8008b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	015a      	lsls	r2, r3, #5
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	4413      	add	r3, r2
 8008b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b2a:	691b      	ldr	r3, [r3, #16]
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	0151      	lsls	r1, r2, #5
 8008b30:	697a      	ldr	r2, [r7, #20]
 8008b32:	440a      	add	r2, r1
 8008b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b38:	0cdb      	lsrs	r3, r3, #19
 8008b3a:	04db      	lsls	r3, r3, #19
 8008b3c:	6113      	str	r3, [r2, #16]
 8008b3e:	e04e      	b.n	8008bde <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	015a      	lsls	r2, r3, #5
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	4413      	add	r3, r2
 8008b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	0151      	lsls	r1, r2, #5
 8008b52:	697a      	ldr	r2, [r7, #20]
 8008b54:	440a      	add	r2, r1
 8008b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b5a:	0cdb      	lsrs	r3, r3, #19
 8008b5c:	04db      	lsls	r3, r3, #19
 8008b5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	015a      	lsls	r2, r3, #5
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	4413      	add	r3, r2
 8008b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	693a      	ldr	r2, [r7, #16]
 8008b70:	0151      	lsls	r1, r2, #5
 8008b72:	697a      	ldr	r2, [r7, #20]
 8008b74:	440a      	add	r2, r1
 8008b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008b7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008b82:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	695a      	ldr	r2, [r3, #20]
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d903      	bls.n	8008b98 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	689a      	ldr	r2, [r3, #8]
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	015a      	lsls	r2, r3, #5
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	693a      	ldr	r2, [r7, #16]
 8008ba8:	0151      	lsls	r1, r2, #5
 8008baa:	697a      	ldr	r2, [r7, #20]
 8008bac:	440a      	add	r2, r1
 8008bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008bb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	015a      	lsls	r2, r3, #5
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc4:	691a      	ldr	r2, [r3, #16]
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	695b      	ldr	r3, [r3, #20]
 8008bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bce:	6939      	ldr	r1, [r7, #16]
 8008bd0:	0148      	lsls	r0, r1, #5
 8008bd2:	6979      	ldr	r1, [r7, #20]
 8008bd4:	4401      	add	r1, r0
 8008bd6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008bde:	79fb      	ldrb	r3, [r7, #7]
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d11e      	bne.n	8008c22 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	691b      	ldr	r3, [r3, #16]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d009      	beq.n	8008c00 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	015a      	lsls	r2, r3, #5
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	693a      	ldr	r2, [r7, #16]
 8008c10:	0151      	lsls	r1, r2, #5
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	440a      	add	r2, r1
 8008c16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c1e:	6013      	str	r3, [r2, #0]
 8008c20:	e092      	b.n	8008d48 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	015a      	lsls	r2, r3, #5
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	4413      	add	r3, r2
 8008c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	693a      	ldr	r2, [r7, #16]
 8008c32:	0151      	lsls	r1, r2, #5
 8008c34:	697a      	ldr	r2, [r7, #20]
 8008c36:	440a      	add	r2, r1
 8008c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c40:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	695b      	ldr	r3, [r3, #20]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d07e      	beq.n	8008d48 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	f003 030f 	and.w	r3, r3, #15
 8008c5a:	2101      	movs	r1, #1
 8008c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8008c60:	6979      	ldr	r1, [r7, #20]
 8008c62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c66:	4313      	orrs	r3, r2
 8008c68:	634b      	str	r3, [r1, #52]	; 0x34
 8008c6a:	e06d      	b.n	8008d48 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	015a      	lsls	r2, r3, #5
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	4413      	add	r3, r2
 8008c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	693a      	ldr	r2, [r7, #16]
 8008c7c:	0151      	lsls	r1, r2, #5
 8008c7e:	697a      	ldr	r2, [r7, #20]
 8008c80:	440a      	add	r2, r1
 8008c82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c86:	0cdb      	lsrs	r3, r3, #19
 8008c88:	04db      	lsls	r3, r3, #19
 8008c8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	015a      	lsls	r2, r3, #5
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	4413      	add	r3, r2
 8008c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	693a      	ldr	r2, [r7, #16]
 8008c9c:	0151      	lsls	r1, r2, #5
 8008c9e:	697a      	ldr	r2, [r7, #20]
 8008ca0:	440a      	add	r2, r1
 8008ca2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ca6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008caa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008cae:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	695b      	ldr	r3, [r3, #20]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d003      	beq.n	8008cc0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	689a      	ldr	r2, [r3, #8]
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	015a      	lsls	r2, r3, #5
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	0151      	lsls	r1, r2, #5
 8008cd2:	697a      	ldr	r2, [r7, #20]
 8008cd4:	440a      	add	r2, r1
 8008cd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	015a      	lsls	r2, r3, #5
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cec:	691a      	ldr	r2, [r3, #16]
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cf6:	6939      	ldr	r1, [r7, #16]
 8008cf8:	0148      	lsls	r0, r1, #5
 8008cfa:	6979      	ldr	r1, [r7, #20]
 8008cfc:	4401      	add	r1, r0
 8008cfe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d02:	4313      	orrs	r3, r2
 8008d04:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008d06:	79fb      	ldrb	r3, [r7, #7]
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d10d      	bne.n	8008d28 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d009      	beq.n	8008d28 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	68d9      	ldr	r1, [r3, #12]
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	015a      	lsls	r2, r3, #5
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	4413      	add	r3, r2
 8008d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d24:	460a      	mov	r2, r1
 8008d26:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	015a      	lsls	r2, r3, #5
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	4413      	add	r3, r2
 8008d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	693a      	ldr	r2, [r7, #16]
 8008d38:	0151      	lsls	r1, r2, #5
 8008d3a:	697a      	ldr	r2, [r7, #20]
 8008d3c:	440a      	add	r2, r1
 8008d3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	371c      	adds	r7, #28
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008d56:	b480      	push	{r7}
 8008d58:	b089      	sub	sp, #36	; 0x24
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	60f8      	str	r0, [r7, #12]
 8008d5e:	60b9      	str	r1, [r7, #8]
 8008d60:	4611      	mov	r1, r2
 8008d62:	461a      	mov	r2, r3
 8008d64:	460b      	mov	r3, r1
 8008d66:	71fb      	strb	r3, [r7, #7]
 8008d68:	4613      	mov	r3, r2
 8008d6a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008d74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d123      	bne.n	8008dc4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008d7c:	88bb      	ldrh	r3, [r7, #4]
 8008d7e:	3303      	adds	r3, #3
 8008d80:	089b      	lsrs	r3, r3, #2
 8008d82:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008d84:	2300      	movs	r3, #0
 8008d86:	61bb      	str	r3, [r7, #24]
 8008d88:	e018      	b.n	8008dbc <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008d8a:	79fb      	ldrb	r3, [r7, #7]
 8008d8c:	031a      	lsls	r2, r3, #12
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	4413      	add	r3, r2
 8008d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d96:	461a      	mov	r2, r3
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	3301      	adds	r3, #1
 8008da2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	3301      	adds	r3, #1
 8008da8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	3301      	adds	r3, #1
 8008dae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	3301      	adds	r3, #1
 8008db4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	3301      	adds	r3, #1
 8008dba:	61bb      	str	r3, [r7, #24]
 8008dbc:	69ba      	ldr	r2, [r7, #24]
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d3e2      	bcc.n	8008d8a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3724      	adds	r7, #36	; 0x24
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b08b      	sub	sp, #44	; 0x2c
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	60f8      	str	r0, [r7, #12]
 8008dda:	60b9      	str	r1, [r7, #8]
 8008ddc:	4613      	mov	r3, r2
 8008dde:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008de8:	88fb      	ldrh	r3, [r7, #6]
 8008dea:	089b      	lsrs	r3, r3, #2
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008df0:	88fb      	ldrh	r3, [r7, #6]
 8008df2:	f003 0303 	and.w	r3, r3, #3
 8008df6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008df8:	2300      	movs	r3, #0
 8008dfa:	623b      	str	r3, [r7, #32]
 8008dfc:	e014      	b.n	8008e28 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e08:	601a      	str	r2, [r3, #0]
    pDest++;
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e12:	3301      	adds	r3, #1
 8008e14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e18:	3301      	adds	r3, #1
 8008e1a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1e:	3301      	adds	r3, #1
 8008e20:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008e22:	6a3b      	ldr	r3, [r7, #32]
 8008e24:	3301      	adds	r3, #1
 8008e26:	623b      	str	r3, [r7, #32]
 8008e28:	6a3a      	ldr	r2, [r7, #32]
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d3e6      	bcc.n	8008dfe <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008e30:	8bfb      	ldrh	r3, [r7, #30]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d01e      	beq.n	8008e74 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008e36:	2300      	movs	r3, #0
 8008e38:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e40:	461a      	mov	r2, r3
 8008e42:	f107 0310 	add.w	r3, r7, #16
 8008e46:	6812      	ldr	r2, [r2, #0]
 8008e48:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008e4a:	693a      	ldr	r2, [r7, #16]
 8008e4c:	6a3b      	ldr	r3, [r7, #32]
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	00db      	lsls	r3, r3, #3
 8008e52:	fa22 f303 	lsr.w	r3, r2, r3
 8008e56:	b2da      	uxtb	r2, r3
 8008e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5a:	701a      	strb	r2, [r3, #0]
      i++;
 8008e5c:	6a3b      	ldr	r3, [r7, #32]
 8008e5e:	3301      	adds	r3, #1
 8008e60:	623b      	str	r3, [r7, #32]
      pDest++;
 8008e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e64:	3301      	adds	r3, #1
 8008e66:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008e68:	8bfb      	ldrh	r3, [r7, #30]
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008e6e:	8bfb      	ldrh	r3, [r7, #30]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1ea      	bne.n	8008e4a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	372c      	adds	r7, #44	; 0x2c
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr

08008e82 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e82:	b480      	push	{r7}
 8008e84:	b085      	sub	sp, #20
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	785b      	ldrb	r3, [r3, #1]
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d12c      	bne.n	8008ef8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	015a      	lsls	r2, r3, #5
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	db12      	blt.n	8008ed6 <USB_EPSetStall+0x54>
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00f      	beq.n	8008ed6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	015a      	lsls	r2, r3, #5
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	0151      	lsls	r1, r2, #5
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	440a      	add	r2, r1
 8008ecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ed0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ed4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	015a      	lsls	r2, r3, #5
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	4413      	add	r3, r2
 8008ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	0151      	lsls	r1, r2, #5
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	440a      	add	r2, r1
 8008eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ef0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ef4:	6013      	str	r3, [r2, #0]
 8008ef6:	e02b      	b.n	8008f50 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	015a      	lsls	r2, r3, #5
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	4413      	add	r3, r2
 8008f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	db12      	blt.n	8008f30 <USB_EPSetStall+0xae>
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00f      	beq.n	8008f30 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	015a      	lsls	r2, r3, #5
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	4413      	add	r3, r2
 8008f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	68ba      	ldr	r2, [r7, #8]
 8008f20:	0151      	lsls	r1, r2, #5
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	440a      	add	r2, r1
 8008f26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008f2e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	015a      	lsls	r2, r3, #5
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	4413      	add	r3, r2
 8008f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	0151      	lsls	r1, r2, #5
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	440a      	add	r2, r1
 8008f46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3714      	adds	r7, #20
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b085      	sub	sp, #20
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
 8008f66:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	785b      	ldrb	r3, [r3, #1]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d128      	bne.n	8008fcc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	015a      	lsls	r2, r3, #5
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	4413      	add	r3, r2
 8008f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	0151      	lsls	r1, r2, #5
 8008f8c:	68fa      	ldr	r2, [r7, #12]
 8008f8e:	440a      	add	r2, r1
 8008f90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f98:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	78db      	ldrb	r3, [r3, #3]
 8008f9e:	2b03      	cmp	r3, #3
 8008fa0:	d003      	beq.n	8008faa <USB_EPClearStall+0x4c>
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	78db      	ldrb	r3, [r3, #3]
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	d138      	bne.n	800901c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	015a      	lsls	r2, r3, #5
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	0151      	lsls	r1, r2, #5
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	440a      	add	r2, r1
 8008fc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fc8:	6013      	str	r3, [r2, #0]
 8008fca:	e027      	b.n	800901c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	015a      	lsls	r2, r3, #5
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	0151      	lsls	r1, r2, #5
 8008fde:	68fa      	ldr	r2, [r7, #12]
 8008fe0:	440a      	add	r2, r1
 8008fe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fe6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008fea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	78db      	ldrb	r3, [r3, #3]
 8008ff0:	2b03      	cmp	r3, #3
 8008ff2:	d003      	beq.n	8008ffc <USB_EPClearStall+0x9e>
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	78db      	ldrb	r3, [r3, #3]
 8008ff8:	2b02      	cmp	r3, #2
 8008ffa:	d10f      	bne.n	800901c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	015a      	lsls	r2, r3, #5
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	4413      	add	r3, r2
 8009004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	68ba      	ldr	r2, [r7, #8]
 800900c:	0151      	lsls	r1, r2, #5
 800900e:	68fa      	ldr	r2, [r7, #12]
 8009010:	440a      	add	r2, r1
 8009012:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800901a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3714      	adds	r7, #20
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr

0800902a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800902a:	b480      	push	{r7}
 800902c:	b085      	sub	sp, #20
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	460b      	mov	r3, r1
 8009034:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009048:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800904c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	78fb      	ldrb	r3, [r7, #3]
 8009058:	011b      	lsls	r3, r3, #4
 800905a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800905e:	68f9      	ldr	r1, [r7, #12]
 8009060:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009064:	4313      	orrs	r3, r2
 8009066:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3714      	adds	r7, #20
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr

08009076 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009076:	b480      	push	{r7}
 8009078:	b085      	sub	sp, #20
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	695b      	ldr	r3, [r3, #20]
 8009082:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	699b      	ldr	r3, [r3, #24]
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	4013      	ands	r3, r2
 800908c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800908e:	68fb      	ldr	r3, [r7, #12]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3714      	adds	r7, #20
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b8:	69db      	ldr	r3, [r3, #28]
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	4013      	ands	r3, r2
 80090be:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	0c1b      	lsrs	r3, r3, #16
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3714      	adds	r7, #20
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b085      	sub	sp, #20
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ec:	69db      	ldr	r3, [r3, #28]
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	4013      	ands	r3, r2
 80090f2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	b29b      	uxth	r3, r3
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3714      	adds	r7, #20
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	460b      	mov	r3, r1
 800910e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009114:	78fb      	ldrb	r3, [r7, #3]
 8009116:	015a      	lsls	r2, r3, #5
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	4413      	add	r3, r2
 800911c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800912a:	695b      	ldr	r3, [r3, #20]
 800912c:	68ba      	ldr	r2, [r7, #8]
 800912e:	4013      	ands	r3, r2
 8009130:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009132:	68bb      	ldr	r3, [r7, #8]
}
 8009134:	4618      	mov	r0, r3
 8009136:	3714      	adds	r7, #20
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009140:	b480      	push	{r7}
 8009142:	b087      	sub	sp, #28
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	460b      	mov	r3, r1
 800914a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009156:	691b      	ldr	r3, [r3, #16]
 8009158:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009162:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009164:	78fb      	ldrb	r3, [r7, #3]
 8009166:	f003 030f 	and.w	r3, r3, #15
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	fa22 f303 	lsr.w	r3, r2, r3
 8009170:	01db      	lsls	r3, r3, #7
 8009172:	b2db      	uxtb	r3, r3
 8009174:	693a      	ldr	r2, [r7, #16]
 8009176:	4313      	orrs	r3, r2
 8009178:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800917a:	78fb      	ldrb	r3, [r7, #3]
 800917c:	015a      	lsls	r2, r3, #5
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	4413      	add	r3, r2
 8009182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	693a      	ldr	r2, [r7, #16]
 800918a:	4013      	ands	r3, r2
 800918c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800918e:	68bb      	ldr	r3, [r7, #8]
}
 8009190:	4618      	mov	r0, r3
 8009192:	371c      	adds	r7, #28
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	695b      	ldr	r3, [r3, #20]
 80091a8:	f003 0301 	and.w	r3, r3, #1
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091d2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80091d6:	f023 0307 	bic.w	r3, r3, #7
 80091da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3714      	adds	r7, #20
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
	...

08009200 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009200:	b480      	push	{r7}
 8009202:	b087      	sub	sp, #28
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	460b      	mov	r3, r1
 800920a:	607a      	str	r2, [r7, #4]
 800920c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	333c      	adds	r3, #60	; 0x3c
 8009216:	3304      	adds	r3, #4
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	4a26      	ldr	r2, [pc, #152]	; (80092b8 <USB_EP0_OutStart+0xb8>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d90a      	bls.n	800923a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009230:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009234:	d101      	bne.n	800923a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009236:	2300      	movs	r3, #0
 8009238:	e037      	b.n	80092aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009240:	461a      	mov	r2, r3
 8009242:	2300      	movs	r3, #0
 8009244:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	697a      	ldr	r2, [r7, #20]
 8009250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009254:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009258:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	697a      	ldr	r2, [r7, #20]
 8009264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009268:	f043 0318 	orr.w	r3, r3, #24
 800926c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	697a      	ldr	r2, [r7, #20]
 8009278:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800927c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009280:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009282:	7afb      	ldrb	r3, [r7, #11]
 8009284:	2b01      	cmp	r3, #1
 8009286:	d10f      	bne.n	80092a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800928e:	461a      	mov	r2, r3
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	697a      	ldr	r2, [r7, #20]
 800929e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092a2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80092a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	371c      	adds	r7, #28
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop
 80092b8:	4f54300a 	.word	0x4f54300a

080092bc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr

080092d2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b084      	sub	sp, #16
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
 80092da:	460b      	mov	r3, r1
 80092dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80092de:	2303      	movs	r3, #3
 80092e0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d009      	beq.n	8009300 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	78fa      	ldrb	r2, [r7, #3]
 80092f6:	4611      	mov	r1, r2
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	4798      	blx	r3
 80092fc:	4603      	mov	r3, r0
 80092fe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009300:	7bfb      	ldrb	r3, [r7, #15]
}
 8009302:	4618      	mov	r0, r3
 8009304:	3710      	adds	r7, #16
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b082      	sub	sp, #8
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
 8009312:	460b      	mov	r3, r1
 8009314:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800931c:	2b00      	cmp	r3, #0
 800931e:	d007      	beq.n	8009330 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	78fa      	ldrb	r2, [r7, #3]
 800932a:	4611      	mov	r1, r2
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	4798      	blx	r3
  }

  return USBD_OK;
 8009330:	2300      	movs	r3, #0
}
 8009332:	4618      	mov	r0, r3
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b084      	sub	sp, #16
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	4618      	mov	r0, r3
 800934e:	f000 ff8f 	bl	800a270 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2201      	movs	r2, #1
 8009356:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009360:	461a      	mov	r2, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800936e:	f003 031f 	and.w	r3, r3, #31
 8009372:	2b02      	cmp	r3, #2
 8009374:	d01a      	beq.n	80093ac <USBD_LL_SetupStage+0x72>
 8009376:	2b02      	cmp	r3, #2
 8009378:	d822      	bhi.n	80093c0 <USBD_LL_SetupStage+0x86>
 800937a:	2b00      	cmp	r3, #0
 800937c:	d002      	beq.n	8009384 <USBD_LL_SetupStage+0x4a>
 800937e:	2b01      	cmp	r3, #1
 8009380:	d00a      	beq.n	8009398 <USBD_LL_SetupStage+0x5e>
 8009382:	e01d      	b.n	80093c0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800938a:	4619      	mov	r1, r3
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 fa61 	bl	8009854 <USBD_StdDevReq>
 8009392:	4603      	mov	r3, r0
 8009394:	73fb      	strb	r3, [r7, #15]
      break;
 8009396:	e020      	b.n	80093da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800939e:	4619      	mov	r1, r3
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 fac5 	bl	8009930 <USBD_StdItfReq>
 80093a6:	4603      	mov	r3, r0
 80093a8:	73fb      	strb	r3, [r7, #15]
      break;
 80093aa:	e016      	b.n	80093da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093b2:	4619      	mov	r1, r3
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 fb04 	bl	80099c2 <USBD_StdEPReq>
 80093ba:	4603      	mov	r3, r0
 80093bc:	73fb      	strb	r3, [r7, #15]
      break;
 80093be:	e00c      	b.n	80093da <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80093c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	4619      	mov	r1, r3
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f003 feac 	bl	800d12c <USBD_LL_StallEP>
 80093d4:	4603      	mov	r3, r0
 80093d6:	73fb      	strb	r3, [r7, #15]
      break;
 80093d8:	bf00      	nop
  }

  return ret;
 80093da:	7bfb      	ldrb	r3, [r7, #15]
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b086      	sub	sp, #24
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	460b      	mov	r3, r1
 80093ee:	607a      	str	r2, [r7, #4]
 80093f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80093f2:	7afb      	ldrb	r3, [r7, #11]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d138      	bne.n	800946a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80093fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009406:	2b03      	cmp	r3, #3
 8009408:	d14a      	bne.n	80094a0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	689a      	ldr	r2, [r3, #8]
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	429a      	cmp	r2, r3
 8009414:	d913      	bls.n	800943e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	689a      	ldr	r2, [r3, #8]
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	1ad2      	subs	r2, r2, r3
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	68da      	ldr	r2, [r3, #12]
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	4293      	cmp	r3, r2
 800942e:	bf28      	it	cs
 8009430:	4613      	movcs	r3, r2
 8009432:	461a      	mov	r2, r3
 8009434:	6879      	ldr	r1, [r7, #4]
 8009436:	68f8      	ldr	r0, [r7, #12]
 8009438:	f000 ff91 	bl	800a35e <USBD_CtlContinueRx>
 800943c:	e030      	b.n	80094a0 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009444:	b2db      	uxtb	r3, r3
 8009446:	2b03      	cmp	r3, #3
 8009448:	d10b      	bne.n	8009462 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d005      	beq.n	8009462 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f000 ff8c 	bl	800a380 <USBD_CtlSendStatus>
 8009468:	e01a      	b.n	80094a0 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009470:	b2db      	uxtb	r3, r3
 8009472:	2b03      	cmp	r3, #3
 8009474:	d114      	bne.n	80094a0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800947c:	699b      	ldr	r3, [r3, #24]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d00e      	beq.n	80094a0 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009488:	699b      	ldr	r3, [r3, #24]
 800948a:	7afa      	ldrb	r2, [r7, #11]
 800948c:	4611      	mov	r1, r2
 800948e:	68f8      	ldr	r0, [r7, #12]
 8009490:	4798      	blx	r3
 8009492:	4603      	mov	r3, r0
 8009494:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009496:	7dfb      	ldrb	r3, [r7, #23]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d001      	beq.n	80094a0 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800949c:	7dfb      	ldrb	r3, [r7, #23]
 800949e:	e000      	b.n	80094a2 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3718      	adds	r7, #24
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b086      	sub	sp, #24
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	60f8      	str	r0, [r7, #12]
 80094b2:	460b      	mov	r3, r1
 80094b4:	607a      	str	r2, [r7, #4]
 80094b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80094b8:	7afb      	ldrb	r3, [r7, #11]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d16b      	bne.n	8009596 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	3314      	adds	r3, #20
 80094c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80094ca:	2b02      	cmp	r3, #2
 80094cc:	d156      	bne.n	800957c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	689a      	ldr	r2, [r3, #8]
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d914      	bls.n	8009504 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	689a      	ldr	r2, [r3, #8]
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	1ad2      	subs	r2, r2, r3
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	461a      	mov	r2, r3
 80094ee:	6879      	ldr	r1, [r7, #4]
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f000 ff23 	bl	800a33c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094f6:	2300      	movs	r3, #0
 80094f8:	2200      	movs	r2, #0
 80094fa:	2100      	movs	r1, #0
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	f003 febf 	bl	800d280 <USBD_LL_PrepareReceive>
 8009502:	e03b      	b.n	800957c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	68da      	ldr	r2, [r3, #12]
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	429a      	cmp	r2, r3
 800950e:	d11c      	bne.n	800954a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	685a      	ldr	r2, [r3, #4]
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009518:	429a      	cmp	r2, r3
 800951a:	d316      	bcc.n	800954a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	685a      	ldr	r2, [r3, #4]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009526:	429a      	cmp	r2, r3
 8009528:	d20f      	bcs.n	800954a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800952a:	2200      	movs	r2, #0
 800952c:	2100      	movs	r1, #0
 800952e:	68f8      	ldr	r0, [r7, #12]
 8009530:	f000 ff04 	bl	800a33c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2200      	movs	r2, #0
 8009538:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800953c:	2300      	movs	r3, #0
 800953e:	2200      	movs	r2, #0
 8009540:	2100      	movs	r1, #0
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	f003 fe9c 	bl	800d280 <USBD_LL_PrepareReceive>
 8009548:	e018      	b.n	800957c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009550:	b2db      	uxtb	r3, r3
 8009552:	2b03      	cmp	r3, #3
 8009554:	d10b      	bne.n	800956e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d005      	beq.n	800956e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	68f8      	ldr	r0, [r7, #12]
 800956c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800956e:	2180      	movs	r1, #128	; 0x80
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f003 fddb 	bl	800d12c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f000 ff15 	bl	800a3a6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009582:	2b01      	cmp	r3, #1
 8009584:	d122      	bne.n	80095cc <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f7ff fe98 	bl	80092bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009594:	e01a      	b.n	80095cc <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800959c:	b2db      	uxtb	r3, r3
 800959e:	2b03      	cmp	r3, #3
 80095a0:	d114      	bne.n	80095cc <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095a8:	695b      	ldr	r3, [r3, #20]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00e      	beq.n	80095cc <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095b4:	695b      	ldr	r3, [r3, #20]
 80095b6:	7afa      	ldrb	r2, [r7, #11]
 80095b8:	4611      	mov	r1, r2
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	4798      	blx	r3
 80095be:	4603      	mov	r3, r0
 80095c0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80095c2:	7dfb      	ldrb	r3, [r7, #23]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d001      	beq.n	80095cc <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80095c8:	7dfb      	ldrb	r3, [r7, #23]
 80095ca:	e000      	b.n	80095ce <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3718      	adds	r7, #24
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b082      	sub	sp, #8
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2201      	movs	r2, #1
 80095e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2200      	movs	r2, #0
 80095f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009602:	2b00      	cmp	r3, #0
 8009604:	d101      	bne.n	800960a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009606:	2303      	movs	r3, #3
 8009608:	e02f      	b.n	800966a <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009610:	2b00      	cmp	r3, #0
 8009612:	d00f      	beq.n	8009634 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d009      	beq.n	8009634 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	6852      	ldr	r2, [r2, #4]
 800962c:	b2d2      	uxtb	r2, r2
 800962e:	4611      	mov	r1, r2
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009634:	2340      	movs	r3, #64	; 0x40
 8009636:	2200      	movs	r2, #0
 8009638:	2100      	movs	r1, #0
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f003 fd50 	bl	800d0e0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2201      	movs	r2, #1
 8009644:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2240      	movs	r2, #64	; 0x40
 800964c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009650:	2340      	movs	r3, #64	; 0x40
 8009652:	2200      	movs	r2, #0
 8009654:	2180      	movs	r1, #128	; 0x80
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f003 fd42 	bl	800d0e0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2240      	movs	r2, #64	; 0x40
 8009666:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009668:	2300      	movs	r3, #0
}
 800966a:	4618      	mov	r0, r3
 800966c:	3708      	adds	r7, #8
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009672:	b480      	push	{r7}
 8009674:	b083      	sub	sp, #12
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
 800967a:	460b      	mov	r3, r1
 800967c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	78fa      	ldrb	r2, [r7, #3]
 8009682:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	370c      	adds	r7, #12
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr

08009692 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009692:	b480      	push	{r7}
 8009694:	b083      	sub	sp, #12
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096a0:	b2da      	uxtb	r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2204      	movs	r2, #4
 80096ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	370c      	adds	r7, #12
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr

080096be <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80096be:	b480      	push	{r7}
 80096c0:	b083      	sub	sp, #12
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	2b04      	cmp	r3, #4
 80096d0:	d106      	bne.n	80096e0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80096d8:	b2da      	uxtb	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	370c      	adds	r7, #12
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr

080096ee <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b082      	sub	sp, #8
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d101      	bne.n	8009704 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009700:	2303      	movs	r3, #3
 8009702:	e012      	b.n	800972a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800970a:	b2db      	uxtb	r3, r3
 800970c:	2b03      	cmp	r3, #3
 800970e:	d10b      	bne.n	8009728 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009716:	69db      	ldr	r3, [r3, #28]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d005      	beq.n	8009728 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009722:	69db      	ldr	r3, [r3, #28]
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b082      	sub	sp, #8
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	460b      	mov	r3, r1
 800973c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009744:	2b00      	cmp	r3, #0
 8009746:	d101      	bne.n	800974c <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009748:	2303      	movs	r3, #3
 800974a:	e014      	b.n	8009776 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009752:	b2db      	uxtb	r3, r3
 8009754:	2b03      	cmp	r3, #3
 8009756:	d10d      	bne.n	8009774 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800975e:	6a1b      	ldr	r3, [r3, #32]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d007      	beq.n	8009774 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800976a:	6a1b      	ldr	r3, [r3, #32]
 800976c:	78fa      	ldrb	r2, [r7, #3]
 800976e:	4611      	mov	r1, r2
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3708      	adds	r7, #8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b082      	sub	sp, #8
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
 8009786:	460b      	mov	r3, r1
 8009788:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009790:	2b00      	cmp	r3, #0
 8009792:	d101      	bne.n	8009798 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009794:	2303      	movs	r3, #3
 8009796:	e014      	b.n	80097c2 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	2b03      	cmp	r3, #3
 80097a2:	d10d      	bne.n	80097c0 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d007      	beq.n	80097c0 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b8:	78fa      	ldrb	r2, [r7, #3]
 80097ba:	4611      	mov	r1, r2
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3708      	adds	r7, #8
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80097ca:	b480      	push	{r7}
 80097cc:	b083      	sub	sp, #12
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d009      	beq.n	800980e <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	6852      	ldr	r2, [r2, #4]
 8009806:	b2d2      	uxtb	r2, r2
 8009808:	4611      	mov	r1, r2
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	4798      	blx	r3
  }

  return USBD_OK;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009818:	b480      	push	{r7}
 800981a:	b087      	sub	sp, #28
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	3301      	adds	r3, #1
 800982e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009836:	8a3b      	ldrh	r3, [r7, #16]
 8009838:	021b      	lsls	r3, r3, #8
 800983a:	b21a      	sxth	r2, r3
 800983c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009840:	4313      	orrs	r3, r2
 8009842:	b21b      	sxth	r3, r3
 8009844:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009846:	89fb      	ldrh	r3, [r7, #14]
}
 8009848:	4618      	mov	r0, r3
 800984a:	371c      	adds	r7, #28
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800985e:	2300      	movs	r3, #0
 8009860:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800986a:	2b40      	cmp	r3, #64	; 0x40
 800986c:	d005      	beq.n	800987a <USBD_StdDevReq+0x26>
 800986e:	2b40      	cmp	r3, #64	; 0x40
 8009870:	d853      	bhi.n	800991a <USBD_StdDevReq+0xc6>
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00b      	beq.n	800988e <USBD_StdDevReq+0x3a>
 8009876:	2b20      	cmp	r3, #32
 8009878:	d14f      	bne.n	800991a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	6839      	ldr	r1, [r7, #0]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	4798      	blx	r3
 8009888:	4603      	mov	r3, r0
 800988a:	73fb      	strb	r3, [r7, #15]
      break;
 800988c:	e04a      	b.n	8009924 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	785b      	ldrb	r3, [r3, #1]
 8009892:	2b09      	cmp	r3, #9
 8009894:	d83b      	bhi.n	800990e <USBD_StdDevReq+0xba>
 8009896:	a201      	add	r2, pc, #4	; (adr r2, 800989c <USBD_StdDevReq+0x48>)
 8009898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800989c:	080098f1 	.word	0x080098f1
 80098a0:	08009905 	.word	0x08009905
 80098a4:	0800990f 	.word	0x0800990f
 80098a8:	080098fb 	.word	0x080098fb
 80098ac:	0800990f 	.word	0x0800990f
 80098b0:	080098cf 	.word	0x080098cf
 80098b4:	080098c5 	.word	0x080098c5
 80098b8:	0800990f 	.word	0x0800990f
 80098bc:	080098e7 	.word	0x080098e7
 80098c0:	080098d9 	.word	0x080098d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80098c4:	6839      	ldr	r1, [r7, #0]
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f9de 	bl	8009c88 <USBD_GetDescriptor>
          break;
 80098cc:	e024      	b.n	8009918 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80098ce:	6839      	ldr	r1, [r7, #0]
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 fb43 	bl	8009f5c <USBD_SetAddress>
          break;
 80098d6:	e01f      	b.n	8009918 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80098d8:	6839      	ldr	r1, [r7, #0]
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fb82 	bl	8009fe4 <USBD_SetConfig>
 80098e0:	4603      	mov	r3, r0
 80098e2:	73fb      	strb	r3, [r7, #15]
          break;
 80098e4:	e018      	b.n	8009918 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80098e6:	6839      	ldr	r1, [r7, #0]
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 fc21 	bl	800a130 <USBD_GetConfig>
          break;
 80098ee:	e013      	b.n	8009918 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80098f0:	6839      	ldr	r1, [r7, #0]
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fc52 	bl	800a19c <USBD_GetStatus>
          break;
 80098f8:	e00e      	b.n	8009918 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80098fa:	6839      	ldr	r1, [r7, #0]
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 fc81 	bl	800a204 <USBD_SetFeature>
          break;
 8009902:	e009      	b.n	8009918 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009904:	6839      	ldr	r1, [r7, #0]
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 fc90 	bl	800a22c <USBD_ClrFeature>
          break;
 800990c:	e004      	b.n	8009918 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800990e:	6839      	ldr	r1, [r7, #0]
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 fce7 	bl	800a2e4 <USBD_CtlError>
          break;
 8009916:	bf00      	nop
      }
      break;
 8009918:	e004      	b.n	8009924 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800991a:	6839      	ldr	r1, [r7, #0]
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 fce1 	bl	800a2e4 <USBD_CtlError>
      break;
 8009922:	bf00      	nop
  }

  return ret;
 8009924:	7bfb      	ldrb	r3, [r7, #15]
}
 8009926:	4618      	mov	r0, r3
 8009928:	3710      	adds	r7, #16
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop

08009930 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800993a:	2300      	movs	r3, #0
 800993c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009946:	2b40      	cmp	r3, #64	; 0x40
 8009948:	d005      	beq.n	8009956 <USBD_StdItfReq+0x26>
 800994a:	2b40      	cmp	r3, #64	; 0x40
 800994c:	d82f      	bhi.n	80099ae <USBD_StdItfReq+0x7e>
 800994e:	2b00      	cmp	r3, #0
 8009950:	d001      	beq.n	8009956 <USBD_StdItfReq+0x26>
 8009952:	2b20      	cmp	r3, #32
 8009954:	d12b      	bne.n	80099ae <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800995c:	b2db      	uxtb	r3, r3
 800995e:	3b01      	subs	r3, #1
 8009960:	2b02      	cmp	r3, #2
 8009962:	d81d      	bhi.n	80099a0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	889b      	ldrh	r3, [r3, #4]
 8009968:	b2db      	uxtb	r3, r3
 800996a:	2b01      	cmp	r3, #1
 800996c:	d813      	bhi.n	8009996 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	6839      	ldr	r1, [r7, #0]
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	4798      	blx	r3
 800997c:	4603      	mov	r3, r0
 800997e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	88db      	ldrh	r3, [r3, #6]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d110      	bne.n	80099aa <USBD_StdItfReq+0x7a>
 8009988:	7bfb      	ldrb	r3, [r7, #15]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d10d      	bne.n	80099aa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 fcf6 	bl	800a380 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009994:	e009      	b.n	80099aa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009996:	6839      	ldr	r1, [r7, #0]
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fca3 	bl	800a2e4 <USBD_CtlError>
          break;
 800999e:	e004      	b.n	80099aa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80099a0:	6839      	ldr	r1, [r7, #0]
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 fc9e 	bl	800a2e4 <USBD_CtlError>
          break;
 80099a8:	e000      	b.n	80099ac <USBD_StdItfReq+0x7c>
          break;
 80099aa:	bf00      	nop
      }
      break;
 80099ac:	e004      	b.n	80099b8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80099ae:	6839      	ldr	r1, [r7, #0]
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 fc97 	bl	800a2e4 <USBD_CtlError>
      break;
 80099b6:	bf00      	nop
  }

  return ret;
 80099b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b084      	sub	sp, #16
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
 80099ca:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80099cc:	2300      	movs	r3, #0
 80099ce:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	889b      	ldrh	r3, [r3, #4]
 80099d4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099de:	2b40      	cmp	r3, #64	; 0x40
 80099e0:	d007      	beq.n	80099f2 <USBD_StdEPReq+0x30>
 80099e2:	2b40      	cmp	r3, #64	; 0x40
 80099e4:	f200 8145 	bhi.w	8009c72 <USBD_StdEPReq+0x2b0>
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00c      	beq.n	8009a06 <USBD_StdEPReq+0x44>
 80099ec:	2b20      	cmp	r3, #32
 80099ee:	f040 8140 	bne.w	8009c72 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	6839      	ldr	r1, [r7, #0]
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	4798      	blx	r3
 8009a00:	4603      	mov	r3, r0
 8009a02:	73fb      	strb	r3, [r7, #15]
      break;
 8009a04:	e13a      	b.n	8009c7c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	785b      	ldrb	r3, [r3, #1]
 8009a0a:	2b03      	cmp	r3, #3
 8009a0c:	d007      	beq.n	8009a1e <USBD_StdEPReq+0x5c>
 8009a0e:	2b03      	cmp	r3, #3
 8009a10:	f300 8129 	bgt.w	8009c66 <USBD_StdEPReq+0x2a4>
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d07f      	beq.n	8009b18 <USBD_StdEPReq+0x156>
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d03c      	beq.n	8009a96 <USBD_StdEPReq+0xd4>
 8009a1c:	e123      	b.n	8009c66 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	d002      	beq.n	8009a30 <USBD_StdEPReq+0x6e>
 8009a2a:	2b03      	cmp	r3, #3
 8009a2c:	d016      	beq.n	8009a5c <USBD_StdEPReq+0x9a>
 8009a2e:	e02c      	b.n	8009a8a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a30:	7bbb      	ldrb	r3, [r7, #14]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d00d      	beq.n	8009a52 <USBD_StdEPReq+0x90>
 8009a36:	7bbb      	ldrb	r3, [r7, #14]
 8009a38:	2b80      	cmp	r3, #128	; 0x80
 8009a3a:	d00a      	beq.n	8009a52 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a3c:	7bbb      	ldrb	r3, [r7, #14]
 8009a3e:	4619      	mov	r1, r3
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f003 fb73 	bl	800d12c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a46:	2180      	movs	r1, #128	; 0x80
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f003 fb6f 	bl	800d12c <USBD_LL_StallEP>
 8009a4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a50:	e020      	b.n	8009a94 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009a52:	6839      	ldr	r1, [r7, #0]
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 fc45 	bl	800a2e4 <USBD_CtlError>
              break;
 8009a5a:	e01b      	b.n	8009a94 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	885b      	ldrh	r3, [r3, #2]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d10e      	bne.n	8009a82 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009a64:	7bbb      	ldrb	r3, [r7, #14]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d00b      	beq.n	8009a82 <USBD_StdEPReq+0xc0>
 8009a6a:	7bbb      	ldrb	r3, [r7, #14]
 8009a6c:	2b80      	cmp	r3, #128	; 0x80
 8009a6e:	d008      	beq.n	8009a82 <USBD_StdEPReq+0xc0>
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	88db      	ldrh	r3, [r3, #6]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d104      	bne.n	8009a82 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a78:	7bbb      	ldrb	r3, [r7, #14]
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f003 fb55 	bl	800d12c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 fc7c 	bl	800a380 <USBD_CtlSendStatus>

              break;
 8009a88:	e004      	b.n	8009a94 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009a8a:	6839      	ldr	r1, [r7, #0]
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fc29 	bl	800a2e4 <USBD_CtlError>
              break;
 8009a92:	bf00      	nop
          }
          break;
 8009a94:	e0ec      	b.n	8009c70 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d002      	beq.n	8009aa8 <USBD_StdEPReq+0xe6>
 8009aa2:	2b03      	cmp	r3, #3
 8009aa4:	d016      	beq.n	8009ad4 <USBD_StdEPReq+0x112>
 8009aa6:	e030      	b.n	8009b0a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009aa8:	7bbb      	ldrb	r3, [r7, #14]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00d      	beq.n	8009aca <USBD_StdEPReq+0x108>
 8009aae:	7bbb      	ldrb	r3, [r7, #14]
 8009ab0:	2b80      	cmp	r3, #128	; 0x80
 8009ab2:	d00a      	beq.n	8009aca <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ab4:	7bbb      	ldrb	r3, [r7, #14]
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f003 fb37 	bl	800d12c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009abe:	2180      	movs	r1, #128	; 0x80
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f003 fb33 	bl	800d12c <USBD_LL_StallEP>
 8009ac6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ac8:	e025      	b.n	8009b16 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009aca:	6839      	ldr	r1, [r7, #0]
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 fc09 	bl	800a2e4 <USBD_CtlError>
              break;
 8009ad2:	e020      	b.n	8009b16 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	885b      	ldrh	r3, [r3, #2]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d11b      	bne.n	8009b14 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009adc:	7bbb      	ldrb	r3, [r7, #14]
 8009ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d004      	beq.n	8009af0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009ae6:	7bbb      	ldrb	r3, [r7, #14]
 8009ae8:	4619      	mov	r1, r3
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f003 fb3d 	bl	800d16a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 fc45 	bl	800a380 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	6839      	ldr	r1, [r7, #0]
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	4798      	blx	r3
 8009b04:	4603      	mov	r3, r0
 8009b06:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009b08:	e004      	b.n	8009b14 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009b0a:	6839      	ldr	r1, [r7, #0]
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 fbe9 	bl	800a2e4 <USBD_CtlError>
              break;
 8009b12:	e000      	b.n	8009b16 <USBD_StdEPReq+0x154>
              break;
 8009b14:	bf00      	nop
          }
          break;
 8009b16:	e0ab      	b.n	8009c70 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	d002      	beq.n	8009b2a <USBD_StdEPReq+0x168>
 8009b24:	2b03      	cmp	r3, #3
 8009b26:	d032      	beq.n	8009b8e <USBD_StdEPReq+0x1cc>
 8009b28:	e097      	b.n	8009c5a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b2a:	7bbb      	ldrb	r3, [r7, #14]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d007      	beq.n	8009b40 <USBD_StdEPReq+0x17e>
 8009b30:	7bbb      	ldrb	r3, [r7, #14]
 8009b32:	2b80      	cmp	r3, #128	; 0x80
 8009b34:	d004      	beq.n	8009b40 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009b36:	6839      	ldr	r1, [r7, #0]
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 fbd3 	bl	800a2e4 <USBD_CtlError>
                break;
 8009b3e:	e091      	b.n	8009c64 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	da0b      	bge.n	8009b60 <USBD_StdEPReq+0x19e>
 8009b48:	7bbb      	ldrb	r3, [r7, #14]
 8009b4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b4e:	4613      	mov	r3, r2
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	4413      	add	r3, r2
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	3310      	adds	r3, #16
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	3304      	adds	r3, #4
 8009b5e:	e00b      	b.n	8009b78 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b60:	7bbb      	ldrb	r3, [r7, #14]
 8009b62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b66:	4613      	mov	r3, r2
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	4413      	add	r3, r2
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	4413      	add	r3, r2
 8009b76:	3304      	adds	r3, #4
 8009b78:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	2202      	movs	r2, #2
 8009b84:	4619      	mov	r1, r3
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 fbbd 	bl	800a306 <USBD_CtlSendData>
              break;
 8009b8c:	e06a      	b.n	8009c64 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009b8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	da11      	bge.n	8009bba <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009b96:	7bbb      	ldrb	r3, [r7, #14]
 8009b98:	f003 020f 	and.w	r2, r3, #15
 8009b9c:	6879      	ldr	r1, [r7, #4]
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	4413      	add	r3, r2
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	440b      	add	r3, r1
 8009ba8:	3324      	adds	r3, #36	; 0x24
 8009baa:	881b      	ldrh	r3, [r3, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d117      	bne.n	8009be0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009bb0:	6839      	ldr	r1, [r7, #0]
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 fb96 	bl	800a2e4 <USBD_CtlError>
                  break;
 8009bb8:	e054      	b.n	8009c64 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009bba:	7bbb      	ldrb	r3, [r7, #14]
 8009bbc:	f003 020f 	and.w	r2, r3, #15
 8009bc0:	6879      	ldr	r1, [r7, #4]
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	4413      	add	r3, r2
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	440b      	add	r3, r1
 8009bcc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009bd0:	881b      	ldrh	r3, [r3, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d104      	bne.n	8009be0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009bd6:	6839      	ldr	r1, [r7, #0]
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 fb83 	bl	800a2e4 <USBD_CtlError>
                  break;
 8009bde:	e041      	b.n	8009c64 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009be0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	da0b      	bge.n	8009c00 <USBD_StdEPReq+0x23e>
 8009be8:	7bbb      	ldrb	r3, [r7, #14]
 8009bea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bee:	4613      	mov	r3, r2
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	4413      	add	r3, r2
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	3310      	adds	r3, #16
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	3304      	adds	r3, #4
 8009bfe:	e00b      	b.n	8009c18 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c00:	7bbb      	ldrb	r3, [r7, #14]
 8009c02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c06:	4613      	mov	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4413      	add	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	4413      	add	r3, r2
 8009c16:	3304      	adds	r3, #4
 8009c18:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009c1a:	7bbb      	ldrb	r3, [r7, #14]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d002      	beq.n	8009c26 <USBD_StdEPReq+0x264>
 8009c20:	7bbb      	ldrb	r3, [r7, #14]
 8009c22:	2b80      	cmp	r3, #128	; 0x80
 8009c24:	d103      	bne.n	8009c2e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	601a      	str	r2, [r3, #0]
 8009c2c:	e00e      	b.n	8009c4c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009c2e:	7bbb      	ldrb	r3, [r7, #14]
 8009c30:	4619      	mov	r1, r3
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f003 fab8 	bl	800d1a8 <USBD_LL_IsStallEP>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d003      	beq.n	8009c46 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	2201      	movs	r2, #1
 8009c42:	601a      	str	r2, [r3, #0]
 8009c44:	e002      	b.n	8009c4c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	2202      	movs	r2, #2
 8009c50:	4619      	mov	r1, r3
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 fb57 	bl	800a306 <USBD_CtlSendData>
              break;
 8009c58:	e004      	b.n	8009c64 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009c5a:	6839      	ldr	r1, [r7, #0]
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 fb41 	bl	800a2e4 <USBD_CtlError>
              break;
 8009c62:	bf00      	nop
          }
          break;
 8009c64:	e004      	b.n	8009c70 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009c66:	6839      	ldr	r1, [r7, #0]
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fb3b 	bl	800a2e4 <USBD_CtlError>
          break;
 8009c6e:	bf00      	nop
      }
      break;
 8009c70:	e004      	b.n	8009c7c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009c72:	6839      	ldr	r1, [r7, #0]
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 fb35 	bl	800a2e4 <USBD_CtlError>
      break;
 8009c7a:	bf00      	nop
  }

  return ret;
 8009c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
	...

08009c88 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009c92:	2300      	movs	r3, #0
 8009c94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009c96:	2300      	movs	r3, #0
 8009c98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	885b      	ldrh	r3, [r3, #2]
 8009ca2:	0a1b      	lsrs	r3, r3, #8
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	2b06      	cmp	r3, #6
 8009caa:	f200 8128 	bhi.w	8009efe <USBD_GetDescriptor+0x276>
 8009cae:	a201      	add	r2, pc, #4	; (adr r2, 8009cb4 <USBD_GetDescriptor+0x2c>)
 8009cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb4:	08009cd1 	.word	0x08009cd1
 8009cb8:	08009ce9 	.word	0x08009ce9
 8009cbc:	08009d29 	.word	0x08009d29
 8009cc0:	08009eff 	.word	0x08009eff
 8009cc4:	08009eff 	.word	0x08009eff
 8009cc8:	08009e9f 	.word	0x08009e9f
 8009ccc:	08009ecb 	.word	0x08009ecb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	7c12      	ldrb	r2, [r2, #16]
 8009cdc:	f107 0108 	add.w	r1, r7, #8
 8009ce0:	4610      	mov	r0, r2
 8009ce2:	4798      	blx	r3
 8009ce4:	60f8      	str	r0, [r7, #12]
      break;
 8009ce6:	e112      	b.n	8009f0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	7c1b      	ldrb	r3, [r3, #16]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d10d      	bne.n	8009d0c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cf8:	f107 0208 	add.w	r2, r7, #8
 8009cfc:	4610      	mov	r0, r2
 8009cfe:	4798      	blx	r3
 8009d00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	3301      	adds	r3, #1
 8009d06:	2202      	movs	r2, #2
 8009d08:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009d0a:	e100      	b.n	8009f0e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d14:	f107 0208 	add.w	r2, r7, #8
 8009d18:	4610      	mov	r0, r2
 8009d1a:	4798      	blx	r3
 8009d1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	3301      	adds	r3, #1
 8009d22:	2202      	movs	r2, #2
 8009d24:	701a      	strb	r2, [r3, #0]
      break;
 8009d26:	e0f2      	b.n	8009f0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	885b      	ldrh	r3, [r3, #2]
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	2b05      	cmp	r3, #5
 8009d30:	f200 80ac 	bhi.w	8009e8c <USBD_GetDescriptor+0x204>
 8009d34:	a201      	add	r2, pc, #4	; (adr r2, 8009d3c <USBD_GetDescriptor+0xb4>)
 8009d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d3a:	bf00      	nop
 8009d3c:	08009d55 	.word	0x08009d55
 8009d40:	08009d89 	.word	0x08009d89
 8009d44:	08009dbd 	.word	0x08009dbd
 8009d48:	08009df1 	.word	0x08009df1
 8009d4c:	08009e25 	.word	0x08009e25
 8009d50:	08009e59 	.word	0x08009e59
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d00b      	beq.n	8009d78 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	7c12      	ldrb	r2, [r2, #16]
 8009d6c:	f107 0108 	add.w	r1, r7, #8
 8009d70:	4610      	mov	r0, r2
 8009d72:	4798      	blx	r3
 8009d74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d76:	e091      	b.n	8009e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d78:	6839      	ldr	r1, [r7, #0]
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 fab2 	bl	800a2e4 <USBD_CtlError>
            err++;
 8009d80:	7afb      	ldrb	r3, [r7, #11]
 8009d82:	3301      	adds	r3, #1
 8009d84:	72fb      	strb	r3, [r7, #11]
          break;
 8009d86:	e089      	b.n	8009e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d00b      	beq.n	8009dac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	7c12      	ldrb	r2, [r2, #16]
 8009da0:	f107 0108 	add.w	r1, r7, #8
 8009da4:	4610      	mov	r0, r2
 8009da6:	4798      	blx	r3
 8009da8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009daa:	e077      	b.n	8009e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009dac:	6839      	ldr	r1, [r7, #0]
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 fa98 	bl	800a2e4 <USBD_CtlError>
            err++;
 8009db4:	7afb      	ldrb	r3, [r7, #11]
 8009db6:	3301      	adds	r3, #1
 8009db8:	72fb      	strb	r3, [r7, #11]
          break;
 8009dba:	e06f      	b.n	8009e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d00b      	beq.n	8009de0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	7c12      	ldrb	r2, [r2, #16]
 8009dd4:	f107 0108 	add.w	r1, r7, #8
 8009dd8:	4610      	mov	r0, r2
 8009dda:	4798      	blx	r3
 8009ddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dde:	e05d      	b.n	8009e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009de0:	6839      	ldr	r1, [r7, #0]
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 fa7e 	bl	800a2e4 <USBD_CtlError>
            err++;
 8009de8:	7afb      	ldrb	r3, [r7, #11]
 8009dea:	3301      	adds	r3, #1
 8009dec:	72fb      	strb	r3, [r7, #11]
          break;
 8009dee:	e055      	b.n	8009e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009df6:	691b      	ldr	r3, [r3, #16]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00b      	beq.n	8009e14 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e02:	691b      	ldr	r3, [r3, #16]
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	7c12      	ldrb	r2, [r2, #16]
 8009e08:	f107 0108 	add.w	r1, r7, #8
 8009e0c:	4610      	mov	r0, r2
 8009e0e:	4798      	blx	r3
 8009e10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e12:	e043      	b.n	8009e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e14:	6839      	ldr	r1, [r7, #0]
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 fa64 	bl	800a2e4 <USBD_CtlError>
            err++;
 8009e1c:	7afb      	ldrb	r3, [r7, #11]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	72fb      	strb	r3, [r7, #11]
          break;
 8009e22:	e03b      	b.n	8009e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e2a:	695b      	ldr	r3, [r3, #20]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d00b      	beq.n	8009e48 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e36:	695b      	ldr	r3, [r3, #20]
 8009e38:	687a      	ldr	r2, [r7, #4]
 8009e3a:	7c12      	ldrb	r2, [r2, #16]
 8009e3c:	f107 0108 	add.w	r1, r7, #8
 8009e40:	4610      	mov	r0, r2
 8009e42:	4798      	blx	r3
 8009e44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e46:	e029      	b.n	8009e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e48:	6839      	ldr	r1, [r7, #0]
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 fa4a 	bl	800a2e4 <USBD_CtlError>
            err++;
 8009e50:	7afb      	ldrb	r3, [r7, #11]
 8009e52:	3301      	adds	r3, #1
 8009e54:	72fb      	strb	r3, [r7, #11]
          break;
 8009e56:	e021      	b.n	8009e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e5e:	699b      	ldr	r3, [r3, #24]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00b      	beq.n	8009e7c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e6a:	699b      	ldr	r3, [r3, #24]
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	7c12      	ldrb	r2, [r2, #16]
 8009e70:	f107 0108 	add.w	r1, r7, #8
 8009e74:	4610      	mov	r0, r2
 8009e76:	4798      	blx	r3
 8009e78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e7a:	e00f      	b.n	8009e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e7c:	6839      	ldr	r1, [r7, #0]
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 fa30 	bl	800a2e4 <USBD_CtlError>
            err++;
 8009e84:	7afb      	ldrb	r3, [r7, #11]
 8009e86:	3301      	adds	r3, #1
 8009e88:	72fb      	strb	r3, [r7, #11]
          break;
 8009e8a:	e007      	b.n	8009e9c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009e8c:	6839      	ldr	r1, [r7, #0]
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 fa28 	bl	800a2e4 <USBD_CtlError>
          err++;
 8009e94:	7afb      	ldrb	r3, [r7, #11]
 8009e96:	3301      	adds	r3, #1
 8009e98:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009e9a:	bf00      	nop
      }
      break;
 8009e9c:	e037      	b.n	8009f0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	7c1b      	ldrb	r3, [r3, #16]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d109      	bne.n	8009eba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eae:	f107 0208 	add.w	r2, r7, #8
 8009eb2:	4610      	mov	r0, r2
 8009eb4:	4798      	blx	r3
 8009eb6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009eb8:	e029      	b.n	8009f0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009eba:	6839      	ldr	r1, [r7, #0]
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 fa11 	bl	800a2e4 <USBD_CtlError>
        err++;
 8009ec2:	7afb      	ldrb	r3, [r7, #11]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	72fb      	strb	r3, [r7, #11]
      break;
 8009ec8:	e021      	b.n	8009f0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	7c1b      	ldrb	r3, [r3, #16]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d10d      	bne.n	8009eee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eda:	f107 0208 	add.w	r2, r7, #8
 8009ede:	4610      	mov	r0, r2
 8009ee0:	4798      	blx	r3
 8009ee2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	2207      	movs	r2, #7
 8009eea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009eec:	e00f      	b.n	8009f0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009eee:	6839      	ldr	r1, [r7, #0]
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 f9f7 	bl	800a2e4 <USBD_CtlError>
        err++;
 8009ef6:	7afb      	ldrb	r3, [r7, #11]
 8009ef8:	3301      	adds	r3, #1
 8009efa:	72fb      	strb	r3, [r7, #11]
      break;
 8009efc:	e007      	b.n	8009f0e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009efe:	6839      	ldr	r1, [r7, #0]
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 f9ef 	bl	800a2e4 <USBD_CtlError>
      err++;
 8009f06:	7afb      	ldrb	r3, [r7, #11]
 8009f08:	3301      	adds	r3, #1
 8009f0a:	72fb      	strb	r3, [r7, #11]
      break;
 8009f0c:	bf00      	nop
  }

  if (err != 0U)
 8009f0e:	7afb      	ldrb	r3, [r7, #11]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d11e      	bne.n	8009f52 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	88db      	ldrh	r3, [r3, #6]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d016      	beq.n	8009f4a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009f1c:	893b      	ldrh	r3, [r7, #8]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d00e      	beq.n	8009f40 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	88da      	ldrh	r2, [r3, #6]
 8009f26:	893b      	ldrh	r3, [r7, #8]
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	bf28      	it	cs
 8009f2c:	4613      	movcs	r3, r2
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009f32:	893b      	ldrh	r3, [r7, #8]
 8009f34:	461a      	mov	r2, r3
 8009f36:	68f9      	ldr	r1, [r7, #12]
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 f9e4 	bl	800a306 <USBD_CtlSendData>
 8009f3e:	e009      	b.n	8009f54 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009f40:	6839      	ldr	r1, [r7, #0]
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 f9ce 	bl	800a2e4 <USBD_CtlError>
 8009f48:	e004      	b.n	8009f54 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 fa18 	bl	800a380 <USBD_CtlSendStatus>
 8009f50:	e000      	b.n	8009f54 <USBD_GetDescriptor+0x2cc>
    return;
 8009f52:	bf00      	nop
  }
}
 8009f54:	3710      	adds	r7, #16
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop

08009f5c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	889b      	ldrh	r3, [r3, #4]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d131      	bne.n	8009fd2 <USBD_SetAddress+0x76>
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	88db      	ldrh	r3, [r3, #6]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d12d      	bne.n	8009fd2 <USBD_SetAddress+0x76>
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	885b      	ldrh	r3, [r3, #2]
 8009f7a:	2b7f      	cmp	r3, #127	; 0x7f
 8009f7c:	d829      	bhi.n	8009fd2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	885b      	ldrh	r3, [r3, #2]
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f90:	b2db      	uxtb	r3, r3
 8009f92:	2b03      	cmp	r3, #3
 8009f94:	d104      	bne.n	8009fa0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009f96:	6839      	ldr	r1, [r7, #0]
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 f9a3 	bl	800a2e4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f9e:	e01d      	b.n	8009fdc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	7bfa      	ldrb	r2, [r7, #15]
 8009fa4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
 8009faa:	4619      	mov	r1, r3
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f003 f927 	bl	800d200 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 f9e4 	bl	800a380 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009fb8:	7bfb      	ldrb	r3, [r7, #15]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d004      	beq.n	8009fc8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2202      	movs	r2, #2
 8009fc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fc6:	e009      	b.n	8009fdc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fd0:	e004      	b.n	8009fdc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009fd2:	6839      	ldr	r1, [r7, #0]
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 f985 	bl	800a2e4 <USBD_CtlError>
  }
}
 8009fda:	bf00      	nop
 8009fdc:	bf00      	nop
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	885b      	ldrh	r3, [r3, #2]
 8009ff6:	b2da      	uxtb	r2, r3
 8009ff8:	4b4c      	ldr	r3, [pc, #304]	; (800a12c <USBD_SetConfig+0x148>)
 8009ffa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ffc:	4b4b      	ldr	r3, [pc, #300]	; (800a12c <USBD_SetConfig+0x148>)
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	2b01      	cmp	r3, #1
 800a002:	d905      	bls.n	800a010 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a004:	6839      	ldr	r1, [r7, #0]
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 f96c 	bl	800a2e4 <USBD_CtlError>
    return USBD_FAIL;
 800a00c:	2303      	movs	r3, #3
 800a00e:	e088      	b.n	800a122 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a016:	b2db      	uxtb	r3, r3
 800a018:	2b02      	cmp	r3, #2
 800a01a:	d002      	beq.n	800a022 <USBD_SetConfig+0x3e>
 800a01c:	2b03      	cmp	r3, #3
 800a01e:	d025      	beq.n	800a06c <USBD_SetConfig+0x88>
 800a020:	e071      	b.n	800a106 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a022:	4b42      	ldr	r3, [pc, #264]	; (800a12c <USBD_SetConfig+0x148>)
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d01c      	beq.n	800a064 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a02a:	4b40      	ldr	r3, [pc, #256]	; (800a12c <USBD_SetConfig+0x148>)
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	461a      	mov	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a034:	4b3d      	ldr	r3, [pc, #244]	; (800a12c <USBD_SetConfig+0x148>)
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	4619      	mov	r1, r3
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f7ff f949 	bl	80092d2 <USBD_SetClassConfig>
 800a040:	4603      	mov	r3, r0
 800a042:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a044:	7bfb      	ldrb	r3, [r7, #15]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d004      	beq.n	800a054 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a04a:	6839      	ldr	r1, [r7, #0]
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 f949 	bl	800a2e4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a052:	e065      	b.n	800a120 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 f993 	bl	800a380 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2203      	movs	r2, #3
 800a05e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a062:	e05d      	b.n	800a120 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 f98b 	bl	800a380 <USBD_CtlSendStatus>
      break;
 800a06a:	e059      	b.n	800a120 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a06c:	4b2f      	ldr	r3, [pc, #188]	; (800a12c <USBD_SetConfig+0x148>)
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d112      	bne.n	800a09a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2202      	movs	r2, #2
 800a078:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a07c:	4b2b      	ldr	r3, [pc, #172]	; (800a12c <USBD_SetConfig+0x148>)
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	461a      	mov	r2, r3
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a086:	4b29      	ldr	r3, [pc, #164]	; (800a12c <USBD_SetConfig+0x148>)
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	4619      	mov	r1, r3
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f7ff f93c 	bl	800930a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 f974 	bl	800a380 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a098:	e042      	b.n	800a120 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a09a:	4b24      	ldr	r3, [pc, #144]	; (800a12c <USBD_SetConfig+0x148>)
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	461a      	mov	r2, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d02a      	beq.n	800a0fe <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f7ff f92a 	bl	800930a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a0b6:	4b1d      	ldr	r3, [pc, #116]	; (800a12c <USBD_SetConfig+0x148>)
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a0c0:	4b1a      	ldr	r3, [pc, #104]	; (800a12c <USBD_SetConfig+0x148>)
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f7ff f903 	bl	80092d2 <USBD_SetClassConfig>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a0d0:	7bfb      	ldrb	r3, [r7, #15]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00f      	beq.n	800a0f6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a0d6:	6839      	ldr	r1, [r7, #0]
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 f903 	bl	800a2e4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f7ff f90f 	bl	800930a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2202      	movs	r2, #2
 800a0f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a0f4:	e014      	b.n	800a120 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 f942 	bl	800a380 <USBD_CtlSendStatus>
      break;
 800a0fc:	e010      	b.n	800a120 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 f93e 	bl	800a380 <USBD_CtlSendStatus>
      break;
 800a104:	e00c      	b.n	800a120 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a106:	6839      	ldr	r1, [r7, #0]
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 f8eb 	bl	800a2e4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a10e:	4b07      	ldr	r3, [pc, #28]	; (800a12c <USBD_SetConfig+0x148>)
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	4619      	mov	r1, r3
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f7ff f8f8 	bl	800930a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a11a:	2303      	movs	r3, #3
 800a11c:	73fb      	strb	r3, [r7, #15]
      break;
 800a11e:	bf00      	nop
  }

  return ret;
 800a120:	7bfb      	ldrb	r3, [r7, #15]
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	20000090 	.word	0x20000090

0800a130 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	88db      	ldrh	r3, [r3, #6]
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d004      	beq.n	800a14c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a142:	6839      	ldr	r1, [r7, #0]
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 f8cd 	bl	800a2e4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a14a:	e023      	b.n	800a194 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a152:	b2db      	uxtb	r3, r3
 800a154:	2b02      	cmp	r3, #2
 800a156:	dc02      	bgt.n	800a15e <USBD_GetConfig+0x2e>
 800a158:	2b00      	cmp	r3, #0
 800a15a:	dc03      	bgt.n	800a164 <USBD_GetConfig+0x34>
 800a15c:	e015      	b.n	800a18a <USBD_GetConfig+0x5a>
 800a15e:	2b03      	cmp	r3, #3
 800a160:	d00b      	beq.n	800a17a <USBD_GetConfig+0x4a>
 800a162:	e012      	b.n	800a18a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	3308      	adds	r3, #8
 800a16e:	2201      	movs	r2, #1
 800a170:	4619      	mov	r1, r3
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 f8c7 	bl	800a306 <USBD_CtlSendData>
        break;
 800a178:	e00c      	b.n	800a194 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	3304      	adds	r3, #4
 800a17e:	2201      	movs	r2, #1
 800a180:	4619      	mov	r1, r3
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f8bf 	bl	800a306 <USBD_CtlSendData>
        break;
 800a188:	e004      	b.n	800a194 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a18a:	6839      	ldr	r1, [r7, #0]
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 f8a9 	bl	800a2e4 <USBD_CtlError>
        break;
 800a192:	bf00      	nop
}
 800a194:	bf00      	nop
 800a196:	3708      	adds	r7, #8
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	d81e      	bhi.n	800a1f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	88db      	ldrh	r3, [r3, #6]
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	d004      	beq.n	800a1c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a1bc:	6839      	ldr	r1, [r7, #0]
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 f890 	bl	800a2e4 <USBD_CtlError>
        break;
 800a1c4:	e01a      	b.n	800a1fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d005      	beq.n	800a1e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	f043 0202 	orr.w	r2, r3, #2
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	330c      	adds	r3, #12
 800a1e6:	2202      	movs	r2, #2
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 f88b 	bl	800a306 <USBD_CtlSendData>
      break;
 800a1f0:	e004      	b.n	800a1fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a1f2:	6839      	ldr	r1, [r7, #0]
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 f875 	bl	800a2e4 <USBD_CtlError>
      break;
 800a1fa:	bf00      	nop
  }
}
 800a1fc:	bf00      	nop
 800a1fe:	3708      	adds	r7, #8
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	885b      	ldrh	r3, [r3, #2]
 800a212:	2b01      	cmp	r3, #1
 800a214:	d106      	bne.n	800a224 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2201      	movs	r2, #1
 800a21a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 f8ae 	bl	800a380 <USBD_CtlSendStatus>
  }
}
 800a224:	bf00      	nop
 800a226:	3708      	adds	r7, #8
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	3b01      	subs	r3, #1
 800a240:	2b02      	cmp	r3, #2
 800a242:	d80b      	bhi.n	800a25c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	885b      	ldrh	r3, [r3, #2]
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d10c      	bne.n	800a266 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 f893 	bl	800a380 <USBD_CtlSendStatus>
      }
      break;
 800a25a:	e004      	b.n	800a266 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a25c:	6839      	ldr	r1, [r7, #0]
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 f840 	bl	800a2e4 <USBD_CtlError>
      break;
 800a264:	e000      	b.n	800a268 <USBD_ClrFeature+0x3c>
      break;
 800a266:	bf00      	nop
  }
}
 800a268:	bf00      	nop
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	781a      	ldrb	r2, [r3, #0]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	3301      	adds	r3, #1
 800a28a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	781a      	ldrb	r2, [r3, #0]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	3301      	adds	r3, #1
 800a298:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f7ff fabc 	bl	8009818 <SWAPBYTE>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a2b4:	68f8      	ldr	r0, [r7, #12]
 800a2b6:	f7ff faaf 	bl	8009818 <SWAPBYTE>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	461a      	mov	r2, r3
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a2ce:	68f8      	ldr	r0, [r7, #12]
 800a2d0:	f7ff faa2 	bl	8009818 <SWAPBYTE>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	80da      	strh	r2, [r3, #6]
}
 800a2dc:	bf00      	nop
 800a2de:	3710      	adds	r7, #16
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2ee:	2180      	movs	r1, #128	; 0x80
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f002 ff1b 	bl	800d12c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a2f6:	2100      	movs	r1, #0
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f002 ff17 	bl	800d12c <USBD_LL_StallEP>
}
 800a2fe:	bf00      	nop
 800a300:	3708      	adds	r7, #8
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}

0800a306 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a306:	b580      	push	{r7, lr}
 800a308:	b084      	sub	sp, #16
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	60f8      	str	r0, [r7, #12]
 800a30e:	60b9      	str	r1, [r7, #8]
 800a310:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2202      	movs	r2, #2
 800a316:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	68ba      	ldr	r2, [r7, #8]
 800a32a:	2100      	movs	r1, #0
 800a32c:	68f8      	ldr	r0, [r7, #12]
 800a32e:	f002 ff86 	bl	800d23e <USBD_LL_Transmit>

  return USBD_OK;
 800a332:	2300      	movs	r3, #0
}
 800a334:	4618      	mov	r0, r3
 800a336:	3710      	adds	r7, #16
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	68ba      	ldr	r2, [r7, #8]
 800a34c:	2100      	movs	r1, #0
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f002 ff75 	bl	800d23e <USBD_LL_Transmit>

  return USBD_OK;
 800a354:	2300      	movs	r3, #0
}
 800a356:	4618      	mov	r0, r3
 800a358:	3710      	adds	r7, #16
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b084      	sub	sp, #16
 800a362:	af00      	add	r7, sp, #0
 800a364:	60f8      	str	r0, [r7, #12]
 800a366:	60b9      	str	r1, [r7, #8]
 800a368:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	68ba      	ldr	r2, [r7, #8]
 800a36e:	2100      	movs	r1, #0
 800a370:	68f8      	ldr	r0, [r7, #12]
 800a372:	f002 ff85 	bl	800d280 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3710      	adds	r7, #16
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2204      	movs	r2, #4
 800a38c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a390:	2300      	movs	r3, #0
 800a392:	2200      	movs	r2, #0
 800a394:	2100      	movs	r1, #0
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f002 ff51 	bl	800d23e <USBD_LL_Transmit>

  return USBD_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	b082      	sub	sp, #8
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2205      	movs	r2, #5
 800a3b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	2100      	movs	r1, #0
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f002 ff5f 	bl	800d280 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3c2:	2300      	movs	r3, #0
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3708      	adds	r7, #8
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <__NVIC_SetPriority>:
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	6039      	str	r1, [r7, #0]
 800a3d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a3d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	db0a      	blt.n	800a3f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	b2da      	uxtb	r2, r3
 800a3e4:	490c      	ldr	r1, [pc, #48]	; (800a418 <__NVIC_SetPriority+0x4c>)
 800a3e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3ea:	0112      	lsls	r2, r2, #4
 800a3ec:	b2d2      	uxtb	r2, r2
 800a3ee:	440b      	add	r3, r1
 800a3f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a3f4:	e00a      	b.n	800a40c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	b2da      	uxtb	r2, r3
 800a3fa:	4908      	ldr	r1, [pc, #32]	; (800a41c <__NVIC_SetPriority+0x50>)
 800a3fc:	79fb      	ldrb	r3, [r7, #7]
 800a3fe:	f003 030f 	and.w	r3, r3, #15
 800a402:	3b04      	subs	r3, #4
 800a404:	0112      	lsls	r2, r2, #4
 800a406:	b2d2      	uxtb	r2, r2
 800a408:	440b      	add	r3, r1
 800a40a:	761a      	strb	r2, [r3, #24]
}
 800a40c:	bf00      	nop
 800a40e:	370c      	adds	r7, #12
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr
 800a418:	e000e100 	.word	0xe000e100
 800a41c:	e000ed00 	.word	0xe000ed00

0800a420 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a420:	b580      	push	{r7, lr}
 800a422:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a424:	4b05      	ldr	r3, [pc, #20]	; (800a43c <SysTick_Handler+0x1c>)
 800a426:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a428:	f001 fcfe 	bl	800be28 <xTaskGetSchedulerState>
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d001      	beq.n	800a436 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a432:	f002 fae9 	bl	800ca08 <xPortSysTickHandler>
  }
}
 800a436:	bf00      	nop
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop
 800a43c:	e000e010 	.word	0xe000e010

0800a440 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a440:	b580      	push	{r7, lr}
 800a442:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a444:	2100      	movs	r1, #0
 800a446:	f06f 0004 	mvn.w	r0, #4
 800a44a:	f7ff ffbf 	bl	800a3cc <__NVIC_SetPriority>
#endif
}
 800a44e:	bf00      	nop
 800a450:	bd80      	pop	{r7, pc}
	...

0800a454 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a45a:	f3ef 8305 	mrs	r3, IPSR
 800a45e:	603b      	str	r3, [r7, #0]
  return(result);
 800a460:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a462:	2b00      	cmp	r3, #0
 800a464:	d003      	beq.n	800a46e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a466:	f06f 0305 	mvn.w	r3, #5
 800a46a:	607b      	str	r3, [r7, #4]
 800a46c:	e00c      	b.n	800a488 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a46e:	4b0a      	ldr	r3, [pc, #40]	; (800a498 <osKernelInitialize+0x44>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d105      	bne.n	800a482 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a476:	4b08      	ldr	r3, [pc, #32]	; (800a498 <osKernelInitialize+0x44>)
 800a478:	2201      	movs	r2, #1
 800a47a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a47c:	2300      	movs	r3, #0
 800a47e:	607b      	str	r3, [r7, #4]
 800a480:	e002      	b.n	800a488 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a482:	f04f 33ff 	mov.w	r3, #4294967295
 800a486:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a488:	687b      	ldr	r3, [r7, #4]
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	370c      	adds	r7, #12
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr
 800a496:	bf00      	nop
 800a498:	20000094 	.word	0x20000094

0800a49c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4a2:	f3ef 8305 	mrs	r3, IPSR
 800a4a6:	603b      	str	r3, [r7, #0]
  return(result);
 800a4a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d003      	beq.n	800a4b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a4ae:	f06f 0305 	mvn.w	r3, #5
 800a4b2:	607b      	str	r3, [r7, #4]
 800a4b4:	e010      	b.n	800a4d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a4b6:	4b0b      	ldr	r3, [pc, #44]	; (800a4e4 <osKernelStart+0x48>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d109      	bne.n	800a4d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a4be:	f7ff ffbf 	bl	800a440 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a4c2:	4b08      	ldr	r3, [pc, #32]	; (800a4e4 <osKernelStart+0x48>)
 800a4c4:	2202      	movs	r2, #2
 800a4c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a4c8:	f001 f866 	bl	800b598 <vTaskStartScheduler>
      stat = osOK;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	607b      	str	r3, [r7, #4]
 800a4d0:	e002      	b.n	800a4d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a4d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a4d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a4d8:	687b      	ldr	r3, [r7, #4]
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3708      	adds	r7, #8
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	20000094 	.word	0x20000094

0800a4e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b08e      	sub	sp, #56	; 0x38
 800a4ec:	af04      	add	r7, sp, #16
 800a4ee:	60f8      	str	r0, [r7, #12]
 800a4f0:	60b9      	str	r1, [r7, #8]
 800a4f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4f8:	f3ef 8305 	mrs	r3, IPSR
 800a4fc:	617b      	str	r3, [r7, #20]
  return(result);
 800a4fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a500:	2b00      	cmp	r3, #0
 800a502:	d17e      	bne.n	800a602 <osThreadNew+0x11a>
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d07b      	beq.n	800a602 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a50a:	2380      	movs	r3, #128	; 0x80
 800a50c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a50e:	2318      	movs	r3, #24
 800a510:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a512:	2300      	movs	r3, #0
 800a514:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a516:	f04f 33ff 	mov.w	r3, #4294967295
 800a51a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d045      	beq.n	800a5ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d002      	beq.n	800a530 <osThreadNew+0x48>
        name = attr->name;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	699b      	ldr	r3, [r3, #24]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d002      	beq.n	800a53e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	699b      	ldr	r3, [r3, #24]
 800a53c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d008      	beq.n	800a556 <osThreadNew+0x6e>
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	2b38      	cmp	r3, #56	; 0x38
 800a548:	d805      	bhi.n	800a556 <osThreadNew+0x6e>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	f003 0301 	and.w	r3, r3, #1
 800a552:	2b00      	cmp	r3, #0
 800a554:	d001      	beq.n	800a55a <osThreadNew+0x72>
        return (NULL);
 800a556:	2300      	movs	r3, #0
 800a558:	e054      	b.n	800a604 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	695b      	ldr	r3, [r3, #20]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d003      	beq.n	800a56a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	695b      	ldr	r3, [r3, #20]
 800a566:	089b      	lsrs	r3, r3, #2
 800a568:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00e      	beq.n	800a590 <osThreadNew+0xa8>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	68db      	ldr	r3, [r3, #12]
 800a576:	2b5b      	cmp	r3, #91	; 0x5b
 800a578:	d90a      	bls.n	800a590 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d006      	beq.n	800a590 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	695b      	ldr	r3, [r3, #20]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d002      	beq.n	800a590 <osThreadNew+0xa8>
        mem = 1;
 800a58a:	2301      	movs	r3, #1
 800a58c:	61bb      	str	r3, [r7, #24]
 800a58e:	e010      	b.n	800a5b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d10c      	bne.n	800a5b2 <osThreadNew+0xca>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	68db      	ldr	r3, [r3, #12]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d108      	bne.n	800a5b2 <osThreadNew+0xca>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	691b      	ldr	r3, [r3, #16]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d104      	bne.n	800a5b2 <osThreadNew+0xca>
          mem = 0;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	61bb      	str	r3, [r7, #24]
 800a5ac:	e001      	b.n	800a5b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a5b2:	69bb      	ldr	r3, [r7, #24]
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d110      	bne.n	800a5da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a5c0:	9202      	str	r2, [sp, #8]
 800a5c2:	9301      	str	r3, [sp, #4]
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	9300      	str	r3, [sp, #0]
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	6a3a      	ldr	r2, [r7, #32]
 800a5cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a5ce:	68f8      	ldr	r0, [r7, #12]
 800a5d0:	f000 fe0c 	bl	800b1ec <xTaskCreateStatic>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	613b      	str	r3, [r7, #16]
 800a5d8:	e013      	b.n	800a602 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d110      	bne.n	800a602 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a5e0:	6a3b      	ldr	r3, [r7, #32]
 800a5e2:	b29a      	uxth	r2, r3
 800a5e4:	f107 0310 	add.w	r3, r7, #16
 800a5e8:	9301      	str	r3, [sp, #4]
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	9300      	str	r3, [sp, #0]
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a5f2:	68f8      	ldr	r0, [r7, #12]
 800a5f4:	f000 fe57 	bl	800b2a6 <xTaskCreate>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d001      	beq.n	800a602 <osThreadNew+0x11a>
            hTask = NULL;
 800a5fe:	2300      	movs	r3, #0
 800a600:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a602:	693b      	ldr	r3, [r7, #16]
}
 800a604:	4618      	mov	r0, r3
 800a606:	3728      	adds	r7, #40	; 0x28
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a614:	f3ef 8305 	mrs	r3, IPSR
 800a618:	60bb      	str	r3, [r7, #8]
  return(result);
 800a61a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d003      	beq.n	800a628 <osDelay+0x1c>
    stat = osErrorISR;
 800a620:	f06f 0305 	mvn.w	r3, #5
 800a624:	60fb      	str	r3, [r7, #12]
 800a626:	e007      	b.n	800a638 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a628:	2300      	movs	r3, #0
 800a62a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d002      	beq.n	800a638 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 ff7c 	bl	800b530 <vTaskDelay>
    }
  }

  return (stat);
 800a638:	68fb      	ldr	r3, [r7, #12]
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
	...

0800a644 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a644:	b480      	push	{r7}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	4a07      	ldr	r2, [pc, #28]	; (800a670 <vApplicationGetIdleTaskMemory+0x2c>)
 800a654:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	4a06      	ldr	r2, [pc, #24]	; (800a674 <vApplicationGetIdleTaskMemory+0x30>)
 800a65a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2280      	movs	r2, #128	; 0x80
 800a660:	601a      	str	r2, [r3, #0]
}
 800a662:	bf00      	nop
 800a664:	3714      	adds	r7, #20
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr
 800a66e:	bf00      	nop
 800a670:	20000098 	.word	0x20000098
 800a674:	200000f4 	.word	0x200000f4

0800a678 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a678:	b480      	push	{r7}
 800a67a:	b085      	sub	sp, #20
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	4a07      	ldr	r2, [pc, #28]	; (800a6a4 <vApplicationGetTimerTaskMemory+0x2c>)
 800a688:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	4a06      	ldr	r2, [pc, #24]	; (800a6a8 <vApplicationGetTimerTaskMemory+0x30>)
 800a68e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a696:	601a      	str	r2, [r3, #0]
}
 800a698:	bf00      	nop
 800a69a:	3714      	adds	r7, #20
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr
 800a6a4:	200002f4 	.word	0x200002f4
 800a6a8:	20000350 	.word	0x20000350

0800a6ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f103 0208 	add.w	r2, r3, #8
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a6c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f103 0208 	add.w	r2, r3, #8
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f103 0208 	add.w	r2, r3, #8
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a6e0:	bf00      	nop
 800a6e2:	370c      	adds	r7, #12
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr

0800a6ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a6fa:	bf00      	nop
 800a6fc:	370c      	adds	r7, #12
 800a6fe:	46bd      	mov	sp, r7
 800a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a704:	4770      	bx	lr

0800a706 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a706:	b480      	push	{r7}
 800a708:	b085      	sub	sp, #20
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
 800a70e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	689a      	ldr	r2, [r3, #8]
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	683a      	ldr	r2, [r7, #0]
 800a72a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	683a      	ldr	r2, [r7, #0]
 800a730:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	1c5a      	adds	r2, r3, #1
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	601a      	str	r2, [r3, #0]
}
 800a742:	bf00      	nop
 800a744:	3714      	adds	r7, #20
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr

0800a74e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a74e:	b480      	push	{r7}
 800a750:	b085      	sub	sp, #20
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
 800a756:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a764:	d103      	bne.n	800a76e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	691b      	ldr	r3, [r3, #16]
 800a76a:	60fb      	str	r3, [r7, #12]
 800a76c:	e00c      	b.n	800a788 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	3308      	adds	r3, #8
 800a772:	60fb      	str	r3, [r7, #12]
 800a774:	e002      	b.n	800a77c <vListInsert+0x2e>
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	60fb      	str	r3, [r7, #12]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	68ba      	ldr	r2, [r7, #8]
 800a784:	429a      	cmp	r2, r3
 800a786:	d2f6      	bcs.n	800a776 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	685a      	ldr	r2, [r3, #4]
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	683a      	ldr	r2, [r7, #0]
 800a796:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	68fa      	ldr	r2, [r7, #12]
 800a79c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	683a      	ldr	r2, [r7, #0]
 800a7a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	1c5a      	adds	r2, r3, #1
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	601a      	str	r2, [r3, #0]
}
 800a7b4:	bf00      	nop
 800a7b6:	3714      	adds	r7, #20
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b085      	sub	sp, #20
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	6892      	ldr	r2, [r2, #8]
 800a7d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	6852      	ldr	r2, [r2, #4]
 800a7e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d103      	bne.n	800a7f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	689a      	ldr	r2, [r3, #8]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	1e5a      	subs	r2, r3, #1
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3714      	adds	r7, #20
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d10a      	bne.n	800a83e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82c:	f383 8811 	msr	BASEPRI, r3
 800a830:	f3bf 8f6f 	isb	sy
 800a834:	f3bf 8f4f 	dsb	sy
 800a838:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a83a:	bf00      	nop
 800a83c:	e7fe      	b.n	800a83c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a83e:	f002 f851 	bl	800c8e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a84a:	68f9      	ldr	r1, [r7, #12]
 800a84c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a84e:	fb01 f303 	mul.w	r3, r1, r3
 800a852:	441a      	add	r2, r3
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2200      	movs	r2, #0
 800a85c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a86e:	3b01      	subs	r3, #1
 800a870:	68f9      	ldr	r1, [r7, #12]
 800a872:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a874:	fb01 f303 	mul.w	r3, r1, r3
 800a878:	441a      	add	r2, r3
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	22ff      	movs	r2, #255	; 0xff
 800a882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	22ff      	movs	r2, #255	; 0xff
 800a88a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d114      	bne.n	800a8be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	691b      	ldr	r3, [r3, #16]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d01a      	beq.n	800a8d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	3310      	adds	r3, #16
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f001 f903 	bl	800baac <xTaskRemoveFromEventList>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d012      	beq.n	800a8d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a8ac:	4b0c      	ldr	r3, [pc, #48]	; (800a8e0 <xQueueGenericReset+0xcc>)
 800a8ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8b2:	601a      	str	r2, [r3, #0]
 800a8b4:	f3bf 8f4f 	dsb	sy
 800a8b8:	f3bf 8f6f 	isb	sy
 800a8bc:	e009      	b.n	800a8d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	3310      	adds	r3, #16
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7ff fef2 	bl	800a6ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	3324      	adds	r3, #36	; 0x24
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7ff feed 	bl	800a6ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a8d2:	f002 f837 	bl	800c944 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a8d6:	2301      	movs	r3, #1
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3710      	adds	r7, #16
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	e000ed04 	.word	0xe000ed04

0800a8e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b08e      	sub	sp, #56	; 0x38
 800a8e8:	af02      	add	r7, sp, #8
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	607a      	str	r2, [r7, #4]
 800a8f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d10a      	bne.n	800a90e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8fc:	f383 8811 	msr	BASEPRI, r3
 800a900:	f3bf 8f6f 	isb	sy
 800a904:	f3bf 8f4f 	dsb	sy
 800a908:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a90a:	bf00      	nop
 800a90c:	e7fe      	b.n	800a90c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d10a      	bne.n	800a92a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a918:	f383 8811 	msr	BASEPRI, r3
 800a91c:	f3bf 8f6f 	isb	sy
 800a920:	f3bf 8f4f 	dsb	sy
 800a924:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a926:	bf00      	nop
 800a928:	e7fe      	b.n	800a928 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d002      	beq.n	800a936 <xQueueGenericCreateStatic+0x52>
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d001      	beq.n	800a93a <xQueueGenericCreateStatic+0x56>
 800a936:	2301      	movs	r3, #1
 800a938:	e000      	b.n	800a93c <xQueueGenericCreateStatic+0x58>
 800a93a:	2300      	movs	r3, #0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d10a      	bne.n	800a956 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a944:	f383 8811 	msr	BASEPRI, r3
 800a948:	f3bf 8f6f 	isb	sy
 800a94c:	f3bf 8f4f 	dsb	sy
 800a950:	623b      	str	r3, [r7, #32]
}
 800a952:	bf00      	nop
 800a954:	e7fe      	b.n	800a954 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d102      	bne.n	800a962 <xQueueGenericCreateStatic+0x7e>
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d101      	bne.n	800a966 <xQueueGenericCreateStatic+0x82>
 800a962:	2301      	movs	r3, #1
 800a964:	e000      	b.n	800a968 <xQueueGenericCreateStatic+0x84>
 800a966:	2300      	movs	r3, #0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d10a      	bne.n	800a982 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a970:	f383 8811 	msr	BASEPRI, r3
 800a974:	f3bf 8f6f 	isb	sy
 800a978:	f3bf 8f4f 	dsb	sy
 800a97c:	61fb      	str	r3, [r7, #28]
}
 800a97e:	bf00      	nop
 800a980:	e7fe      	b.n	800a980 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a982:	2350      	movs	r3, #80	; 0x50
 800a984:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	2b50      	cmp	r3, #80	; 0x50
 800a98a:	d00a      	beq.n	800a9a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a990:	f383 8811 	msr	BASEPRI, r3
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	f3bf 8f4f 	dsb	sy
 800a99c:	61bb      	str	r3, [r7, #24]
}
 800a99e:	bf00      	nop
 800a9a0:	e7fe      	b.n	800a9a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a9a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00d      	beq.n	800a9ca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a9b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9bc:	9300      	str	r3, [sp, #0]
 800a9be:	4613      	mov	r3, r2
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	68b9      	ldr	r1, [r7, #8]
 800a9c4:	68f8      	ldr	r0, [r7, #12]
 800a9c6:	f000 f805 	bl	800a9d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3730      	adds	r7, #48	; 0x30
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	607a      	str	r2, [r7, #4]
 800a9e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d103      	bne.n	800a9f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a9e8:	69bb      	ldr	r3, [r7, #24]
 800a9ea:	69ba      	ldr	r2, [r7, #24]
 800a9ec:	601a      	str	r2, [r3, #0]
 800a9ee:	e002      	b.n	800a9f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a9fc:	69bb      	ldr	r3, [r7, #24]
 800a9fe:	68ba      	ldr	r2, [r7, #8]
 800aa00:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aa02:	2101      	movs	r1, #1
 800aa04:	69b8      	ldr	r0, [r7, #24]
 800aa06:	f7ff ff05 	bl	800a814 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800aa0a:	69bb      	ldr	r3, [r7, #24]
 800aa0c:	78fa      	ldrb	r2, [r7, #3]
 800aa0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aa12:	bf00      	nop
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
	...

0800aa1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b08e      	sub	sp, #56	; 0x38
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	607a      	str	r2, [r7, #4]
 800aa28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aa32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d10a      	bne.n	800aa4e <xQueueGenericSend+0x32>
	__asm volatile
 800aa38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa3c:	f383 8811 	msr	BASEPRI, r3
 800aa40:	f3bf 8f6f 	isb	sy
 800aa44:	f3bf 8f4f 	dsb	sy
 800aa48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa4a:	bf00      	nop
 800aa4c:	e7fe      	b.n	800aa4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d103      	bne.n	800aa5c <xQueueGenericSend+0x40>
 800aa54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d101      	bne.n	800aa60 <xQueueGenericSend+0x44>
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e000      	b.n	800aa62 <xQueueGenericSend+0x46>
 800aa60:	2300      	movs	r3, #0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d10a      	bne.n	800aa7c <xQueueGenericSend+0x60>
	__asm volatile
 800aa66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6a:	f383 8811 	msr	BASEPRI, r3
 800aa6e:	f3bf 8f6f 	isb	sy
 800aa72:	f3bf 8f4f 	dsb	sy
 800aa76:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa78:	bf00      	nop
 800aa7a:	e7fe      	b.n	800aa7a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	2b02      	cmp	r3, #2
 800aa80:	d103      	bne.n	800aa8a <xQueueGenericSend+0x6e>
 800aa82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d101      	bne.n	800aa8e <xQueueGenericSend+0x72>
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	e000      	b.n	800aa90 <xQueueGenericSend+0x74>
 800aa8e:	2300      	movs	r3, #0
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d10a      	bne.n	800aaaa <xQueueGenericSend+0x8e>
	__asm volatile
 800aa94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa98:	f383 8811 	msr	BASEPRI, r3
 800aa9c:	f3bf 8f6f 	isb	sy
 800aaa0:	f3bf 8f4f 	dsb	sy
 800aaa4:	623b      	str	r3, [r7, #32]
}
 800aaa6:	bf00      	nop
 800aaa8:	e7fe      	b.n	800aaa8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aaaa:	f001 f9bd 	bl	800be28 <xTaskGetSchedulerState>
 800aaae:	4603      	mov	r3, r0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d102      	bne.n	800aaba <xQueueGenericSend+0x9e>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d101      	bne.n	800aabe <xQueueGenericSend+0xa2>
 800aaba:	2301      	movs	r3, #1
 800aabc:	e000      	b.n	800aac0 <xQueueGenericSend+0xa4>
 800aabe:	2300      	movs	r3, #0
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d10a      	bne.n	800aada <xQueueGenericSend+0xbe>
	__asm volatile
 800aac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac8:	f383 8811 	msr	BASEPRI, r3
 800aacc:	f3bf 8f6f 	isb	sy
 800aad0:	f3bf 8f4f 	dsb	sy
 800aad4:	61fb      	str	r3, [r7, #28]
}
 800aad6:	bf00      	nop
 800aad8:	e7fe      	b.n	800aad8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aada:	f001 ff03 	bl	800c8e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d302      	bcc.n	800aaf0 <xQueueGenericSend+0xd4>
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	d129      	bne.n	800ab44 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aaf0:	683a      	ldr	r2, [r7, #0]
 800aaf2:	68b9      	ldr	r1, [r7, #8]
 800aaf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aaf6:	f000 fa0b 	bl	800af10 <prvCopyDataToQueue>
 800aafa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d010      	beq.n	800ab26 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab06:	3324      	adds	r3, #36	; 0x24
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f000 ffcf 	bl	800baac <xTaskRemoveFromEventList>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d013      	beq.n	800ab3c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ab14:	4b3f      	ldr	r3, [pc, #252]	; (800ac14 <xQueueGenericSend+0x1f8>)
 800ab16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab1a:	601a      	str	r2, [r3, #0]
 800ab1c:	f3bf 8f4f 	dsb	sy
 800ab20:	f3bf 8f6f 	isb	sy
 800ab24:	e00a      	b.n	800ab3c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ab26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d007      	beq.n	800ab3c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ab2c:	4b39      	ldr	r3, [pc, #228]	; (800ac14 <xQueueGenericSend+0x1f8>)
 800ab2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab32:	601a      	str	r2, [r3, #0]
 800ab34:	f3bf 8f4f 	dsb	sy
 800ab38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ab3c:	f001 ff02 	bl	800c944 <vPortExitCritical>
				return pdPASS;
 800ab40:	2301      	movs	r3, #1
 800ab42:	e063      	b.n	800ac0c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d103      	bne.n	800ab52 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab4a:	f001 fefb 	bl	800c944 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	e05c      	b.n	800ac0c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d106      	bne.n	800ab66 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab58:	f107 0314 	add.w	r3, r7, #20
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f001 f809 	bl	800bb74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab62:	2301      	movs	r3, #1
 800ab64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab66:	f001 feed 	bl	800c944 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab6a:	f000 fd7b 	bl	800b664 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab6e:	f001 feb9 	bl	800c8e4 <vPortEnterCritical>
 800ab72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab78:	b25b      	sxtb	r3, r3
 800ab7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab7e:	d103      	bne.n	800ab88 <xQueueGenericSend+0x16c>
 800ab80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab82:	2200      	movs	r2, #0
 800ab84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab8e:	b25b      	sxtb	r3, r3
 800ab90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab94:	d103      	bne.n	800ab9e <xQueueGenericSend+0x182>
 800ab96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab98:	2200      	movs	r2, #0
 800ab9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab9e:	f001 fed1 	bl	800c944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aba2:	1d3a      	adds	r2, r7, #4
 800aba4:	f107 0314 	add.w	r3, r7, #20
 800aba8:	4611      	mov	r1, r2
 800abaa:	4618      	mov	r0, r3
 800abac:	f000 fff8 	bl	800bba0 <xTaskCheckForTimeOut>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d124      	bne.n	800ac00 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800abb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abb8:	f000 faa2 	bl	800b100 <prvIsQueueFull>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d018      	beq.n	800abf4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800abc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc4:	3310      	adds	r3, #16
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	4611      	mov	r1, r2
 800abca:	4618      	mov	r0, r3
 800abcc:	f000 ff1e 	bl	800ba0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800abd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abd2:	f000 fa2d 	bl	800b030 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800abd6:	f000 fd53 	bl	800b680 <xTaskResumeAll>
 800abda:	4603      	mov	r3, r0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	f47f af7c 	bne.w	800aada <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800abe2:	4b0c      	ldr	r3, [pc, #48]	; (800ac14 <xQueueGenericSend+0x1f8>)
 800abe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abe8:	601a      	str	r2, [r3, #0]
 800abea:	f3bf 8f4f 	dsb	sy
 800abee:	f3bf 8f6f 	isb	sy
 800abf2:	e772      	b.n	800aada <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800abf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abf6:	f000 fa1b 	bl	800b030 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800abfa:	f000 fd41 	bl	800b680 <xTaskResumeAll>
 800abfe:	e76c      	b.n	800aada <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ac00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac02:	f000 fa15 	bl	800b030 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac06:	f000 fd3b 	bl	800b680 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ac0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3738      	adds	r7, #56	; 0x38
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	e000ed04 	.word	0xe000ed04

0800ac18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b090      	sub	sp, #64	; 0x40
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	60b9      	str	r1, [r7, #8]
 800ac22:	607a      	str	r2, [r7, #4]
 800ac24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ac2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d10a      	bne.n	800ac46 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ac30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac34:	f383 8811 	msr	BASEPRI, r3
 800ac38:	f3bf 8f6f 	isb	sy
 800ac3c:	f3bf 8f4f 	dsb	sy
 800ac40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ac42:	bf00      	nop
 800ac44:	e7fe      	b.n	800ac44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d103      	bne.n	800ac54 <xQueueGenericSendFromISR+0x3c>
 800ac4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d101      	bne.n	800ac58 <xQueueGenericSendFromISR+0x40>
 800ac54:	2301      	movs	r3, #1
 800ac56:	e000      	b.n	800ac5a <xQueueGenericSendFromISR+0x42>
 800ac58:	2300      	movs	r3, #0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d10a      	bne.n	800ac74 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ac5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac62:	f383 8811 	msr	BASEPRI, r3
 800ac66:	f3bf 8f6f 	isb	sy
 800ac6a:	f3bf 8f4f 	dsb	sy
 800ac6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ac70:	bf00      	nop
 800ac72:	e7fe      	b.n	800ac72 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	2b02      	cmp	r3, #2
 800ac78:	d103      	bne.n	800ac82 <xQueueGenericSendFromISR+0x6a>
 800ac7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d101      	bne.n	800ac86 <xQueueGenericSendFromISR+0x6e>
 800ac82:	2301      	movs	r3, #1
 800ac84:	e000      	b.n	800ac88 <xQueueGenericSendFromISR+0x70>
 800ac86:	2300      	movs	r3, #0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d10a      	bne.n	800aca2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ac8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac90:	f383 8811 	msr	BASEPRI, r3
 800ac94:	f3bf 8f6f 	isb	sy
 800ac98:	f3bf 8f4f 	dsb	sy
 800ac9c:	623b      	str	r3, [r7, #32]
}
 800ac9e:	bf00      	nop
 800aca0:	e7fe      	b.n	800aca0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aca2:	f001 ff01 	bl	800caa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aca6:	f3ef 8211 	mrs	r2, BASEPRI
 800acaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acae:	f383 8811 	msr	BASEPRI, r3
 800acb2:	f3bf 8f6f 	isb	sy
 800acb6:	f3bf 8f4f 	dsb	sy
 800acba:	61fa      	str	r2, [r7, #28]
 800acbc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800acbe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800acc0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800acc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acca:	429a      	cmp	r2, r3
 800accc:	d302      	bcc.n	800acd4 <xQueueGenericSendFromISR+0xbc>
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	2b02      	cmp	r3, #2
 800acd2:	d12f      	bne.n	800ad34 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800acd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800acde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ace4:	683a      	ldr	r2, [r7, #0]
 800ace6:	68b9      	ldr	r1, [r7, #8]
 800ace8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800acea:	f000 f911 	bl	800af10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800acee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800acf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acf6:	d112      	bne.n	800ad1e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800acf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d016      	beq.n	800ad2e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad02:	3324      	adds	r3, #36	; 0x24
 800ad04:	4618      	mov	r0, r3
 800ad06:	f000 fed1 	bl	800baac <xTaskRemoveFromEventList>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d00e      	beq.n	800ad2e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00b      	beq.n	800ad2e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2201      	movs	r2, #1
 800ad1a:	601a      	str	r2, [r3, #0]
 800ad1c:	e007      	b.n	800ad2e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ad1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ad22:	3301      	adds	r3, #1
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	b25a      	sxtb	r2, r3
 800ad28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ad32:	e001      	b.n	800ad38 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ad34:	2300      	movs	r3, #0
 800ad36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad3a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ad42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ad44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3740      	adds	r7, #64	; 0x40
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
	...

0800ad50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b08c      	sub	sp, #48	; 0x30
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d10a      	bne.n	800ad80 <xQueueReceive+0x30>
	__asm volatile
 800ad6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6e:	f383 8811 	msr	BASEPRI, r3
 800ad72:	f3bf 8f6f 	isb	sy
 800ad76:	f3bf 8f4f 	dsb	sy
 800ad7a:	623b      	str	r3, [r7, #32]
}
 800ad7c:	bf00      	nop
 800ad7e:	e7fe      	b.n	800ad7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d103      	bne.n	800ad8e <xQueueReceive+0x3e>
 800ad86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d101      	bne.n	800ad92 <xQueueReceive+0x42>
 800ad8e:	2301      	movs	r3, #1
 800ad90:	e000      	b.n	800ad94 <xQueueReceive+0x44>
 800ad92:	2300      	movs	r3, #0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d10a      	bne.n	800adae <xQueueReceive+0x5e>
	__asm volatile
 800ad98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9c:	f383 8811 	msr	BASEPRI, r3
 800ada0:	f3bf 8f6f 	isb	sy
 800ada4:	f3bf 8f4f 	dsb	sy
 800ada8:	61fb      	str	r3, [r7, #28]
}
 800adaa:	bf00      	nop
 800adac:	e7fe      	b.n	800adac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adae:	f001 f83b 	bl	800be28 <xTaskGetSchedulerState>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d102      	bne.n	800adbe <xQueueReceive+0x6e>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d101      	bne.n	800adc2 <xQueueReceive+0x72>
 800adbe:	2301      	movs	r3, #1
 800adc0:	e000      	b.n	800adc4 <xQueueReceive+0x74>
 800adc2:	2300      	movs	r3, #0
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d10a      	bne.n	800adde <xQueueReceive+0x8e>
	__asm volatile
 800adc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adcc:	f383 8811 	msr	BASEPRI, r3
 800add0:	f3bf 8f6f 	isb	sy
 800add4:	f3bf 8f4f 	dsb	sy
 800add8:	61bb      	str	r3, [r7, #24]
}
 800adda:	bf00      	nop
 800addc:	e7fe      	b.n	800addc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800adde:	f001 fd81 	bl	800c8e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ade2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ade6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ade8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adea:	2b00      	cmp	r3, #0
 800adec:	d01f      	beq.n	800ae2e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800adee:	68b9      	ldr	r1, [r7, #8]
 800adf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adf2:	f000 f8f7 	bl	800afe4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800adf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf8:	1e5a      	subs	r2, r3, #1
 800adfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adfc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae00:	691b      	ldr	r3, [r3, #16]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d00f      	beq.n	800ae26 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae08:	3310      	adds	r3, #16
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f000 fe4e 	bl	800baac <xTaskRemoveFromEventList>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d007      	beq.n	800ae26 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae16:	4b3d      	ldr	r3, [pc, #244]	; (800af0c <xQueueReceive+0x1bc>)
 800ae18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae1c:	601a      	str	r2, [r3, #0]
 800ae1e:	f3bf 8f4f 	dsb	sy
 800ae22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ae26:	f001 fd8d 	bl	800c944 <vPortExitCritical>
				return pdPASS;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	e069      	b.n	800af02 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d103      	bne.n	800ae3c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae34:	f001 fd86 	bl	800c944 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	e062      	b.n	800af02 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d106      	bne.n	800ae50 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae42:	f107 0310 	add.w	r3, r7, #16
 800ae46:	4618      	mov	r0, r3
 800ae48:	f000 fe94 	bl	800bb74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae50:	f001 fd78 	bl	800c944 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae54:	f000 fc06 	bl	800b664 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae58:	f001 fd44 	bl	800c8e4 <vPortEnterCritical>
 800ae5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae62:	b25b      	sxtb	r3, r3
 800ae64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae68:	d103      	bne.n	800ae72 <xQueueReceive+0x122>
 800ae6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae78:	b25b      	sxtb	r3, r3
 800ae7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae7e:	d103      	bne.n	800ae88 <xQueueReceive+0x138>
 800ae80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae82:	2200      	movs	r2, #0
 800ae84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae88:	f001 fd5c 	bl	800c944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae8c:	1d3a      	adds	r2, r7, #4
 800ae8e:	f107 0310 	add.w	r3, r7, #16
 800ae92:	4611      	mov	r1, r2
 800ae94:	4618      	mov	r0, r3
 800ae96:	f000 fe83 	bl	800bba0 <xTaskCheckForTimeOut>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d123      	bne.n	800aee8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aea2:	f000 f917 	bl	800b0d4 <prvIsQueueEmpty>
 800aea6:	4603      	mov	r3, r0
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d017      	beq.n	800aedc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aeac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeae:	3324      	adds	r3, #36	; 0x24
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	4611      	mov	r1, r2
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f000 fda9 	bl	800ba0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aeba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aebc:	f000 f8b8 	bl	800b030 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aec0:	f000 fbde 	bl	800b680 <xTaskResumeAll>
 800aec4:	4603      	mov	r3, r0
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d189      	bne.n	800adde <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800aeca:	4b10      	ldr	r3, [pc, #64]	; (800af0c <xQueueReceive+0x1bc>)
 800aecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aed0:	601a      	str	r2, [r3, #0]
 800aed2:	f3bf 8f4f 	dsb	sy
 800aed6:	f3bf 8f6f 	isb	sy
 800aeda:	e780      	b.n	800adde <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aedc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aede:	f000 f8a7 	bl	800b030 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aee2:	f000 fbcd 	bl	800b680 <xTaskResumeAll>
 800aee6:	e77a      	b.n	800adde <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aeea:	f000 f8a1 	bl	800b030 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aeee:	f000 fbc7 	bl	800b680 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aef4:	f000 f8ee 	bl	800b0d4 <prvIsQueueEmpty>
 800aef8:	4603      	mov	r3, r0
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	f43f af6f 	beq.w	800adde <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800af02:	4618      	mov	r0, r3
 800af04:	3730      	adds	r7, #48	; 0x30
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	e000ed04 	.word	0xe000ed04

0800af10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b086      	sub	sp, #24
 800af14:	af00      	add	r7, sp, #0
 800af16:	60f8      	str	r0, [r7, #12]
 800af18:	60b9      	str	r1, [r7, #8]
 800af1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800af1c:	2300      	movs	r3, #0
 800af1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d10d      	bne.n	800af4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d14d      	bne.n	800afd2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	689b      	ldr	r3, [r3, #8]
 800af3a:	4618      	mov	r0, r3
 800af3c:	f000 ff92 	bl	800be64 <xTaskPriorityDisinherit>
 800af40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2200      	movs	r2, #0
 800af46:	609a      	str	r2, [r3, #8]
 800af48:	e043      	b.n	800afd2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d119      	bne.n	800af84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6858      	ldr	r0, [r3, #4]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af58:	461a      	mov	r2, r3
 800af5a:	68b9      	ldr	r1, [r7, #8]
 800af5c:	f002 fa02 	bl	800d364 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	685a      	ldr	r2, [r3, #4]
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af68:	441a      	add	r2, r3
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	685a      	ldr	r2, [r3, #4]
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	689b      	ldr	r3, [r3, #8]
 800af76:	429a      	cmp	r2, r3
 800af78:	d32b      	bcc.n	800afd2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681a      	ldr	r2, [r3, #0]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	605a      	str	r2, [r3, #4]
 800af82:	e026      	b.n	800afd2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	68d8      	ldr	r0, [r3, #12]
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af8c:	461a      	mov	r2, r3
 800af8e:	68b9      	ldr	r1, [r7, #8]
 800af90:	f002 f9e8 	bl	800d364 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	68da      	ldr	r2, [r3, #12]
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af9c:	425b      	negs	r3, r3
 800af9e:	441a      	add	r2, r3
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	68da      	ldr	r2, [r3, #12]
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	429a      	cmp	r2, r3
 800afae:	d207      	bcs.n	800afc0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	689a      	ldr	r2, [r3, #8]
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb8:	425b      	negs	r3, r3
 800afba:	441a      	add	r2, r3
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2b02      	cmp	r3, #2
 800afc4:	d105      	bne.n	800afd2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d002      	beq.n	800afd2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	3b01      	subs	r3, #1
 800afd0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	1c5a      	adds	r2, r3, #1
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800afda:	697b      	ldr	r3, [r7, #20]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3718      	adds	r7, #24
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d018      	beq.n	800b028 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	68da      	ldr	r2, [r3, #12]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800affe:	441a      	add	r2, r3
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	68da      	ldr	r2, [r3, #12]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d303      	bcc.n	800b018 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	68d9      	ldr	r1, [r3, #12]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b020:	461a      	mov	r2, r3
 800b022:	6838      	ldr	r0, [r7, #0]
 800b024:	f002 f99e 	bl	800d364 <memcpy>
	}
}
 800b028:	bf00      	nop
 800b02a:	3708      	adds	r7, #8
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b084      	sub	sp, #16
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b038:	f001 fc54 	bl	800c8e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b042:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b044:	e011      	b.n	800b06a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d012      	beq.n	800b074 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	3324      	adds	r3, #36	; 0x24
 800b052:	4618      	mov	r0, r3
 800b054:	f000 fd2a 	bl	800baac <xTaskRemoveFromEventList>
 800b058:	4603      	mov	r3, r0
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d001      	beq.n	800b062 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b05e:	f000 fe01 	bl	800bc64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b062:	7bfb      	ldrb	r3, [r7, #15]
 800b064:	3b01      	subs	r3, #1
 800b066:	b2db      	uxtb	r3, r3
 800b068:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b06a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	dce9      	bgt.n	800b046 <prvUnlockQueue+0x16>
 800b072:	e000      	b.n	800b076 <prvUnlockQueue+0x46>
					break;
 800b074:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	22ff      	movs	r2, #255	; 0xff
 800b07a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b07e:	f001 fc61 	bl	800c944 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b082:	f001 fc2f 	bl	800c8e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b08c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b08e:	e011      	b.n	800b0b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	691b      	ldr	r3, [r3, #16]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d012      	beq.n	800b0be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	3310      	adds	r3, #16
 800b09c:	4618      	mov	r0, r3
 800b09e:	f000 fd05 	bl	800baac <xTaskRemoveFromEventList>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d001      	beq.n	800b0ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b0a8:	f000 fddc 	bl	800bc64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b0ac:	7bbb      	ldrb	r3, [r7, #14]
 800b0ae:	3b01      	subs	r3, #1
 800b0b0:	b2db      	uxtb	r3, r3
 800b0b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b0b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	dce9      	bgt.n	800b090 <prvUnlockQueue+0x60>
 800b0bc:	e000      	b.n	800b0c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b0be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	22ff      	movs	r2, #255	; 0xff
 800b0c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b0c8:	f001 fc3c 	bl	800c944 <vPortExitCritical>
}
 800b0cc:	bf00      	nop
 800b0ce:	3710      	adds	r7, #16
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b0dc:	f001 fc02 	bl	800c8e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d102      	bne.n	800b0ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	60fb      	str	r3, [r7, #12]
 800b0ec:	e001      	b.n	800b0f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b0f2:	f001 fc27 	bl	800c944 <vPortExitCritical>

	return xReturn;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3710      	adds	r7, #16
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b108:	f001 fbec 	bl	800c8e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b114:	429a      	cmp	r2, r3
 800b116:	d102      	bne.n	800b11e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b118:	2301      	movs	r3, #1
 800b11a:	60fb      	str	r3, [r7, #12]
 800b11c:	e001      	b.n	800b122 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b11e:	2300      	movs	r3, #0
 800b120:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b122:	f001 fc0f 	bl	800c944 <vPortExitCritical>

	return xReturn;
 800b126:	68fb      	ldr	r3, [r7, #12]
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3710      	adds	r7, #16
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b130:	b480      	push	{r7}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b13a:	2300      	movs	r3, #0
 800b13c:	60fb      	str	r3, [r7, #12]
 800b13e:	e014      	b.n	800b16a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b140:	4a0f      	ldr	r2, [pc, #60]	; (800b180 <vQueueAddToRegistry+0x50>)
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d10b      	bne.n	800b164 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b14c:	490c      	ldr	r1, [pc, #48]	; (800b180 <vQueueAddToRegistry+0x50>)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	683a      	ldr	r2, [r7, #0]
 800b152:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b156:	4a0a      	ldr	r2, [pc, #40]	; (800b180 <vQueueAddToRegistry+0x50>)
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	00db      	lsls	r3, r3, #3
 800b15c:	4413      	add	r3, r2
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b162:	e006      	b.n	800b172 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	3301      	adds	r3, #1
 800b168:	60fb      	str	r3, [r7, #12]
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2b07      	cmp	r3, #7
 800b16e:	d9e7      	bls.n	800b140 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b170:	bf00      	nop
 800b172:	bf00      	nop
 800b174:	3714      	adds	r7, #20
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr
 800b17e:	bf00      	nop
 800b180:	20004fa4 	.word	0x20004fa4

0800b184 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b184:	b580      	push	{r7, lr}
 800b186:	b086      	sub	sp, #24
 800b188:	af00      	add	r7, sp, #0
 800b18a:	60f8      	str	r0, [r7, #12]
 800b18c:	60b9      	str	r1, [r7, #8]
 800b18e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b194:	f001 fba6 	bl	800c8e4 <vPortEnterCritical>
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b19e:	b25b      	sxtb	r3, r3
 800b1a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1a4:	d103      	bne.n	800b1ae <vQueueWaitForMessageRestricted+0x2a>
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1b4:	b25b      	sxtb	r3, r3
 800b1b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1ba:	d103      	bne.n	800b1c4 <vQueueWaitForMessageRestricted+0x40>
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1c4:	f001 fbbe 	bl	800c944 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d106      	bne.n	800b1de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	3324      	adds	r3, #36	; 0x24
 800b1d4:	687a      	ldr	r2, [r7, #4]
 800b1d6:	68b9      	ldr	r1, [r7, #8]
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f000 fc3b 	bl	800ba54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b1de:	6978      	ldr	r0, [r7, #20]
 800b1e0:	f7ff ff26 	bl	800b030 <prvUnlockQueue>
	}
 800b1e4:	bf00      	nop
 800b1e6:	3718      	adds	r7, #24
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b08e      	sub	sp, #56	; 0x38
 800b1f0:	af04      	add	r7, sp, #16
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	607a      	str	r2, [r7, #4]
 800b1f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d10a      	bne.n	800b216 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b204:	f383 8811 	msr	BASEPRI, r3
 800b208:	f3bf 8f6f 	isb	sy
 800b20c:	f3bf 8f4f 	dsb	sy
 800b210:	623b      	str	r3, [r7, #32]
}
 800b212:	bf00      	nop
 800b214:	e7fe      	b.n	800b214 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d10a      	bne.n	800b232 <xTaskCreateStatic+0x46>
	__asm volatile
 800b21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b220:	f383 8811 	msr	BASEPRI, r3
 800b224:	f3bf 8f6f 	isb	sy
 800b228:	f3bf 8f4f 	dsb	sy
 800b22c:	61fb      	str	r3, [r7, #28]
}
 800b22e:	bf00      	nop
 800b230:	e7fe      	b.n	800b230 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b232:	235c      	movs	r3, #92	; 0x5c
 800b234:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	2b5c      	cmp	r3, #92	; 0x5c
 800b23a:	d00a      	beq.n	800b252 <xTaskCreateStatic+0x66>
	__asm volatile
 800b23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b240:	f383 8811 	msr	BASEPRI, r3
 800b244:	f3bf 8f6f 	isb	sy
 800b248:	f3bf 8f4f 	dsb	sy
 800b24c:	61bb      	str	r3, [r7, #24]
}
 800b24e:	bf00      	nop
 800b250:	e7fe      	b.n	800b250 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b252:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b256:	2b00      	cmp	r3, #0
 800b258:	d01e      	beq.n	800b298 <xTaskCreateStatic+0xac>
 800b25a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d01b      	beq.n	800b298 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b262:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b268:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26c:	2202      	movs	r2, #2
 800b26e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b272:	2300      	movs	r3, #0
 800b274:	9303      	str	r3, [sp, #12]
 800b276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b278:	9302      	str	r3, [sp, #8]
 800b27a:	f107 0314 	add.w	r3, r7, #20
 800b27e:	9301      	str	r3, [sp, #4]
 800b280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b282:	9300      	str	r3, [sp, #0]
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	68b9      	ldr	r1, [r7, #8]
 800b28a:	68f8      	ldr	r0, [r7, #12]
 800b28c:	f000 f850 	bl	800b330 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b290:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b292:	f000 f8dd 	bl	800b450 <prvAddNewTaskToReadyList>
 800b296:	e001      	b.n	800b29c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b298:	2300      	movs	r3, #0
 800b29a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b29c:	697b      	ldr	r3, [r7, #20]
	}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3728      	adds	r7, #40	; 0x28
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b2a6:	b580      	push	{r7, lr}
 800b2a8:	b08c      	sub	sp, #48	; 0x30
 800b2aa:	af04      	add	r7, sp, #16
 800b2ac:	60f8      	str	r0, [r7, #12]
 800b2ae:	60b9      	str	r1, [r7, #8]
 800b2b0:	603b      	str	r3, [r7, #0]
 800b2b2:	4613      	mov	r3, r2
 800b2b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b2b6:	88fb      	ldrh	r3, [r7, #6]
 800b2b8:	009b      	lsls	r3, r3, #2
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f001 fc34 	bl	800cb28 <pvPortMalloc>
 800b2c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d00e      	beq.n	800b2e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b2c8:	205c      	movs	r0, #92	; 0x5c
 800b2ca:	f001 fc2d 	bl	800cb28 <pvPortMalloc>
 800b2ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d003      	beq.n	800b2de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b2d6:	69fb      	ldr	r3, [r7, #28]
 800b2d8:	697a      	ldr	r2, [r7, #20]
 800b2da:	631a      	str	r2, [r3, #48]	; 0x30
 800b2dc:	e005      	b.n	800b2ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b2de:	6978      	ldr	r0, [r7, #20]
 800b2e0:	f001 fcee 	bl	800ccc0 <vPortFree>
 800b2e4:	e001      	b.n	800b2ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d017      	beq.n	800b320 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b2f8:	88fa      	ldrh	r2, [r7, #6]
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	9303      	str	r3, [sp, #12]
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	9302      	str	r3, [sp, #8]
 800b302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b304:	9301      	str	r3, [sp, #4]
 800b306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b308:	9300      	str	r3, [sp, #0]
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	68b9      	ldr	r1, [r7, #8]
 800b30e:	68f8      	ldr	r0, [r7, #12]
 800b310:	f000 f80e 	bl	800b330 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b314:	69f8      	ldr	r0, [r7, #28]
 800b316:	f000 f89b 	bl	800b450 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b31a:	2301      	movs	r3, #1
 800b31c:	61bb      	str	r3, [r7, #24]
 800b31e:	e002      	b.n	800b326 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b320:	f04f 33ff 	mov.w	r3, #4294967295
 800b324:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b326:	69bb      	ldr	r3, [r7, #24]
	}
 800b328:	4618      	mov	r0, r3
 800b32a:	3720      	adds	r7, #32
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b088      	sub	sp, #32
 800b334:	af00      	add	r7, sp, #0
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	60b9      	str	r1, [r7, #8]
 800b33a:	607a      	str	r2, [r7, #4]
 800b33c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b340:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	461a      	mov	r2, r3
 800b348:	21a5      	movs	r1, #165	; 0xa5
 800b34a:	f002 f819 	bl	800d380 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b358:	3b01      	subs	r3, #1
 800b35a:	009b      	lsls	r3, r3, #2
 800b35c:	4413      	add	r3, r2
 800b35e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b360:	69bb      	ldr	r3, [r7, #24]
 800b362:	f023 0307 	bic.w	r3, r3, #7
 800b366:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	f003 0307 	and.w	r3, r3, #7
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d00a      	beq.n	800b388 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b376:	f383 8811 	msr	BASEPRI, r3
 800b37a:	f3bf 8f6f 	isb	sy
 800b37e:	f3bf 8f4f 	dsb	sy
 800b382:	617b      	str	r3, [r7, #20]
}
 800b384:	bf00      	nop
 800b386:	e7fe      	b.n	800b386 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d01f      	beq.n	800b3ce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b38e:	2300      	movs	r3, #0
 800b390:	61fb      	str	r3, [r7, #28]
 800b392:	e012      	b.n	800b3ba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b394:	68ba      	ldr	r2, [r7, #8]
 800b396:	69fb      	ldr	r3, [r7, #28]
 800b398:	4413      	add	r3, r2
 800b39a:	7819      	ldrb	r1, [r3, #0]
 800b39c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b39e:	69fb      	ldr	r3, [r7, #28]
 800b3a0:	4413      	add	r3, r2
 800b3a2:	3334      	adds	r3, #52	; 0x34
 800b3a4:	460a      	mov	r2, r1
 800b3a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b3a8:	68ba      	ldr	r2, [r7, #8]
 800b3aa:	69fb      	ldr	r3, [r7, #28]
 800b3ac:	4413      	add	r3, r2
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d006      	beq.n	800b3c2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b3b4:	69fb      	ldr	r3, [r7, #28]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	61fb      	str	r3, [r7, #28]
 800b3ba:	69fb      	ldr	r3, [r7, #28]
 800b3bc:	2b0f      	cmp	r3, #15
 800b3be:	d9e9      	bls.n	800b394 <prvInitialiseNewTask+0x64>
 800b3c0:	e000      	b.n	800b3c4 <prvInitialiseNewTask+0x94>
			{
				break;
 800b3c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b3cc:	e003      	b.n	800b3d6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d8:	2b37      	cmp	r3, #55	; 0x37
 800b3da:	d901      	bls.n	800b3e0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b3dc:	2337      	movs	r3, #55	; 0x37
 800b3de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f4:	3304      	adds	r3, #4
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7ff f978 	bl	800a6ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fe:	3318      	adds	r3, #24
 800b400:	4618      	mov	r0, r3
 800b402:	f7ff f973 	bl	800a6ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b40a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b40e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b414:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b41a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41e:	2200      	movs	r2, #0
 800b420:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b424:	2200      	movs	r2, #0
 800b426:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b42a:	683a      	ldr	r2, [r7, #0]
 800b42c:	68f9      	ldr	r1, [r7, #12]
 800b42e:	69b8      	ldr	r0, [r7, #24]
 800b430:	f001 f928 	bl	800c684 <pxPortInitialiseStack>
 800b434:	4602      	mov	r2, r0
 800b436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b438:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d002      	beq.n	800b446 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b444:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b446:	bf00      	nop
 800b448:	3720      	adds	r7, #32
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
	...

0800b450 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b082      	sub	sp, #8
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b458:	f001 fa44 	bl	800c8e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b45c:	4b2d      	ldr	r3, [pc, #180]	; (800b514 <prvAddNewTaskToReadyList+0xc4>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	3301      	adds	r3, #1
 800b462:	4a2c      	ldr	r2, [pc, #176]	; (800b514 <prvAddNewTaskToReadyList+0xc4>)
 800b464:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b466:	4b2c      	ldr	r3, [pc, #176]	; (800b518 <prvAddNewTaskToReadyList+0xc8>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d109      	bne.n	800b482 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b46e:	4a2a      	ldr	r2, [pc, #168]	; (800b518 <prvAddNewTaskToReadyList+0xc8>)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b474:	4b27      	ldr	r3, [pc, #156]	; (800b514 <prvAddNewTaskToReadyList+0xc4>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	2b01      	cmp	r3, #1
 800b47a:	d110      	bne.n	800b49e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b47c:	f000 fc16 	bl	800bcac <prvInitialiseTaskLists>
 800b480:	e00d      	b.n	800b49e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b482:	4b26      	ldr	r3, [pc, #152]	; (800b51c <prvAddNewTaskToReadyList+0xcc>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d109      	bne.n	800b49e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b48a:	4b23      	ldr	r3, [pc, #140]	; (800b518 <prvAddNewTaskToReadyList+0xc8>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b494:	429a      	cmp	r2, r3
 800b496:	d802      	bhi.n	800b49e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b498:	4a1f      	ldr	r2, [pc, #124]	; (800b518 <prvAddNewTaskToReadyList+0xc8>)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b49e:	4b20      	ldr	r3, [pc, #128]	; (800b520 <prvAddNewTaskToReadyList+0xd0>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	4a1e      	ldr	r2, [pc, #120]	; (800b520 <prvAddNewTaskToReadyList+0xd0>)
 800b4a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b4a8:	4b1d      	ldr	r3, [pc, #116]	; (800b520 <prvAddNewTaskToReadyList+0xd0>)
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4b4:	4b1b      	ldr	r3, [pc, #108]	; (800b524 <prvAddNewTaskToReadyList+0xd4>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d903      	bls.n	800b4c4 <prvAddNewTaskToReadyList+0x74>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c0:	4a18      	ldr	r2, [pc, #96]	; (800b524 <prvAddNewTaskToReadyList+0xd4>)
 800b4c2:	6013      	str	r3, [r2, #0]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4c8:	4613      	mov	r3, r2
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	4413      	add	r3, r2
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	4a15      	ldr	r2, [pc, #84]	; (800b528 <prvAddNewTaskToReadyList+0xd8>)
 800b4d2:	441a      	add	r2, r3
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	3304      	adds	r3, #4
 800b4d8:	4619      	mov	r1, r3
 800b4da:	4610      	mov	r0, r2
 800b4dc:	f7ff f913 	bl	800a706 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b4e0:	f001 fa30 	bl	800c944 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b4e4:	4b0d      	ldr	r3, [pc, #52]	; (800b51c <prvAddNewTaskToReadyList+0xcc>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d00e      	beq.n	800b50a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b4ec:	4b0a      	ldr	r3, [pc, #40]	; (800b518 <prvAddNewTaskToReadyList+0xc8>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d207      	bcs.n	800b50a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b4fa:	4b0c      	ldr	r3, [pc, #48]	; (800b52c <prvAddNewTaskToReadyList+0xdc>)
 800b4fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b500:	601a      	str	r2, [r3, #0]
 800b502:	f3bf 8f4f 	dsb	sy
 800b506:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b50a:	bf00      	nop
 800b50c:	3708      	adds	r7, #8
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
 800b512:	bf00      	nop
 800b514:	20000c24 	.word	0x20000c24
 800b518:	20000750 	.word	0x20000750
 800b51c:	20000c30 	.word	0x20000c30
 800b520:	20000c40 	.word	0x20000c40
 800b524:	20000c2c 	.word	0x20000c2c
 800b528:	20000754 	.word	0x20000754
 800b52c:	e000ed04 	.word	0xe000ed04

0800b530 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b530:	b580      	push	{r7, lr}
 800b532:	b084      	sub	sp, #16
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b538:	2300      	movs	r3, #0
 800b53a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d017      	beq.n	800b572 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b542:	4b13      	ldr	r3, [pc, #76]	; (800b590 <vTaskDelay+0x60>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d00a      	beq.n	800b560 <vTaskDelay+0x30>
	__asm volatile
 800b54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b54e:	f383 8811 	msr	BASEPRI, r3
 800b552:	f3bf 8f6f 	isb	sy
 800b556:	f3bf 8f4f 	dsb	sy
 800b55a:	60bb      	str	r3, [r7, #8]
}
 800b55c:	bf00      	nop
 800b55e:	e7fe      	b.n	800b55e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b560:	f000 f880 	bl	800b664 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b564:	2100      	movs	r1, #0
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 fcea 	bl	800bf40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b56c:	f000 f888 	bl	800b680 <xTaskResumeAll>
 800b570:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d107      	bne.n	800b588 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b578:	4b06      	ldr	r3, [pc, #24]	; (800b594 <vTaskDelay+0x64>)
 800b57a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b57e:	601a      	str	r2, [r3, #0]
 800b580:	f3bf 8f4f 	dsb	sy
 800b584:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b588:	bf00      	nop
 800b58a:	3710      	adds	r7, #16
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	20000c4c 	.word	0x20000c4c
 800b594:	e000ed04 	.word	0xe000ed04

0800b598 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b08a      	sub	sp, #40	; 0x28
 800b59c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b5a6:	463a      	mov	r2, r7
 800b5a8:	1d39      	adds	r1, r7, #4
 800b5aa:	f107 0308 	add.w	r3, r7, #8
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7ff f848 	bl	800a644 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b5b4:	6839      	ldr	r1, [r7, #0]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	68ba      	ldr	r2, [r7, #8]
 800b5ba:	9202      	str	r2, [sp, #8]
 800b5bc:	9301      	str	r3, [sp, #4]
 800b5be:	2300      	movs	r3, #0
 800b5c0:	9300      	str	r3, [sp, #0]
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	460a      	mov	r2, r1
 800b5c6:	4921      	ldr	r1, [pc, #132]	; (800b64c <vTaskStartScheduler+0xb4>)
 800b5c8:	4821      	ldr	r0, [pc, #132]	; (800b650 <vTaskStartScheduler+0xb8>)
 800b5ca:	f7ff fe0f 	bl	800b1ec <xTaskCreateStatic>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	4a20      	ldr	r2, [pc, #128]	; (800b654 <vTaskStartScheduler+0xbc>)
 800b5d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b5d4:	4b1f      	ldr	r3, [pc, #124]	; (800b654 <vTaskStartScheduler+0xbc>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d002      	beq.n	800b5e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	617b      	str	r3, [r7, #20]
 800b5e0:	e001      	b.n	800b5e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	2b01      	cmp	r3, #1
 800b5ea:	d102      	bne.n	800b5f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b5ec:	f000 fcfc 	bl	800bfe8 <xTimerCreateTimerTask>
 800b5f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d116      	bne.n	800b626 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5fc:	f383 8811 	msr	BASEPRI, r3
 800b600:	f3bf 8f6f 	isb	sy
 800b604:	f3bf 8f4f 	dsb	sy
 800b608:	613b      	str	r3, [r7, #16]
}
 800b60a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b60c:	4b12      	ldr	r3, [pc, #72]	; (800b658 <vTaskStartScheduler+0xc0>)
 800b60e:	f04f 32ff 	mov.w	r2, #4294967295
 800b612:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b614:	4b11      	ldr	r3, [pc, #68]	; (800b65c <vTaskStartScheduler+0xc4>)
 800b616:	2201      	movs	r2, #1
 800b618:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b61a:	4b11      	ldr	r3, [pc, #68]	; (800b660 <vTaskStartScheduler+0xc8>)
 800b61c:	2200      	movs	r2, #0
 800b61e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b620:	f001 f8be 	bl	800c7a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b624:	e00e      	b.n	800b644 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b62c:	d10a      	bne.n	800b644 <vTaskStartScheduler+0xac>
	__asm volatile
 800b62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b632:	f383 8811 	msr	BASEPRI, r3
 800b636:	f3bf 8f6f 	isb	sy
 800b63a:	f3bf 8f4f 	dsb	sy
 800b63e:	60fb      	str	r3, [r7, #12]
}
 800b640:	bf00      	nop
 800b642:	e7fe      	b.n	800b642 <vTaskStartScheduler+0xaa>
}
 800b644:	bf00      	nop
 800b646:	3718      	adds	r7, #24
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}
 800b64c:	0800d3bc 	.word	0x0800d3bc
 800b650:	0800bc7d 	.word	0x0800bc7d
 800b654:	20000c48 	.word	0x20000c48
 800b658:	20000c44 	.word	0x20000c44
 800b65c:	20000c30 	.word	0x20000c30
 800b660:	20000c28 	.word	0x20000c28

0800b664 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b664:	b480      	push	{r7}
 800b666:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b668:	4b04      	ldr	r3, [pc, #16]	; (800b67c <vTaskSuspendAll+0x18>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	3301      	adds	r3, #1
 800b66e:	4a03      	ldr	r2, [pc, #12]	; (800b67c <vTaskSuspendAll+0x18>)
 800b670:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b672:	bf00      	nop
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr
 800b67c:	20000c4c 	.word	0x20000c4c

0800b680 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b084      	sub	sp, #16
 800b684:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b686:	2300      	movs	r3, #0
 800b688:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b68a:	2300      	movs	r3, #0
 800b68c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b68e:	4b42      	ldr	r3, [pc, #264]	; (800b798 <xTaskResumeAll+0x118>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d10a      	bne.n	800b6ac <xTaskResumeAll+0x2c>
	__asm volatile
 800b696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b69a:	f383 8811 	msr	BASEPRI, r3
 800b69e:	f3bf 8f6f 	isb	sy
 800b6a2:	f3bf 8f4f 	dsb	sy
 800b6a6:	603b      	str	r3, [r7, #0]
}
 800b6a8:	bf00      	nop
 800b6aa:	e7fe      	b.n	800b6aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b6ac:	f001 f91a 	bl	800c8e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b6b0:	4b39      	ldr	r3, [pc, #228]	; (800b798 <xTaskResumeAll+0x118>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	3b01      	subs	r3, #1
 800b6b6:	4a38      	ldr	r2, [pc, #224]	; (800b798 <xTaskResumeAll+0x118>)
 800b6b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6ba:	4b37      	ldr	r3, [pc, #220]	; (800b798 <xTaskResumeAll+0x118>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d162      	bne.n	800b788 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b6c2:	4b36      	ldr	r3, [pc, #216]	; (800b79c <xTaskResumeAll+0x11c>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d05e      	beq.n	800b788 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b6ca:	e02f      	b.n	800b72c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6cc:	4b34      	ldr	r3, [pc, #208]	; (800b7a0 <xTaskResumeAll+0x120>)
 800b6ce:	68db      	ldr	r3, [r3, #12]
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	3318      	adds	r3, #24
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f7ff f871 	bl	800a7c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	3304      	adds	r3, #4
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7ff f86c 	bl	800a7c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6ec:	4b2d      	ldr	r3, [pc, #180]	; (800b7a4 <xTaskResumeAll+0x124>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d903      	bls.n	800b6fc <xTaskResumeAll+0x7c>
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f8:	4a2a      	ldr	r2, [pc, #168]	; (800b7a4 <xTaskResumeAll+0x124>)
 800b6fa:	6013      	str	r3, [r2, #0]
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b700:	4613      	mov	r3, r2
 800b702:	009b      	lsls	r3, r3, #2
 800b704:	4413      	add	r3, r2
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	4a27      	ldr	r2, [pc, #156]	; (800b7a8 <xTaskResumeAll+0x128>)
 800b70a:	441a      	add	r2, r3
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	3304      	adds	r3, #4
 800b710:	4619      	mov	r1, r3
 800b712:	4610      	mov	r0, r2
 800b714:	f7fe fff7 	bl	800a706 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b71c:	4b23      	ldr	r3, [pc, #140]	; (800b7ac <xTaskResumeAll+0x12c>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b722:	429a      	cmp	r2, r3
 800b724:	d302      	bcc.n	800b72c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b726:	4b22      	ldr	r3, [pc, #136]	; (800b7b0 <xTaskResumeAll+0x130>)
 800b728:	2201      	movs	r2, #1
 800b72a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b72c:	4b1c      	ldr	r3, [pc, #112]	; (800b7a0 <xTaskResumeAll+0x120>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d1cb      	bne.n	800b6cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d001      	beq.n	800b73e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b73a:	f000 fb55 	bl	800bde8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b73e:	4b1d      	ldr	r3, [pc, #116]	; (800b7b4 <xTaskResumeAll+0x134>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d010      	beq.n	800b76c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b74a:	f000 f847 	bl	800b7dc <xTaskIncrementTick>
 800b74e:	4603      	mov	r3, r0
 800b750:	2b00      	cmp	r3, #0
 800b752:	d002      	beq.n	800b75a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b754:	4b16      	ldr	r3, [pc, #88]	; (800b7b0 <xTaskResumeAll+0x130>)
 800b756:	2201      	movs	r2, #1
 800b758:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	3b01      	subs	r3, #1
 800b75e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1f1      	bne.n	800b74a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b766:	4b13      	ldr	r3, [pc, #76]	; (800b7b4 <xTaskResumeAll+0x134>)
 800b768:	2200      	movs	r2, #0
 800b76a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b76c:	4b10      	ldr	r3, [pc, #64]	; (800b7b0 <xTaskResumeAll+0x130>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d009      	beq.n	800b788 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b774:	2301      	movs	r3, #1
 800b776:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b778:	4b0f      	ldr	r3, [pc, #60]	; (800b7b8 <xTaskResumeAll+0x138>)
 800b77a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b77e:	601a      	str	r2, [r3, #0]
 800b780:	f3bf 8f4f 	dsb	sy
 800b784:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b788:	f001 f8dc 	bl	800c944 <vPortExitCritical>

	return xAlreadyYielded;
 800b78c:	68bb      	ldr	r3, [r7, #8]
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3710      	adds	r7, #16
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	20000c4c 	.word	0x20000c4c
 800b79c:	20000c24 	.word	0x20000c24
 800b7a0:	20000be4 	.word	0x20000be4
 800b7a4:	20000c2c 	.word	0x20000c2c
 800b7a8:	20000754 	.word	0x20000754
 800b7ac:	20000750 	.word	0x20000750
 800b7b0:	20000c38 	.word	0x20000c38
 800b7b4:	20000c34 	.word	0x20000c34
 800b7b8:	e000ed04 	.word	0xe000ed04

0800b7bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b7c2:	4b05      	ldr	r3, [pc, #20]	; (800b7d8 <xTaskGetTickCount+0x1c>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b7c8:	687b      	ldr	r3, [r7, #4]
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	370c      	adds	r7, #12
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr
 800b7d6:	bf00      	nop
 800b7d8:	20000c28 	.word	0x20000c28

0800b7dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b086      	sub	sp, #24
 800b7e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7e6:	4b4f      	ldr	r3, [pc, #316]	; (800b924 <xTaskIncrementTick+0x148>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	f040 808f 	bne.w	800b90e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b7f0:	4b4d      	ldr	r3, [pc, #308]	; (800b928 <xTaskIncrementTick+0x14c>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b7f8:	4a4b      	ldr	r2, [pc, #300]	; (800b928 <xTaskIncrementTick+0x14c>)
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d120      	bne.n	800b846 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b804:	4b49      	ldr	r3, [pc, #292]	; (800b92c <xTaskIncrementTick+0x150>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d00a      	beq.n	800b824 <xTaskIncrementTick+0x48>
	__asm volatile
 800b80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b812:	f383 8811 	msr	BASEPRI, r3
 800b816:	f3bf 8f6f 	isb	sy
 800b81a:	f3bf 8f4f 	dsb	sy
 800b81e:	603b      	str	r3, [r7, #0]
}
 800b820:	bf00      	nop
 800b822:	e7fe      	b.n	800b822 <xTaskIncrementTick+0x46>
 800b824:	4b41      	ldr	r3, [pc, #260]	; (800b92c <xTaskIncrementTick+0x150>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	60fb      	str	r3, [r7, #12]
 800b82a:	4b41      	ldr	r3, [pc, #260]	; (800b930 <xTaskIncrementTick+0x154>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4a3f      	ldr	r2, [pc, #252]	; (800b92c <xTaskIncrementTick+0x150>)
 800b830:	6013      	str	r3, [r2, #0]
 800b832:	4a3f      	ldr	r2, [pc, #252]	; (800b930 <xTaskIncrementTick+0x154>)
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6013      	str	r3, [r2, #0]
 800b838:	4b3e      	ldr	r3, [pc, #248]	; (800b934 <xTaskIncrementTick+0x158>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	3301      	adds	r3, #1
 800b83e:	4a3d      	ldr	r2, [pc, #244]	; (800b934 <xTaskIncrementTick+0x158>)
 800b840:	6013      	str	r3, [r2, #0]
 800b842:	f000 fad1 	bl	800bde8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b846:	4b3c      	ldr	r3, [pc, #240]	; (800b938 <xTaskIncrementTick+0x15c>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	693a      	ldr	r2, [r7, #16]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d349      	bcc.n	800b8e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b850:	4b36      	ldr	r3, [pc, #216]	; (800b92c <xTaskIncrementTick+0x150>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d104      	bne.n	800b864 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b85a:	4b37      	ldr	r3, [pc, #220]	; (800b938 <xTaskIncrementTick+0x15c>)
 800b85c:	f04f 32ff 	mov.w	r2, #4294967295
 800b860:	601a      	str	r2, [r3, #0]
					break;
 800b862:	e03f      	b.n	800b8e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b864:	4b31      	ldr	r3, [pc, #196]	; (800b92c <xTaskIncrementTick+0x150>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	68db      	ldr	r3, [r3, #12]
 800b86a:	68db      	ldr	r3, [r3, #12]
 800b86c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b874:	693a      	ldr	r2, [r7, #16]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	429a      	cmp	r2, r3
 800b87a:	d203      	bcs.n	800b884 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b87c:	4a2e      	ldr	r2, [pc, #184]	; (800b938 <xTaskIncrementTick+0x15c>)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b882:	e02f      	b.n	800b8e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	3304      	adds	r3, #4
 800b888:	4618      	mov	r0, r3
 800b88a:	f7fe ff99 	bl	800a7c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b892:	2b00      	cmp	r3, #0
 800b894:	d004      	beq.n	800b8a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	3318      	adds	r3, #24
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fe ff90 	bl	800a7c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8a4:	4b25      	ldr	r3, [pc, #148]	; (800b93c <xTaskIncrementTick+0x160>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d903      	bls.n	800b8b4 <xTaskIncrementTick+0xd8>
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b0:	4a22      	ldr	r2, [pc, #136]	; (800b93c <xTaskIncrementTick+0x160>)
 800b8b2:	6013      	str	r3, [r2, #0]
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8b8:	4613      	mov	r3, r2
 800b8ba:	009b      	lsls	r3, r3, #2
 800b8bc:	4413      	add	r3, r2
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	4a1f      	ldr	r2, [pc, #124]	; (800b940 <xTaskIncrementTick+0x164>)
 800b8c2:	441a      	add	r2, r3
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	3304      	adds	r3, #4
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	4610      	mov	r0, r2
 800b8cc:	f7fe ff1b 	bl	800a706 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8d4:	4b1b      	ldr	r3, [pc, #108]	; (800b944 <xTaskIncrementTick+0x168>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d3b8      	bcc.n	800b850 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8e2:	e7b5      	b.n	800b850 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b8e4:	4b17      	ldr	r3, [pc, #92]	; (800b944 <xTaskIncrementTick+0x168>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ea:	4915      	ldr	r1, [pc, #84]	; (800b940 <xTaskIncrementTick+0x164>)
 800b8ec:	4613      	mov	r3, r2
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	4413      	add	r3, r2
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	440b      	add	r3, r1
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d901      	bls.n	800b900 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b900:	4b11      	ldr	r3, [pc, #68]	; (800b948 <xTaskIncrementTick+0x16c>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d007      	beq.n	800b918 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b908:	2301      	movs	r3, #1
 800b90a:	617b      	str	r3, [r7, #20]
 800b90c:	e004      	b.n	800b918 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b90e:	4b0f      	ldr	r3, [pc, #60]	; (800b94c <xTaskIncrementTick+0x170>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	3301      	adds	r3, #1
 800b914:	4a0d      	ldr	r2, [pc, #52]	; (800b94c <xTaskIncrementTick+0x170>)
 800b916:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b918:	697b      	ldr	r3, [r7, #20]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3718      	adds	r7, #24
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	20000c4c 	.word	0x20000c4c
 800b928:	20000c28 	.word	0x20000c28
 800b92c:	20000bdc 	.word	0x20000bdc
 800b930:	20000be0 	.word	0x20000be0
 800b934:	20000c3c 	.word	0x20000c3c
 800b938:	20000c44 	.word	0x20000c44
 800b93c:	20000c2c 	.word	0x20000c2c
 800b940:	20000754 	.word	0x20000754
 800b944:	20000750 	.word	0x20000750
 800b948:	20000c38 	.word	0x20000c38
 800b94c:	20000c34 	.word	0x20000c34

0800b950 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b950:	b480      	push	{r7}
 800b952:	b085      	sub	sp, #20
 800b954:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b956:	4b28      	ldr	r3, [pc, #160]	; (800b9f8 <vTaskSwitchContext+0xa8>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d003      	beq.n	800b966 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b95e:	4b27      	ldr	r3, [pc, #156]	; (800b9fc <vTaskSwitchContext+0xac>)
 800b960:	2201      	movs	r2, #1
 800b962:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b964:	e041      	b.n	800b9ea <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b966:	4b25      	ldr	r3, [pc, #148]	; (800b9fc <vTaskSwitchContext+0xac>)
 800b968:	2200      	movs	r2, #0
 800b96a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b96c:	4b24      	ldr	r3, [pc, #144]	; (800ba00 <vTaskSwitchContext+0xb0>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	60fb      	str	r3, [r7, #12]
 800b972:	e010      	b.n	800b996 <vTaskSwitchContext+0x46>
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d10a      	bne.n	800b990 <vTaskSwitchContext+0x40>
	__asm volatile
 800b97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97e:	f383 8811 	msr	BASEPRI, r3
 800b982:	f3bf 8f6f 	isb	sy
 800b986:	f3bf 8f4f 	dsb	sy
 800b98a:	607b      	str	r3, [r7, #4]
}
 800b98c:	bf00      	nop
 800b98e:	e7fe      	b.n	800b98e <vTaskSwitchContext+0x3e>
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	3b01      	subs	r3, #1
 800b994:	60fb      	str	r3, [r7, #12]
 800b996:	491b      	ldr	r1, [pc, #108]	; (800ba04 <vTaskSwitchContext+0xb4>)
 800b998:	68fa      	ldr	r2, [r7, #12]
 800b99a:	4613      	mov	r3, r2
 800b99c:	009b      	lsls	r3, r3, #2
 800b99e:	4413      	add	r3, r2
 800b9a0:	009b      	lsls	r3, r3, #2
 800b9a2:	440b      	add	r3, r1
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d0e4      	beq.n	800b974 <vTaskSwitchContext+0x24>
 800b9aa:	68fa      	ldr	r2, [r7, #12]
 800b9ac:	4613      	mov	r3, r2
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	4413      	add	r3, r2
 800b9b2:	009b      	lsls	r3, r3, #2
 800b9b4:	4a13      	ldr	r2, [pc, #76]	; (800ba04 <vTaskSwitchContext+0xb4>)
 800b9b6:	4413      	add	r3, r2
 800b9b8:	60bb      	str	r3, [r7, #8]
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	685a      	ldr	r2, [r3, #4]
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	605a      	str	r2, [r3, #4]
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	685a      	ldr	r2, [r3, #4]
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	3308      	adds	r3, #8
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d104      	bne.n	800b9da <vTaskSwitchContext+0x8a>
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	685a      	ldr	r2, [r3, #4]
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	605a      	str	r2, [r3, #4]
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	685b      	ldr	r3, [r3, #4]
 800b9de:	68db      	ldr	r3, [r3, #12]
 800b9e0:	4a09      	ldr	r2, [pc, #36]	; (800ba08 <vTaskSwitchContext+0xb8>)
 800b9e2:	6013      	str	r3, [r2, #0]
 800b9e4:	4a06      	ldr	r2, [pc, #24]	; (800ba00 <vTaskSwitchContext+0xb0>)
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	6013      	str	r3, [r2, #0]
}
 800b9ea:	bf00      	nop
 800b9ec:	3714      	adds	r7, #20
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr
 800b9f6:	bf00      	nop
 800b9f8:	20000c4c 	.word	0x20000c4c
 800b9fc:	20000c38 	.word	0x20000c38
 800ba00:	20000c2c 	.word	0x20000c2c
 800ba04:	20000754 	.word	0x20000754
 800ba08:	20000750 	.word	0x20000750

0800ba0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b084      	sub	sp, #16
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d10a      	bne.n	800ba32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ba1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba20:	f383 8811 	msr	BASEPRI, r3
 800ba24:	f3bf 8f6f 	isb	sy
 800ba28:	f3bf 8f4f 	dsb	sy
 800ba2c:	60fb      	str	r3, [r7, #12]
}
 800ba2e:	bf00      	nop
 800ba30:	e7fe      	b.n	800ba30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba32:	4b07      	ldr	r3, [pc, #28]	; (800ba50 <vTaskPlaceOnEventList+0x44>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	3318      	adds	r3, #24
 800ba38:	4619      	mov	r1, r3
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f7fe fe87 	bl	800a74e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ba40:	2101      	movs	r1, #1
 800ba42:	6838      	ldr	r0, [r7, #0]
 800ba44:	f000 fa7c 	bl	800bf40 <prvAddCurrentTaskToDelayedList>
}
 800ba48:	bf00      	nop
 800ba4a:	3710      	adds	r7, #16
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	20000750 	.word	0x20000750

0800ba54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b086      	sub	sp, #24
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	60b9      	str	r1, [r7, #8]
 800ba5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d10a      	bne.n	800ba7c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ba66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba6a:	f383 8811 	msr	BASEPRI, r3
 800ba6e:	f3bf 8f6f 	isb	sy
 800ba72:	f3bf 8f4f 	dsb	sy
 800ba76:	617b      	str	r3, [r7, #20]
}
 800ba78:	bf00      	nop
 800ba7a:	e7fe      	b.n	800ba7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba7c:	4b0a      	ldr	r3, [pc, #40]	; (800baa8 <vTaskPlaceOnEventListRestricted+0x54>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	3318      	adds	r3, #24
 800ba82:	4619      	mov	r1, r3
 800ba84:	68f8      	ldr	r0, [r7, #12]
 800ba86:	f7fe fe3e 	bl	800a706 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d002      	beq.n	800ba96 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ba90:	f04f 33ff 	mov.w	r3, #4294967295
 800ba94:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ba96:	6879      	ldr	r1, [r7, #4]
 800ba98:	68b8      	ldr	r0, [r7, #8]
 800ba9a:	f000 fa51 	bl	800bf40 <prvAddCurrentTaskToDelayedList>
	}
 800ba9e:	bf00      	nop
 800baa0:	3718      	adds	r7, #24
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	20000750 	.word	0x20000750

0800baac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b086      	sub	sp, #24
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	68db      	ldr	r3, [r3, #12]
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d10a      	bne.n	800bad8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac6:	f383 8811 	msr	BASEPRI, r3
 800baca:	f3bf 8f6f 	isb	sy
 800bace:	f3bf 8f4f 	dsb	sy
 800bad2:	60fb      	str	r3, [r7, #12]
}
 800bad4:	bf00      	nop
 800bad6:	e7fe      	b.n	800bad6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	3318      	adds	r3, #24
 800badc:	4618      	mov	r0, r3
 800bade:	f7fe fe6f 	bl	800a7c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bae2:	4b1e      	ldr	r3, [pc, #120]	; (800bb5c <xTaskRemoveFromEventList+0xb0>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d11d      	bne.n	800bb26 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	3304      	adds	r3, #4
 800baee:	4618      	mov	r0, r3
 800baf0:	f7fe fe66 	bl	800a7c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baf8:	4b19      	ldr	r3, [pc, #100]	; (800bb60 <xTaskRemoveFromEventList+0xb4>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d903      	bls.n	800bb08 <xTaskRemoveFromEventList+0x5c>
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb04:	4a16      	ldr	r2, [pc, #88]	; (800bb60 <xTaskRemoveFromEventList+0xb4>)
 800bb06:	6013      	str	r3, [r2, #0]
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb0c:	4613      	mov	r3, r2
 800bb0e:	009b      	lsls	r3, r3, #2
 800bb10:	4413      	add	r3, r2
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	4a13      	ldr	r2, [pc, #76]	; (800bb64 <xTaskRemoveFromEventList+0xb8>)
 800bb16:	441a      	add	r2, r3
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	3304      	adds	r3, #4
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	4610      	mov	r0, r2
 800bb20:	f7fe fdf1 	bl	800a706 <vListInsertEnd>
 800bb24:	e005      	b.n	800bb32 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	3318      	adds	r3, #24
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	480e      	ldr	r0, [pc, #56]	; (800bb68 <xTaskRemoveFromEventList+0xbc>)
 800bb2e:	f7fe fdea 	bl	800a706 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb36:	4b0d      	ldr	r3, [pc, #52]	; (800bb6c <xTaskRemoveFromEventList+0xc0>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d905      	bls.n	800bb4c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bb40:	2301      	movs	r3, #1
 800bb42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bb44:	4b0a      	ldr	r3, [pc, #40]	; (800bb70 <xTaskRemoveFromEventList+0xc4>)
 800bb46:	2201      	movs	r2, #1
 800bb48:	601a      	str	r2, [r3, #0]
 800bb4a:	e001      	b.n	800bb50 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bb50:	697b      	ldr	r3, [r7, #20]
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3718      	adds	r7, #24
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	20000c4c 	.word	0x20000c4c
 800bb60:	20000c2c 	.word	0x20000c2c
 800bb64:	20000754 	.word	0x20000754
 800bb68:	20000be4 	.word	0x20000be4
 800bb6c:	20000750 	.word	0x20000750
 800bb70:	20000c38 	.word	0x20000c38

0800bb74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bb74:	b480      	push	{r7}
 800bb76:	b083      	sub	sp, #12
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bb7c:	4b06      	ldr	r3, [pc, #24]	; (800bb98 <vTaskInternalSetTimeOutState+0x24>)
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bb84:	4b05      	ldr	r3, [pc, #20]	; (800bb9c <vTaskInternalSetTimeOutState+0x28>)
 800bb86:	681a      	ldr	r2, [r3, #0]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	605a      	str	r2, [r3, #4]
}
 800bb8c:	bf00      	nop
 800bb8e:	370c      	adds	r7, #12
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr
 800bb98:	20000c3c 	.word	0x20000c3c
 800bb9c:	20000c28 	.word	0x20000c28

0800bba0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b088      	sub	sp, #32
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d10a      	bne.n	800bbc6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb4:	f383 8811 	msr	BASEPRI, r3
 800bbb8:	f3bf 8f6f 	isb	sy
 800bbbc:	f3bf 8f4f 	dsb	sy
 800bbc0:	613b      	str	r3, [r7, #16]
}
 800bbc2:	bf00      	nop
 800bbc4:	e7fe      	b.n	800bbc4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d10a      	bne.n	800bbe2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd0:	f383 8811 	msr	BASEPRI, r3
 800bbd4:	f3bf 8f6f 	isb	sy
 800bbd8:	f3bf 8f4f 	dsb	sy
 800bbdc:	60fb      	str	r3, [r7, #12]
}
 800bbde:	bf00      	nop
 800bbe0:	e7fe      	b.n	800bbe0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bbe2:	f000 fe7f 	bl	800c8e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bbe6:	4b1d      	ldr	r3, [pc, #116]	; (800bc5c <xTaskCheckForTimeOut+0xbc>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	69ba      	ldr	r2, [r7, #24]
 800bbf2:	1ad3      	subs	r3, r2, r3
 800bbf4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbfe:	d102      	bne.n	800bc06 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bc00:	2300      	movs	r3, #0
 800bc02:	61fb      	str	r3, [r7, #28]
 800bc04:	e023      	b.n	800bc4e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	4b15      	ldr	r3, [pc, #84]	; (800bc60 <xTaskCheckForTimeOut+0xc0>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d007      	beq.n	800bc22 <xTaskCheckForTimeOut+0x82>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	685b      	ldr	r3, [r3, #4]
 800bc16:	69ba      	ldr	r2, [r7, #24]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d302      	bcc.n	800bc22 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	61fb      	str	r3, [r7, #28]
 800bc20:	e015      	b.n	800bc4e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	697a      	ldr	r2, [r7, #20]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d20b      	bcs.n	800bc44 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	1ad2      	subs	r2, r2, r3
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f7ff ff9b 	bl	800bb74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	61fb      	str	r3, [r7, #28]
 800bc42:	e004      	b.n	800bc4e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	2200      	movs	r2, #0
 800bc48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bc4e:	f000 fe79 	bl	800c944 <vPortExitCritical>

	return xReturn;
 800bc52:	69fb      	ldr	r3, [r7, #28]
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3720      	adds	r7, #32
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	20000c28 	.word	0x20000c28
 800bc60:	20000c3c 	.word	0x20000c3c

0800bc64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bc64:	b480      	push	{r7}
 800bc66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bc68:	4b03      	ldr	r3, [pc, #12]	; (800bc78 <vTaskMissedYield+0x14>)
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	601a      	str	r2, [r3, #0]
}
 800bc6e:	bf00      	nop
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr
 800bc78:	20000c38 	.word	0x20000c38

0800bc7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bc84:	f000 f852 	bl	800bd2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bc88:	4b06      	ldr	r3, [pc, #24]	; (800bca4 <prvIdleTask+0x28>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d9f9      	bls.n	800bc84 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bc90:	4b05      	ldr	r3, [pc, #20]	; (800bca8 <prvIdleTask+0x2c>)
 800bc92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc96:	601a      	str	r2, [r3, #0]
 800bc98:	f3bf 8f4f 	dsb	sy
 800bc9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bca0:	e7f0      	b.n	800bc84 <prvIdleTask+0x8>
 800bca2:	bf00      	nop
 800bca4:	20000754 	.word	0x20000754
 800bca8:	e000ed04 	.word	0xe000ed04

0800bcac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	607b      	str	r3, [r7, #4]
 800bcb6:	e00c      	b.n	800bcd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	4613      	mov	r3, r2
 800bcbc:	009b      	lsls	r3, r3, #2
 800bcbe:	4413      	add	r3, r2
 800bcc0:	009b      	lsls	r3, r3, #2
 800bcc2:	4a12      	ldr	r2, [pc, #72]	; (800bd0c <prvInitialiseTaskLists+0x60>)
 800bcc4:	4413      	add	r3, r2
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7fe fcf0 	bl	800a6ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	3301      	adds	r3, #1
 800bcd0:	607b      	str	r3, [r7, #4]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2b37      	cmp	r3, #55	; 0x37
 800bcd6:	d9ef      	bls.n	800bcb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bcd8:	480d      	ldr	r0, [pc, #52]	; (800bd10 <prvInitialiseTaskLists+0x64>)
 800bcda:	f7fe fce7 	bl	800a6ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bcde:	480d      	ldr	r0, [pc, #52]	; (800bd14 <prvInitialiseTaskLists+0x68>)
 800bce0:	f7fe fce4 	bl	800a6ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bce4:	480c      	ldr	r0, [pc, #48]	; (800bd18 <prvInitialiseTaskLists+0x6c>)
 800bce6:	f7fe fce1 	bl	800a6ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bcea:	480c      	ldr	r0, [pc, #48]	; (800bd1c <prvInitialiseTaskLists+0x70>)
 800bcec:	f7fe fcde 	bl	800a6ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bcf0:	480b      	ldr	r0, [pc, #44]	; (800bd20 <prvInitialiseTaskLists+0x74>)
 800bcf2:	f7fe fcdb 	bl	800a6ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bcf6:	4b0b      	ldr	r3, [pc, #44]	; (800bd24 <prvInitialiseTaskLists+0x78>)
 800bcf8:	4a05      	ldr	r2, [pc, #20]	; (800bd10 <prvInitialiseTaskLists+0x64>)
 800bcfa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bcfc:	4b0a      	ldr	r3, [pc, #40]	; (800bd28 <prvInitialiseTaskLists+0x7c>)
 800bcfe:	4a05      	ldr	r2, [pc, #20]	; (800bd14 <prvInitialiseTaskLists+0x68>)
 800bd00:	601a      	str	r2, [r3, #0]
}
 800bd02:	bf00      	nop
 800bd04:	3708      	adds	r7, #8
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	20000754 	.word	0x20000754
 800bd10:	20000bb4 	.word	0x20000bb4
 800bd14:	20000bc8 	.word	0x20000bc8
 800bd18:	20000be4 	.word	0x20000be4
 800bd1c:	20000bf8 	.word	0x20000bf8
 800bd20:	20000c10 	.word	0x20000c10
 800bd24:	20000bdc 	.word	0x20000bdc
 800bd28:	20000be0 	.word	0x20000be0

0800bd2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd32:	e019      	b.n	800bd68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bd34:	f000 fdd6 	bl	800c8e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd38:	4b10      	ldr	r3, [pc, #64]	; (800bd7c <prvCheckTasksWaitingTermination+0x50>)
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	68db      	ldr	r3, [r3, #12]
 800bd3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	3304      	adds	r3, #4
 800bd44:	4618      	mov	r0, r3
 800bd46:	f7fe fd3b 	bl	800a7c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bd4a:	4b0d      	ldr	r3, [pc, #52]	; (800bd80 <prvCheckTasksWaitingTermination+0x54>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	3b01      	subs	r3, #1
 800bd50:	4a0b      	ldr	r2, [pc, #44]	; (800bd80 <prvCheckTasksWaitingTermination+0x54>)
 800bd52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bd54:	4b0b      	ldr	r3, [pc, #44]	; (800bd84 <prvCheckTasksWaitingTermination+0x58>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	3b01      	subs	r3, #1
 800bd5a:	4a0a      	ldr	r2, [pc, #40]	; (800bd84 <prvCheckTasksWaitingTermination+0x58>)
 800bd5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bd5e:	f000 fdf1 	bl	800c944 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f000 f810 	bl	800bd88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd68:	4b06      	ldr	r3, [pc, #24]	; (800bd84 <prvCheckTasksWaitingTermination+0x58>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d1e1      	bne.n	800bd34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bd70:	bf00      	nop
 800bd72:	bf00      	nop
 800bd74:	3708      	adds	r7, #8
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	20000bf8 	.word	0x20000bf8
 800bd80:	20000c24 	.word	0x20000c24
 800bd84:	20000c0c 	.word	0x20000c0c

0800bd88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d108      	bne.n	800bdac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f000 ff8e 	bl	800ccc0 <vPortFree>
				vPortFree( pxTCB );
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f000 ff8b 	bl	800ccc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bdaa:	e018      	b.n	800bdde <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d103      	bne.n	800bdbe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 ff82 	bl	800ccc0 <vPortFree>
	}
 800bdbc:	e00f      	b.n	800bdde <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bdc4:	2b02      	cmp	r3, #2
 800bdc6:	d00a      	beq.n	800bdde <prvDeleteTCB+0x56>
	__asm volatile
 800bdc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdcc:	f383 8811 	msr	BASEPRI, r3
 800bdd0:	f3bf 8f6f 	isb	sy
 800bdd4:	f3bf 8f4f 	dsb	sy
 800bdd8:	60fb      	str	r3, [r7, #12]
}
 800bdda:	bf00      	nop
 800bddc:	e7fe      	b.n	800bddc <prvDeleteTCB+0x54>
	}
 800bdde:	bf00      	nop
 800bde0:	3710      	adds	r7, #16
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}
	...

0800bde8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bde8:	b480      	push	{r7}
 800bdea:	b083      	sub	sp, #12
 800bdec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bdee:	4b0c      	ldr	r3, [pc, #48]	; (800be20 <prvResetNextTaskUnblockTime+0x38>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d104      	bne.n	800be02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bdf8:	4b0a      	ldr	r3, [pc, #40]	; (800be24 <prvResetNextTaskUnblockTime+0x3c>)
 800bdfa:	f04f 32ff 	mov.w	r2, #4294967295
 800bdfe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800be00:	e008      	b.n	800be14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be02:	4b07      	ldr	r3, [pc, #28]	; (800be20 <prvResetNextTaskUnblockTime+0x38>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	68db      	ldr	r3, [r3, #12]
 800be08:	68db      	ldr	r3, [r3, #12]
 800be0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	4a04      	ldr	r2, [pc, #16]	; (800be24 <prvResetNextTaskUnblockTime+0x3c>)
 800be12:	6013      	str	r3, [r2, #0]
}
 800be14:	bf00      	nop
 800be16:	370c      	adds	r7, #12
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr
 800be20:	20000bdc 	.word	0x20000bdc
 800be24:	20000c44 	.word	0x20000c44

0800be28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800be28:	b480      	push	{r7}
 800be2a:	b083      	sub	sp, #12
 800be2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800be2e:	4b0b      	ldr	r3, [pc, #44]	; (800be5c <xTaskGetSchedulerState+0x34>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d102      	bne.n	800be3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800be36:	2301      	movs	r3, #1
 800be38:	607b      	str	r3, [r7, #4]
 800be3a:	e008      	b.n	800be4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be3c:	4b08      	ldr	r3, [pc, #32]	; (800be60 <xTaskGetSchedulerState+0x38>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d102      	bne.n	800be4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800be44:	2302      	movs	r3, #2
 800be46:	607b      	str	r3, [r7, #4]
 800be48:	e001      	b.n	800be4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800be4a:	2300      	movs	r3, #0
 800be4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800be4e:	687b      	ldr	r3, [r7, #4]
	}
 800be50:	4618      	mov	r0, r3
 800be52:	370c      	adds	r7, #12
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr
 800be5c:	20000c30 	.word	0x20000c30
 800be60:	20000c4c 	.word	0x20000c4c

0800be64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800be64:	b580      	push	{r7, lr}
 800be66:	b086      	sub	sp, #24
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800be70:	2300      	movs	r3, #0
 800be72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d056      	beq.n	800bf28 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800be7a:	4b2e      	ldr	r3, [pc, #184]	; (800bf34 <xTaskPriorityDisinherit+0xd0>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	693a      	ldr	r2, [r7, #16]
 800be80:	429a      	cmp	r2, r3
 800be82:	d00a      	beq.n	800be9a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800be84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be88:	f383 8811 	msr	BASEPRI, r3
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	60fb      	str	r3, [r7, #12]
}
 800be96:	bf00      	nop
 800be98:	e7fe      	b.n	800be98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d10a      	bne.n	800beb8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea6:	f383 8811 	msr	BASEPRI, r3
 800beaa:	f3bf 8f6f 	isb	sy
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	60bb      	str	r3, [r7, #8]
}
 800beb4:	bf00      	nop
 800beb6:	e7fe      	b.n	800beb6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bebc:	1e5a      	subs	r2, r3, #1
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800beca:	429a      	cmp	r2, r3
 800becc:	d02c      	beq.n	800bf28 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d128      	bne.n	800bf28 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	3304      	adds	r3, #4
 800beda:	4618      	mov	r0, r3
 800bedc:	f7fe fc70 	bl	800a7c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bef8:	4b0f      	ldr	r3, [pc, #60]	; (800bf38 <xTaskPriorityDisinherit+0xd4>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	429a      	cmp	r2, r3
 800befe:	d903      	bls.n	800bf08 <xTaskPriorityDisinherit+0xa4>
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf04:	4a0c      	ldr	r2, [pc, #48]	; (800bf38 <xTaskPriorityDisinherit+0xd4>)
 800bf06:	6013      	str	r3, [r2, #0]
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf0c:	4613      	mov	r3, r2
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	4413      	add	r3, r2
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	4a09      	ldr	r2, [pc, #36]	; (800bf3c <xTaskPriorityDisinherit+0xd8>)
 800bf16:	441a      	add	r2, r3
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	3304      	adds	r3, #4
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	4610      	mov	r0, r2
 800bf20:	f7fe fbf1 	bl	800a706 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bf24:	2301      	movs	r3, #1
 800bf26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bf28:	697b      	ldr	r3, [r7, #20]
	}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3718      	adds	r7, #24
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	20000750 	.word	0x20000750
 800bf38:	20000c2c 	.word	0x20000c2c
 800bf3c:	20000754 	.word	0x20000754

0800bf40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bf4a:	4b21      	ldr	r3, [pc, #132]	; (800bfd0 <prvAddCurrentTaskToDelayedList+0x90>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf50:	4b20      	ldr	r3, [pc, #128]	; (800bfd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	3304      	adds	r3, #4
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7fe fc32 	bl	800a7c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf62:	d10a      	bne.n	800bf7a <prvAddCurrentTaskToDelayedList+0x3a>
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d007      	beq.n	800bf7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf6a:	4b1a      	ldr	r3, [pc, #104]	; (800bfd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	3304      	adds	r3, #4
 800bf70:	4619      	mov	r1, r3
 800bf72:	4819      	ldr	r0, [pc, #100]	; (800bfd8 <prvAddCurrentTaskToDelayedList+0x98>)
 800bf74:	f7fe fbc7 	bl	800a706 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bf78:	e026      	b.n	800bfc8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bf7a:	68fa      	ldr	r2, [r7, #12]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	4413      	add	r3, r2
 800bf80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bf82:	4b14      	ldr	r3, [pc, #80]	; (800bfd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	68ba      	ldr	r2, [r7, #8]
 800bf88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf8a:	68ba      	ldr	r2, [r7, #8]
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d209      	bcs.n	800bfa6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf92:	4b12      	ldr	r3, [pc, #72]	; (800bfdc <prvAddCurrentTaskToDelayedList+0x9c>)
 800bf94:	681a      	ldr	r2, [r3, #0]
 800bf96:	4b0f      	ldr	r3, [pc, #60]	; (800bfd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	3304      	adds	r3, #4
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	4610      	mov	r0, r2
 800bfa0:	f7fe fbd5 	bl	800a74e <vListInsert>
}
 800bfa4:	e010      	b.n	800bfc8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bfa6:	4b0e      	ldr	r3, [pc, #56]	; (800bfe0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	4b0a      	ldr	r3, [pc, #40]	; (800bfd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	3304      	adds	r3, #4
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	4610      	mov	r0, r2
 800bfb4:	f7fe fbcb 	bl	800a74e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bfb8:	4b0a      	ldr	r3, [pc, #40]	; (800bfe4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	68ba      	ldr	r2, [r7, #8]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d202      	bcs.n	800bfc8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bfc2:	4a08      	ldr	r2, [pc, #32]	; (800bfe4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	6013      	str	r3, [r2, #0]
}
 800bfc8:	bf00      	nop
 800bfca:	3710      	adds	r7, #16
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}
 800bfd0:	20000c28 	.word	0x20000c28
 800bfd4:	20000750 	.word	0x20000750
 800bfd8:	20000c10 	.word	0x20000c10
 800bfdc:	20000be0 	.word	0x20000be0
 800bfe0:	20000bdc 	.word	0x20000bdc
 800bfe4:	20000c44 	.word	0x20000c44

0800bfe8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b08a      	sub	sp, #40	; 0x28
 800bfec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bfee:	2300      	movs	r3, #0
 800bff0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bff2:	f000 fb07 	bl	800c604 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bff6:	4b1c      	ldr	r3, [pc, #112]	; (800c068 <xTimerCreateTimerTask+0x80>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d021      	beq.n	800c042 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bffe:	2300      	movs	r3, #0
 800c000:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c002:	2300      	movs	r3, #0
 800c004:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c006:	1d3a      	adds	r2, r7, #4
 800c008:	f107 0108 	add.w	r1, r7, #8
 800c00c:	f107 030c 	add.w	r3, r7, #12
 800c010:	4618      	mov	r0, r3
 800c012:	f7fe fb31 	bl	800a678 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c016:	6879      	ldr	r1, [r7, #4]
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	68fa      	ldr	r2, [r7, #12]
 800c01c:	9202      	str	r2, [sp, #8]
 800c01e:	9301      	str	r3, [sp, #4]
 800c020:	2302      	movs	r3, #2
 800c022:	9300      	str	r3, [sp, #0]
 800c024:	2300      	movs	r3, #0
 800c026:	460a      	mov	r2, r1
 800c028:	4910      	ldr	r1, [pc, #64]	; (800c06c <xTimerCreateTimerTask+0x84>)
 800c02a:	4811      	ldr	r0, [pc, #68]	; (800c070 <xTimerCreateTimerTask+0x88>)
 800c02c:	f7ff f8de 	bl	800b1ec <xTaskCreateStatic>
 800c030:	4603      	mov	r3, r0
 800c032:	4a10      	ldr	r2, [pc, #64]	; (800c074 <xTimerCreateTimerTask+0x8c>)
 800c034:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c036:	4b0f      	ldr	r3, [pc, #60]	; (800c074 <xTimerCreateTimerTask+0x8c>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d001      	beq.n	800c042 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c03e:	2301      	movs	r3, #1
 800c040:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d10a      	bne.n	800c05e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c04c:	f383 8811 	msr	BASEPRI, r3
 800c050:	f3bf 8f6f 	isb	sy
 800c054:	f3bf 8f4f 	dsb	sy
 800c058:	613b      	str	r3, [r7, #16]
}
 800c05a:	bf00      	nop
 800c05c:	e7fe      	b.n	800c05c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c05e:	697b      	ldr	r3, [r7, #20]
}
 800c060:	4618      	mov	r0, r3
 800c062:	3718      	adds	r7, #24
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}
 800c068:	20000c80 	.word	0x20000c80
 800c06c:	0800d3c4 	.word	0x0800d3c4
 800c070:	0800c1ad 	.word	0x0800c1ad
 800c074:	20000c84 	.word	0x20000c84

0800c078 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b08a      	sub	sp, #40	; 0x28
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	607a      	str	r2, [r7, #4]
 800c084:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c086:	2300      	movs	r3, #0
 800c088:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d10a      	bne.n	800c0a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c094:	f383 8811 	msr	BASEPRI, r3
 800c098:	f3bf 8f6f 	isb	sy
 800c09c:	f3bf 8f4f 	dsb	sy
 800c0a0:	623b      	str	r3, [r7, #32]
}
 800c0a2:	bf00      	nop
 800c0a4:	e7fe      	b.n	800c0a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c0a6:	4b1a      	ldr	r3, [pc, #104]	; (800c110 <xTimerGenericCommand+0x98>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d02a      	beq.n	800c104 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	2b05      	cmp	r3, #5
 800c0be:	dc18      	bgt.n	800c0f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c0c0:	f7ff feb2 	bl	800be28 <xTaskGetSchedulerState>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	2b02      	cmp	r3, #2
 800c0c8:	d109      	bne.n	800c0de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c0ca:	4b11      	ldr	r3, [pc, #68]	; (800c110 <xTimerGenericCommand+0x98>)
 800c0cc:	6818      	ldr	r0, [r3, #0]
 800c0ce:	f107 0110 	add.w	r1, r7, #16
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0d6:	f7fe fca1 	bl	800aa1c <xQueueGenericSend>
 800c0da:	6278      	str	r0, [r7, #36]	; 0x24
 800c0dc:	e012      	b.n	800c104 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c0de:	4b0c      	ldr	r3, [pc, #48]	; (800c110 <xTimerGenericCommand+0x98>)
 800c0e0:	6818      	ldr	r0, [r3, #0]
 800c0e2:	f107 0110 	add.w	r1, r7, #16
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	f7fe fc97 	bl	800aa1c <xQueueGenericSend>
 800c0ee:	6278      	str	r0, [r7, #36]	; 0x24
 800c0f0:	e008      	b.n	800c104 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c0f2:	4b07      	ldr	r3, [pc, #28]	; (800c110 <xTimerGenericCommand+0x98>)
 800c0f4:	6818      	ldr	r0, [r3, #0]
 800c0f6:	f107 0110 	add.w	r1, r7, #16
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	683a      	ldr	r2, [r7, #0]
 800c0fe:	f7fe fd8b 	bl	800ac18 <xQueueGenericSendFromISR>
 800c102:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c106:	4618      	mov	r0, r3
 800c108:	3728      	adds	r7, #40	; 0x28
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	20000c80 	.word	0x20000c80

0800c114 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b088      	sub	sp, #32
 800c118:	af02      	add	r7, sp, #8
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c11e:	4b22      	ldr	r3, [pc, #136]	; (800c1a8 <prvProcessExpiredTimer+0x94>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	68db      	ldr	r3, [r3, #12]
 800c124:	68db      	ldr	r3, [r3, #12]
 800c126:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	3304      	adds	r3, #4
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7fe fb47 	bl	800a7c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c138:	f003 0304 	and.w	r3, r3, #4
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d022      	beq.n	800c186 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	699a      	ldr	r2, [r3, #24]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	18d1      	adds	r1, r2, r3
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	683a      	ldr	r2, [r7, #0]
 800c14c:	6978      	ldr	r0, [r7, #20]
 800c14e:	f000 f8d1 	bl	800c2f4 <prvInsertTimerInActiveList>
 800c152:	4603      	mov	r3, r0
 800c154:	2b00      	cmp	r3, #0
 800c156:	d01f      	beq.n	800c198 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c158:	2300      	movs	r3, #0
 800c15a:	9300      	str	r3, [sp, #0]
 800c15c:	2300      	movs	r3, #0
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	2100      	movs	r1, #0
 800c162:	6978      	ldr	r0, [r7, #20]
 800c164:	f7ff ff88 	bl	800c078 <xTimerGenericCommand>
 800c168:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d113      	bne.n	800c198 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c174:	f383 8811 	msr	BASEPRI, r3
 800c178:	f3bf 8f6f 	isb	sy
 800c17c:	f3bf 8f4f 	dsb	sy
 800c180:	60fb      	str	r3, [r7, #12]
}
 800c182:	bf00      	nop
 800c184:	e7fe      	b.n	800c184 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c18c:	f023 0301 	bic.w	r3, r3, #1
 800c190:	b2da      	uxtb	r2, r3
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	6a1b      	ldr	r3, [r3, #32]
 800c19c:	6978      	ldr	r0, [r7, #20]
 800c19e:	4798      	blx	r3
}
 800c1a0:	bf00      	nop
 800c1a2:	3718      	adds	r7, #24
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}
 800c1a8:	20000c78 	.word	0x20000c78

0800c1ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c1b4:	f107 0308 	add.w	r3, r7, #8
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f000 f857 	bl	800c26c <prvGetNextExpireTime>
 800c1be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	68f8      	ldr	r0, [r7, #12]
 800c1c6:	f000 f803 	bl	800c1d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c1ca:	f000 f8d5 	bl	800c378 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c1ce:	e7f1      	b.n	800c1b4 <prvTimerTask+0x8>

0800c1d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b084      	sub	sp, #16
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c1da:	f7ff fa43 	bl	800b664 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c1de:	f107 0308 	add.w	r3, r7, #8
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f000 f866 	bl	800c2b4 <prvSampleTimeNow>
 800c1e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d130      	bne.n	800c252 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d10a      	bne.n	800c20c <prvProcessTimerOrBlockTask+0x3c>
 800c1f6:	687a      	ldr	r2, [r7, #4]
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d806      	bhi.n	800c20c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c1fe:	f7ff fa3f 	bl	800b680 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c202:	68f9      	ldr	r1, [r7, #12]
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f7ff ff85 	bl	800c114 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c20a:	e024      	b.n	800c256 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d008      	beq.n	800c224 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c212:	4b13      	ldr	r3, [pc, #76]	; (800c260 <prvProcessTimerOrBlockTask+0x90>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d101      	bne.n	800c220 <prvProcessTimerOrBlockTask+0x50>
 800c21c:	2301      	movs	r3, #1
 800c21e:	e000      	b.n	800c222 <prvProcessTimerOrBlockTask+0x52>
 800c220:	2300      	movs	r3, #0
 800c222:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c224:	4b0f      	ldr	r3, [pc, #60]	; (800c264 <prvProcessTimerOrBlockTask+0x94>)
 800c226:	6818      	ldr	r0, [r3, #0]
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	1ad3      	subs	r3, r2, r3
 800c22e:	683a      	ldr	r2, [r7, #0]
 800c230:	4619      	mov	r1, r3
 800c232:	f7fe ffa7 	bl	800b184 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c236:	f7ff fa23 	bl	800b680 <xTaskResumeAll>
 800c23a:	4603      	mov	r3, r0
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d10a      	bne.n	800c256 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c240:	4b09      	ldr	r3, [pc, #36]	; (800c268 <prvProcessTimerOrBlockTask+0x98>)
 800c242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c246:	601a      	str	r2, [r3, #0]
 800c248:	f3bf 8f4f 	dsb	sy
 800c24c:	f3bf 8f6f 	isb	sy
}
 800c250:	e001      	b.n	800c256 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c252:	f7ff fa15 	bl	800b680 <xTaskResumeAll>
}
 800c256:	bf00      	nop
 800c258:	3710      	adds	r7, #16
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	20000c7c 	.word	0x20000c7c
 800c264:	20000c80 	.word	0x20000c80
 800c268:	e000ed04 	.word	0xe000ed04

0800c26c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c26c:	b480      	push	{r7}
 800c26e:	b085      	sub	sp, #20
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c274:	4b0e      	ldr	r3, [pc, #56]	; (800c2b0 <prvGetNextExpireTime+0x44>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d101      	bne.n	800c282 <prvGetNextExpireTime+0x16>
 800c27e:	2201      	movs	r2, #1
 800c280:	e000      	b.n	800c284 <prvGetNextExpireTime+0x18>
 800c282:	2200      	movs	r2, #0
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d105      	bne.n	800c29c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c290:	4b07      	ldr	r3, [pc, #28]	; (800c2b0 <prvGetNextExpireTime+0x44>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	68db      	ldr	r3, [r3, #12]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	60fb      	str	r3, [r7, #12]
 800c29a:	e001      	b.n	800c2a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c29c:	2300      	movs	r3, #0
 800c29e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3714      	adds	r7, #20
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr
 800c2ae:	bf00      	nop
 800c2b0:	20000c78 	.word	0x20000c78

0800c2b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c2bc:	f7ff fa7e 	bl	800b7bc <xTaskGetTickCount>
 800c2c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c2c2:	4b0b      	ldr	r3, [pc, #44]	; (800c2f0 <prvSampleTimeNow+0x3c>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	68fa      	ldr	r2, [r7, #12]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d205      	bcs.n	800c2d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c2cc:	f000 f936 	bl	800c53c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	601a      	str	r2, [r3, #0]
 800c2d6:	e002      	b.n	800c2de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c2de:	4a04      	ldr	r2, [pc, #16]	; (800c2f0 <prvSampleTimeNow+0x3c>)
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3710      	adds	r7, #16
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	bf00      	nop
 800c2f0:	20000c88 	.word	0x20000c88

0800c2f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b086      	sub	sp, #24
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	60b9      	str	r1, [r7, #8]
 800c2fe:	607a      	str	r2, [r7, #4]
 800c300:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c302:	2300      	movs	r3, #0
 800c304:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	68ba      	ldr	r2, [r7, #8]
 800c30a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	68fa      	ldr	r2, [r7, #12]
 800c310:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	429a      	cmp	r2, r3
 800c318:	d812      	bhi.n	800c340 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	1ad2      	subs	r2, r2, r3
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	699b      	ldr	r3, [r3, #24]
 800c324:	429a      	cmp	r2, r3
 800c326:	d302      	bcc.n	800c32e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c328:	2301      	movs	r3, #1
 800c32a:	617b      	str	r3, [r7, #20]
 800c32c:	e01b      	b.n	800c366 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c32e:	4b10      	ldr	r3, [pc, #64]	; (800c370 <prvInsertTimerInActiveList+0x7c>)
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	3304      	adds	r3, #4
 800c336:	4619      	mov	r1, r3
 800c338:	4610      	mov	r0, r2
 800c33a:	f7fe fa08 	bl	800a74e <vListInsert>
 800c33e:	e012      	b.n	800c366 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	429a      	cmp	r2, r3
 800c346:	d206      	bcs.n	800c356 <prvInsertTimerInActiveList+0x62>
 800c348:	68ba      	ldr	r2, [r7, #8]
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d302      	bcc.n	800c356 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c350:	2301      	movs	r3, #1
 800c352:	617b      	str	r3, [r7, #20]
 800c354:	e007      	b.n	800c366 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c356:	4b07      	ldr	r3, [pc, #28]	; (800c374 <prvInsertTimerInActiveList+0x80>)
 800c358:	681a      	ldr	r2, [r3, #0]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	3304      	adds	r3, #4
 800c35e:	4619      	mov	r1, r3
 800c360:	4610      	mov	r0, r2
 800c362:	f7fe f9f4 	bl	800a74e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c366:	697b      	ldr	r3, [r7, #20]
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3718      	adds	r7, #24
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	20000c7c 	.word	0x20000c7c
 800c374:	20000c78 	.word	0x20000c78

0800c378 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b08e      	sub	sp, #56	; 0x38
 800c37c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c37e:	e0ca      	b.n	800c516 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2b00      	cmp	r3, #0
 800c384:	da18      	bge.n	800c3b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c386:	1d3b      	adds	r3, r7, #4
 800c388:	3304      	adds	r3, #4
 800c38a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d10a      	bne.n	800c3a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c396:	f383 8811 	msr	BASEPRI, r3
 800c39a:	f3bf 8f6f 	isb	sy
 800c39e:	f3bf 8f4f 	dsb	sy
 800c3a2:	61fb      	str	r3, [r7, #28]
}
 800c3a4:	bf00      	nop
 800c3a6:	e7fe      	b.n	800c3a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3ae:	6850      	ldr	r0, [r2, #4]
 800c3b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3b2:	6892      	ldr	r2, [r2, #8]
 800c3b4:	4611      	mov	r1, r2
 800c3b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	f2c0 80aa 	blt.w	800c514 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c6:	695b      	ldr	r3, [r3, #20]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d004      	beq.n	800c3d6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ce:	3304      	adds	r3, #4
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f7fe f9f5 	bl	800a7c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c3d6:	463b      	mov	r3, r7
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f7ff ff6b 	bl	800c2b4 <prvSampleTimeNow>
 800c3de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2b09      	cmp	r3, #9
 800c3e4:	f200 8097 	bhi.w	800c516 <prvProcessReceivedCommands+0x19e>
 800c3e8:	a201      	add	r2, pc, #4	; (adr r2, 800c3f0 <prvProcessReceivedCommands+0x78>)
 800c3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ee:	bf00      	nop
 800c3f0:	0800c419 	.word	0x0800c419
 800c3f4:	0800c419 	.word	0x0800c419
 800c3f8:	0800c419 	.word	0x0800c419
 800c3fc:	0800c48d 	.word	0x0800c48d
 800c400:	0800c4a1 	.word	0x0800c4a1
 800c404:	0800c4eb 	.word	0x0800c4eb
 800c408:	0800c419 	.word	0x0800c419
 800c40c:	0800c419 	.word	0x0800c419
 800c410:	0800c48d 	.word	0x0800c48d
 800c414:	0800c4a1 	.word	0x0800c4a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c41e:	f043 0301 	orr.w	r3, r3, #1
 800c422:	b2da      	uxtb	r2, r3
 800c424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c426:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c42a:	68ba      	ldr	r2, [r7, #8]
 800c42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c42e:	699b      	ldr	r3, [r3, #24]
 800c430:	18d1      	adds	r1, r2, r3
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c436:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c438:	f7ff ff5c 	bl	800c2f4 <prvInsertTimerInActiveList>
 800c43c:	4603      	mov	r3, r0
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d069      	beq.n	800c516 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c444:	6a1b      	ldr	r3, [r3, #32]
 800c446:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c448:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c44c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c450:	f003 0304 	and.w	r3, r3, #4
 800c454:	2b00      	cmp	r3, #0
 800c456:	d05e      	beq.n	800c516 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c458:	68ba      	ldr	r2, [r7, #8]
 800c45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c45c:	699b      	ldr	r3, [r3, #24]
 800c45e:	441a      	add	r2, r3
 800c460:	2300      	movs	r3, #0
 800c462:	9300      	str	r3, [sp, #0]
 800c464:	2300      	movs	r3, #0
 800c466:	2100      	movs	r1, #0
 800c468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c46a:	f7ff fe05 	bl	800c078 <xTimerGenericCommand>
 800c46e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c470:	6a3b      	ldr	r3, [r7, #32]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d14f      	bne.n	800c516 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c47a:	f383 8811 	msr	BASEPRI, r3
 800c47e:	f3bf 8f6f 	isb	sy
 800c482:	f3bf 8f4f 	dsb	sy
 800c486:	61bb      	str	r3, [r7, #24]
}
 800c488:	bf00      	nop
 800c48a:	e7fe      	b.n	800c48a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c48e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c492:	f023 0301 	bic.w	r3, r3, #1
 800c496:	b2da      	uxtb	r2, r3
 800c498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c49e:	e03a      	b.n	800c516 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4a6:	f043 0301 	orr.w	r3, r3, #1
 800c4aa:	b2da      	uxtb	r2, r3
 800c4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c4b2:	68ba      	ldr	r2, [r7, #8]
 800c4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ba:	699b      	ldr	r3, [r3, #24]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d10a      	bne.n	800c4d6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c4:	f383 8811 	msr	BASEPRI, r3
 800c4c8:	f3bf 8f6f 	isb	sy
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	617b      	str	r3, [r7, #20]
}
 800c4d2:	bf00      	nop
 800c4d4:	e7fe      	b.n	800c4d4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d8:	699a      	ldr	r2, [r3, #24]
 800c4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4dc:	18d1      	adds	r1, r2, r3
 800c4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4e4:	f7ff ff06 	bl	800c2f4 <prvInsertTimerInActiveList>
					break;
 800c4e8:	e015      	b.n	800c516 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4f0:	f003 0302 	and.w	r3, r3, #2
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d103      	bne.n	800c500 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c4f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4fa:	f000 fbe1 	bl	800ccc0 <vPortFree>
 800c4fe:	e00a      	b.n	800c516 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c502:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c506:	f023 0301 	bic.w	r3, r3, #1
 800c50a:	b2da      	uxtb	r2, r3
 800c50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c50e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c512:	e000      	b.n	800c516 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c514:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c516:	4b08      	ldr	r3, [pc, #32]	; (800c538 <prvProcessReceivedCommands+0x1c0>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	1d39      	adds	r1, r7, #4
 800c51c:	2200      	movs	r2, #0
 800c51e:	4618      	mov	r0, r3
 800c520:	f7fe fc16 	bl	800ad50 <xQueueReceive>
 800c524:	4603      	mov	r3, r0
 800c526:	2b00      	cmp	r3, #0
 800c528:	f47f af2a 	bne.w	800c380 <prvProcessReceivedCommands+0x8>
	}
}
 800c52c:	bf00      	nop
 800c52e:	bf00      	nop
 800c530:	3730      	adds	r7, #48	; 0x30
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	20000c80 	.word	0x20000c80

0800c53c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b088      	sub	sp, #32
 800c540:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c542:	e048      	b.n	800c5d6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c544:	4b2d      	ldr	r3, [pc, #180]	; (800c5fc <prvSwitchTimerLists+0xc0>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	68db      	ldr	r3, [r3, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c54e:	4b2b      	ldr	r3, [pc, #172]	; (800c5fc <prvSwitchTimerLists+0xc0>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	68db      	ldr	r3, [r3, #12]
 800c554:	68db      	ldr	r3, [r3, #12]
 800c556:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	3304      	adds	r3, #4
 800c55c:	4618      	mov	r0, r3
 800c55e:	f7fe f92f 	bl	800a7c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	6a1b      	ldr	r3, [r3, #32]
 800c566:	68f8      	ldr	r0, [r7, #12]
 800c568:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c570:	f003 0304 	and.w	r3, r3, #4
 800c574:	2b00      	cmp	r3, #0
 800c576:	d02e      	beq.n	800c5d6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	699b      	ldr	r3, [r3, #24]
 800c57c:	693a      	ldr	r2, [r7, #16]
 800c57e:	4413      	add	r3, r2
 800c580:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c582:	68ba      	ldr	r2, [r7, #8]
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	429a      	cmp	r2, r3
 800c588:	d90e      	bls.n	800c5a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	68ba      	ldr	r2, [r7, #8]
 800c58e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	68fa      	ldr	r2, [r7, #12]
 800c594:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c596:	4b19      	ldr	r3, [pc, #100]	; (800c5fc <prvSwitchTimerLists+0xc0>)
 800c598:	681a      	ldr	r2, [r3, #0]
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	3304      	adds	r3, #4
 800c59e:	4619      	mov	r1, r3
 800c5a0:	4610      	mov	r0, r2
 800c5a2:	f7fe f8d4 	bl	800a74e <vListInsert>
 800c5a6:	e016      	b.n	800c5d6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	9300      	str	r3, [sp, #0]
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	693a      	ldr	r2, [r7, #16]
 800c5b0:	2100      	movs	r1, #0
 800c5b2:	68f8      	ldr	r0, [r7, #12]
 800c5b4:	f7ff fd60 	bl	800c078 <xTimerGenericCommand>
 800c5b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d10a      	bne.n	800c5d6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c4:	f383 8811 	msr	BASEPRI, r3
 800c5c8:	f3bf 8f6f 	isb	sy
 800c5cc:	f3bf 8f4f 	dsb	sy
 800c5d0:	603b      	str	r3, [r7, #0]
}
 800c5d2:	bf00      	nop
 800c5d4:	e7fe      	b.n	800c5d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c5d6:	4b09      	ldr	r3, [pc, #36]	; (800c5fc <prvSwitchTimerLists+0xc0>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d1b1      	bne.n	800c544 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c5e0:	4b06      	ldr	r3, [pc, #24]	; (800c5fc <prvSwitchTimerLists+0xc0>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c5e6:	4b06      	ldr	r3, [pc, #24]	; (800c600 <prvSwitchTimerLists+0xc4>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4a04      	ldr	r2, [pc, #16]	; (800c5fc <prvSwitchTimerLists+0xc0>)
 800c5ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c5ee:	4a04      	ldr	r2, [pc, #16]	; (800c600 <prvSwitchTimerLists+0xc4>)
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	6013      	str	r3, [r2, #0]
}
 800c5f4:	bf00      	nop
 800c5f6:	3718      	adds	r7, #24
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}
 800c5fc:	20000c78 	.word	0x20000c78
 800c600:	20000c7c 	.word	0x20000c7c

0800c604 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b082      	sub	sp, #8
 800c608:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c60a:	f000 f96b 	bl	800c8e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c60e:	4b15      	ldr	r3, [pc, #84]	; (800c664 <prvCheckForValidListAndQueue+0x60>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d120      	bne.n	800c658 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c616:	4814      	ldr	r0, [pc, #80]	; (800c668 <prvCheckForValidListAndQueue+0x64>)
 800c618:	f7fe f848 	bl	800a6ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c61c:	4813      	ldr	r0, [pc, #76]	; (800c66c <prvCheckForValidListAndQueue+0x68>)
 800c61e:	f7fe f845 	bl	800a6ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c622:	4b13      	ldr	r3, [pc, #76]	; (800c670 <prvCheckForValidListAndQueue+0x6c>)
 800c624:	4a10      	ldr	r2, [pc, #64]	; (800c668 <prvCheckForValidListAndQueue+0x64>)
 800c626:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c628:	4b12      	ldr	r3, [pc, #72]	; (800c674 <prvCheckForValidListAndQueue+0x70>)
 800c62a:	4a10      	ldr	r2, [pc, #64]	; (800c66c <prvCheckForValidListAndQueue+0x68>)
 800c62c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c62e:	2300      	movs	r3, #0
 800c630:	9300      	str	r3, [sp, #0]
 800c632:	4b11      	ldr	r3, [pc, #68]	; (800c678 <prvCheckForValidListAndQueue+0x74>)
 800c634:	4a11      	ldr	r2, [pc, #68]	; (800c67c <prvCheckForValidListAndQueue+0x78>)
 800c636:	2110      	movs	r1, #16
 800c638:	200a      	movs	r0, #10
 800c63a:	f7fe f953 	bl	800a8e4 <xQueueGenericCreateStatic>
 800c63e:	4603      	mov	r3, r0
 800c640:	4a08      	ldr	r2, [pc, #32]	; (800c664 <prvCheckForValidListAndQueue+0x60>)
 800c642:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c644:	4b07      	ldr	r3, [pc, #28]	; (800c664 <prvCheckForValidListAndQueue+0x60>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d005      	beq.n	800c658 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c64c:	4b05      	ldr	r3, [pc, #20]	; (800c664 <prvCheckForValidListAndQueue+0x60>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	490b      	ldr	r1, [pc, #44]	; (800c680 <prvCheckForValidListAndQueue+0x7c>)
 800c652:	4618      	mov	r0, r3
 800c654:	f7fe fd6c 	bl	800b130 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c658:	f000 f974 	bl	800c944 <vPortExitCritical>
}
 800c65c:	bf00      	nop
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}
 800c662:	bf00      	nop
 800c664:	20000c80 	.word	0x20000c80
 800c668:	20000c50 	.word	0x20000c50
 800c66c:	20000c64 	.word	0x20000c64
 800c670:	20000c78 	.word	0x20000c78
 800c674:	20000c7c 	.word	0x20000c7c
 800c678:	20000d2c 	.word	0x20000d2c
 800c67c:	20000c8c 	.word	0x20000c8c
 800c680:	0800d3cc 	.word	0x0800d3cc

0800c684 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c684:	b480      	push	{r7}
 800c686:	b085      	sub	sp, #20
 800c688:	af00      	add	r7, sp, #0
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	60b9      	str	r1, [r7, #8]
 800c68e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	3b04      	subs	r3, #4
 800c694:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c69c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	3b04      	subs	r3, #4
 800c6a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	f023 0201 	bic.w	r2, r3, #1
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	3b04      	subs	r3, #4
 800c6b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c6b4:	4a0c      	ldr	r2, [pc, #48]	; (800c6e8 <pxPortInitialiseStack+0x64>)
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	3b14      	subs	r3, #20
 800c6be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	3b04      	subs	r3, #4
 800c6ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f06f 0202 	mvn.w	r2, #2
 800c6d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	3b20      	subs	r3, #32
 800c6d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c6da:	68fb      	ldr	r3, [r7, #12]
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3714      	adds	r7, #20
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr
 800c6e8:	0800c6ed 	.word	0x0800c6ed

0800c6ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b085      	sub	sp, #20
 800c6f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c6f6:	4b12      	ldr	r3, [pc, #72]	; (800c740 <prvTaskExitError+0x54>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6fe:	d00a      	beq.n	800c716 <prvTaskExitError+0x2a>
	__asm volatile
 800c700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c704:	f383 8811 	msr	BASEPRI, r3
 800c708:	f3bf 8f6f 	isb	sy
 800c70c:	f3bf 8f4f 	dsb	sy
 800c710:	60fb      	str	r3, [r7, #12]
}
 800c712:	bf00      	nop
 800c714:	e7fe      	b.n	800c714 <prvTaskExitError+0x28>
	__asm volatile
 800c716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c71a:	f383 8811 	msr	BASEPRI, r3
 800c71e:	f3bf 8f6f 	isb	sy
 800c722:	f3bf 8f4f 	dsb	sy
 800c726:	60bb      	str	r3, [r7, #8]
}
 800c728:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c72a:	bf00      	nop
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d0fc      	beq.n	800c72c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c732:	bf00      	nop
 800c734:	bf00      	nop
 800c736:	3714      	adds	r7, #20
 800c738:	46bd      	mov	sp, r7
 800c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73e:	4770      	bx	lr
 800c740:	20000008 	.word	0x20000008
	...

0800c750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c750:	4b07      	ldr	r3, [pc, #28]	; (800c770 <pxCurrentTCBConst2>)
 800c752:	6819      	ldr	r1, [r3, #0]
 800c754:	6808      	ldr	r0, [r1, #0]
 800c756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c75a:	f380 8809 	msr	PSP, r0
 800c75e:	f3bf 8f6f 	isb	sy
 800c762:	f04f 0000 	mov.w	r0, #0
 800c766:	f380 8811 	msr	BASEPRI, r0
 800c76a:	4770      	bx	lr
 800c76c:	f3af 8000 	nop.w

0800c770 <pxCurrentTCBConst2>:
 800c770:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c774:	bf00      	nop
 800c776:	bf00      	nop

0800c778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c778:	4808      	ldr	r0, [pc, #32]	; (800c79c <prvPortStartFirstTask+0x24>)
 800c77a:	6800      	ldr	r0, [r0, #0]
 800c77c:	6800      	ldr	r0, [r0, #0]
 800c77e:	f380 8808 	msr	MSP, r0
 800c782:	f04f 0000 	mov.w	r0, #0
 800c786:	f380 8814 	msr	CONTROL, r0
 800c78a:	b662      	cpsie	i
 800c78c:	b661      	cpsie	f
 800c78e:	f3bf 8f4f 	dsb	sy
 800c792:	f3bf 8f6f 	isb	sy
 800c796:	df00      	svc	0
 800c798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c79a:	bf00      	nop
 800c79c:	e000ed08 	.word	0xe000ed08

0800c7a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b086      	sub	sp, #24
 800c7a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c7a6:	4b46      	ldr	r3, [pc, #280]	; (800c8c0 <xPortStartScheduler+0x120>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	4a46      	ldr	r2, [pc, #280]	; (800c8c4 <xPortStartScheduler+0x124>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d10a      	bne.n	800c7c6 <xPortStartScheduler+0x26>
	__asm volatile
 800c7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b4:	f383 8811 	msr	BASEPRI, r3
 800c7b8:	f3bf 8f6f 	isb	sy
 800c7bc:	f3bf 8f4f 	dsb	sy
 800c7c0:	613b      	str	r3, [r7, #16]
}
 800c7c2:	bf00      	nop
 800c7c4:	e7fe      	b.n	800c7c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c7c6:	4b3e      	ldr	r3, [pc, #248]	; (800c8c0 <xPortStartScheduler+0x120>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4a3f      	ldr	r2, [pc, #252]	; (800c8c8 <xPortStartScheduler+0x128>)
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d10a      	bne.n	800c7e6 <xPortStartScheduler+0x46>
	__asm volatile
 800c7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d4:	f383 8811 	msr	BASEPRI, r3
 800c7d8:	f3bf 8f6f 	isb	sy
 800c7dc:	f3bf 8f4f 	dsb	sy
 800c7e0:	60fb      	str	r3, [r7, #12]
}
 800c7e2:	bf00      	nop
 800c7e4:	e7fe      	b.n	800c7e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c7e6:	4b39      	ldr	r3, [pc, #228]	; (800c8cc <xPortStartScheduler+0x12c>)
 800c7e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	b2db      	uxtb	r3, r3
 800c7f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	22ff      	movs	r2, #255	; 0xff
 800c7f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	b2db      	uxtb	r3, r3
 800c7fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c800:	78fb      	ldrb	r3, [r7, #3]
 800c802:	b2db      	uxtb	r3, r3
 800c804:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c808:	b2da      	uxtb	r2, r3
 800c80a:	4b31      	ldr	r3, [pc, #196]	; (800c8d0 <xPortStartScheduler+0x130>)
 800c80c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c80e:	4b31      	ldr	r3, [pc, #196]	; (800c8d4 <xPortStartScheduler+0x134>)
 800c810:	2207      	movs	r2, #7
 800c812:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c814:	e009      	b.n	800c82a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c816:	4b2f      	ldr	r3, [pc, #188]	; (800c8d4 <xPortStartScheduler+0x134>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	3b01      	subs	r3, #1
 800c81c:	4a2d      	ldr	r2, [pc, #180]	; (800c8d4 <xPortStartScheduler+0x134>)
 800c81e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c820:	78fb      	ldrb	r3, [r7, #3]
 800c822:	b2db      	uxtb	r3, r3
 800c824:	005b      	lsls	r3, r3, #1
 800c826:	b2db      	uxtb	r3, r3
 800c828:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c82a:	78fb      	ldrb	r3, [r7, #3]
 800c82c:	b2db      	uxtb	r3, r3
 800c82e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c832:	2b80      	cmp	r3, #128	; 0x80
 800c834:	d0ef      	beq.n	800c816 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c836:	4b27      	ldr	r3, [pc, #156]	; (800c8d4 <xPortStartScheduler+0x134>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f1c3 0307 	rsb	r3, r3, #7
 800c83e:	2b04      	cmp	r3, #4
 800c840:	d00a      	beq.n	800c858 <xPortStartScheduler+0xb8>
	__asm volatile
 800c842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c846:	f383 8811 	msr	BASEPRI, r3
 800c84a:	f3bf 8f6f 	isb	sy
 800c84e:	f3bf 8f4f 	dsb	sy
 800c852:	60bb      	str	r3, [r7, #8]
}
 800c854:	bf00      	nop
 800c856:	e7fe      	b.n	800c856 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c858:	4b1e      	ldr	r3, [pc, #120]	; (800c8d4 <xPortStartScheduler+0x134>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	021b      	lsls	r3, r3, #8
 800c85e:	4a1d      	ldr	r2, [pc, #116]	; (800c8d4 <xPortStartScheduler+0x134>)
 800c860:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c862:	4b1c      	ldr	r3, [pc, #112]	; (800c8d4 <xPortStartScheduler+0x134>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c86a:	4a1a      	ldr	r2, [pc, #104]	; (800c8d4 <xPortStartScheduler+0x134>)
 800c86c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	b2da      	uxtb	r2, r3
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c876:	4b18      	ldr	r3, [pc, #96]	; (800c8d8 <xPortStartScheduler+0x138>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	4a17      	ldr	r2, [pc, #92]	; (800c8d8 <xPortStartScheduler+0x138>)
 800c87c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c880:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c882:	4b15      	ldr	r3, [pc, #84]	; (800c8d8 <xPortStartScheduler+0x138>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	4a14      	ldr	r2, [pc, #80]	; (800c8d8 <xPortStartScheduler+0x138>)
 800c888:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c88c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c88e:	f000 f8dd 	bl	800ca4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c892:	4b12      	ldr	r3, [pc, #72]	; (800c8dc <xPortStartScheduler+0x13c>)
 800c894:	2200      	movs	r2, #0
 800c896:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c898:	f000 f8fc 	bl	800ca94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c89c:	4b10      	ldr	r3, [pc, #64]	; (800c8e0 <xPortStartScheduler+0x140>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	4a0f      	ldr	r2, [pc, #60]	; (800c8e0 <xPortStartScheduler+0x140>)
 800c8a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c8a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c8a8:	f7ff ff66 	bl	800c778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c8ac:	f7ff f850 	bl	800b950 <vTaskSwitchContext>
	prvTaskExitError();
 800c8b0:	f7ff ff1c 	bl	800c6ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c8b4:	2300      	movs	r3, #0
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3718      	adds	r7, #24
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	bf00      	nop
 800c8c0:	e000ed00 	.word	0xe000ed00
 800c8c4:	410fc271 	.word	0x410fc271
 800c8c8:	410fc270 	.word	0x410fc270
 800c8cc:	e000e400 	.word	0xe000e400
 800c8d0:	20000d7c 	.word	0x20000d7c
 800c8d4:	20000d80 	.word	0x20000d80
 800c8d8:	e000ed20 	.word	0xe000ed20
 800c8dc:	20000008 	.word	0x20000008
 800c8e0:	e000ef34 	.word	0xe000ef34

0800c8e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b083      	sub	sp, #12
 800c8e8:	af00      	add	r7, sp, #0
	__asm volatile
 800c8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ee:	f383 8811 	msr	BASEPRI, r3
 800c8f2:	f3bf 8f6f 	isb	sy
 800c8f6:	f3bf 8f4f 	dsb	sy
 800c8fa:	607b      	str	r3, [r7, #4]
}
 800c8fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c8fe:	4b0f      	ldr	r3, [pc, #60]	; (800c93c <vPortEnterCritical+0x58>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	3301      	adds	r3, #1
 800c904:	4a0d      	ldr	r2, [pc, #52]	; (800c93c <vPortEnterCritical+0x58>)
 800c906:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c908:	4b0c      	ldr	r3, [pc, #48]	; (800c93c <vPortEnterCritical+0x58>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	2b01      	cmp	r3, #1
 800c90e:	d10f      	bne.n	800c930 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c910:	4b0b      	ldr	r3, [pc, #44]	; (800c940 <vPortEnterCritical+0x5c>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	b2db      	uxtb	r3, r3
 800c916:	2b00      	cmp	r3, #0
 800c918:	d00a      	beq.n	800c930 <vPortEnterCritical+0x4c>
	__asm volatile
 800c91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c91e:	f383 8811 	msr	BASEPRI, r3
 800c922:	f3bf 8f6f 	isb	sy
 800c926:	f3bf 8f4f 	dsb	sy
 800c92a:	603b      	str	r3, [r7, #0]
}
 800c92c:	bf00      	nop
 800c92e:	e7fe      	b.n	800c92e <vPortEnterCritical+0x4a>
	}
}
 800c930:	bf00      	nop
 800c932:	370c      	adds	r7, #12
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr
 800c93c:	20000008 	.word	0x20000008
 800c940:	e000ed04 	.word	0xe000ed04

0800c944 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c944:	b480      	push	{r7}
 800c946:	b083      	sub	sp, #12
 800c948:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c94a:	4b12      	ldr	r3, [pc, #72]	; (800c994 <vPortExitCritical+0x50>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d10a      	bne.n	800c968 <vPortExitCritical+0x24>
	__asm volatile
 800c952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c956:	f383 8811 	msr	BASEPRI, r3
 800c95a:	f3bf 8f6f 	isb	sy
 800c95e:	f3bf 8f4f 	dsb	sy
 800c962:	607b      	str	r3, [r7, #4]
}
 800c964:	bf00      	nop
 800c966:	e7fe      	b.n	800c966 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c968:	4b0a      	ldr	r3, [pc, #40]	; (800c994 <vPortExitCritical+0x50>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	3b01      	subs	r3, #1
 800c96e:	4a09      	ldr	r2, [pc, #36]	; (800c994 <vPortExitCritical+0x50>)
 800c970:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c972:	4b08      	ldr	r3, [pc, #32]	; (800c994 <vPortExitCritical+0x50>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d105      	bne.n	800c986 <vPortExitCritical+0x42>
 800c97a:	2300      	movs	r3, #0
 800c97c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	f383 8811 	msr	BASEPRI, r3
}
 800c984:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c986:	bf00      	nop
 800c988:	370c      	adds	r7, #12
 800c98a:	46bd      	mov	sp, r7
 800c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c990:	4770      	bx	lr
 800c992:	bf00      	nop
 800c994:	20000008 	.word	0x20000008
	...

0800c9a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c9a0:	f3ef 8009 	mrs	r0, PSP
 800c9a4:	f3bf 8f6f 	isb	sy
 800c9a8:	4b15      	ldr	r3, [pc, #84]	; (800ca00 <pxCurrentTCBConst>)
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	f01e 0f10 	tst.w	lr, #16
 800c9b0:	bf08      	it	eq
 800c9b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c9b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ba:	6010      	str	r0, [r2, #0]
 800c9bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c9c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c9c4:	f380 8811 	msr	BASEPRI, r0
 800c9c8:	f3bf 8f4f 	dsb	sy
 800c9cc:	f3bf 8f6f 	isb	sy
 800c9d0:	f7fe ffbe 	bl	800b950 <vTaskSwitchContext>
 800c9d4:	f04f 0000 	mov.w	r0, #0
 800c9d8:	f380 8811 	msr	BASEPRI, r0
 800c9dc:	bc09      	pop	{r0, r3}
 800c9de:	6819      	ldr	r1, [r3, #0]
 800c9e0:	6808      	ldr	r0, [r1, #0]
 800c9e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e6:	f01e 0f10 	tst.w	lr, #16
 800c9ea:	bf08      	it	eq
 800c9ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c9f0:	f380 8809 	msr	PSP, r0
 800c9f4:	f3bf 8f6f 	isb	sy
 800c9f8:	4770      	bx	lr
 800c9fa:	bf00      	nop
 800c9fc:	f3af 8000 	nop.w

0800ca00 <pxCurrentTCBConst>:
 800ca00:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ca04:	bf00      	nop
 800ca06:	bf00      	nop

0800ca08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b082      	sub	sp, #8
 800ca0c:	af00      	add	r7, sp, #0
	__asm volatile
 800ca0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca12:	f383 8811 	msr	BASEPRI, r3
 800ca16:	f3bf 8f6f 	isb	sy
 800ca1a:	f3bf 8f4f 	dsb	sy
 800ca1e:	607b      	str	r3, [r7, #4]
}
 800ca20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ca22:	f7fe fedb 	bl	800b7dc <xTaskIncrementTick>
 800ca26:	4603      	mov	r3, r0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d003      	beq.n	800ca34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ca2c:	4b06      	ldr	r3, [pc, #24]	; (800ca48 <xPortSysTickHandler+0x40>)
 800ca2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca32:	601a      	str	r2, [r3, #0]
 800ca34:	2300      	movs	r3, #0
 800ca36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	f383 8811 	msr	BASEPRI, r3
}
 800ca3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ca40:	bf00      	nop
 800ca42:	3708      	adds	r7, #8
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	e000ed04 	.word	0xe000ed04

0800ca4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ca50:	4b0b      	ldr	r3, [pc, #44]	; (800ca80 <vPortSetupTimerInterrupt+0x34>)
 800ca52:	2200      	movs	r2, #0
 800ca54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ca56:	4b0b      	ldr	r3, [pc, #44]	; (800ca84 <vPortSetupTimerInterrupt+0x38>)
 800ca58:	2200      	movs	r2, #0
 800ca5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ca5c:	4b0a      	ldr	r3, [pc, #40]	; (800ca88 <vPortSetupTimerInterrupt+0x3c>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	4a0a      	ldr	r2, [pc, #40]	; (800ca8c <vPortSetupTimerInterrupt+0x40>)
 800ca62:	fba2 2303 	umull	r2, r3, r2, r3
 800ca66:	099b      	lsrs	r3, r3, #6
 800ca68:	4a09      	ldr	r2, [pc, #36]	; (800ca90 <vPortSetupTimerInterrupt+0x44>)
 800ca6a:	3b01      	subs	r3, #1
 800ca6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ca6e:	4b04      	ldr	r3, [pc, #16]	; (800ca80 <vPortSetupTimerInterrupt+0x34>)
 800ca70:	2207      	movs	r2, #7
 800ca72:	601a      	str	r2, [r3, #0]
}
 800ca74:	bf00      	nop
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr
 800ca7e:	bf00      	nop
 800ca80:	e000e010 	.word	0xe000e010
 800ca84:	e000e018 	.word	0xe000e018
 800ca88:	20000000 	.word	0x20000000
 800ca8c:	10624dd3 	.word	0x10624dd3
 800ca90:	e000e014 	.word	0xe000e014

0800ca94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ca94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800caa4 <vPortEnableVFP+0x10>
 800ca98:	6801      	ldr	r1, [r0, #0]
 800ca9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ca9e:	6001      	str	r1, [r0, #0]
 800caa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800caa2:	bf00      	nop
 800caa4:	e000ed88 	.word	0xe000ed88

0800caa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800caa8:	b480      	push	{r7}
 800caaa:	b085      	sub	sp, #20
 800caac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800caae:	f3ef 8305 	mrs	r3, IPSR
 800cab2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	2b0f      	cmp	r3, #15
 800cab8:	d914      	bls.n	800cae4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800caba:	4a17      	ldr	r2, [pc, #92]	; (800cb18 <vPortValidateInterruptPriority+0x70>)
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	4413      	add	r3, r2
 800cac0:	781b      	ldrb	r3, [r3, #0]
 800cac2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cac4:	4b15      	ldr	r3, [pc, #84]	; (800cb1c <vPortValidateInterruptPriority+0x74>)
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	7afa      	ldrb	r2, [r7, #11]
 800caca:	429a      	cmp	r2, r3
 800cacc:	d20a      	bcs.n	800cae4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad2:	f383 8811 	msr	BASEPRI, r3
 800cad6:	f3bf 8f6f 	isb	sy
 800cada:	f3bf 8f4f 	dsb	sy
 800cade:	607b      	str	r3, [r7, #4]
}
 800cae0:	bf00      	nop
 800cae2:	e7fe      	b.n	800cae2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cae4:	4b0e      	ldr	r3, [pc, #56]	; (800cb20 <vPortValidateInterruptPriority+0x78>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800caec:	4b0d      	ldr	r3, [pc, #52]	; (800cb24 <vPortValidateInterruptPriority+0x7c>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	429a      	cmp	r2, r3
 800caf2:	d90a      	bls.n	800cb0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800caf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf8:	f383 8811 	msr	BASEPRI, r3
 800cafc:	f3bf 8f6f 	isb	sy
 800cb00:	f3bf 8f4f 	dsb	sy
 800cb04:	603b      	str	r3, [r7, #0]
}
 800cb06:	bf00      	nop
 800cb08:	e7fe      	b.n	800cb08 <vPortValidateInterruptPriority+0x60>
	}
 800cb0a:	bf00      	nop
 800cb0c:	3714      	adds	r7, #20
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb14:	4770      	bx	lr
 800cb16:	bf00      	nop
 800cb18:	e000e3f0 	.word	0xe000e3f0
 800cb1c:	20000d7c 	.word	0x20000d7c
 800cb20:	e000ed0c 	.word	0xe000ed0c
 800cb24:	20000d80 	.word	0x20000d80

0800cb28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b08a      	sub	sp, #40	; 0x28
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cb30:	2300      	movs	r3, #0
 800cb32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cb34:	f7fe fd96 	bl	800b664 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cb38:	4b5b      	ldr	r3, [pc, #364]	; (800cca8 <pvPortMalloc+0x180>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d101      	bne.n	800cb44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cb40:	f000 f920 	bl	800cd84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cb44:	4b59      	ldr	r3, [pc, #356]	; (800ccac <pvPortMalloc+0x184>)
 800cb46:	681a      	ldr	r2, [r3, #0]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	4013      	ands	r3, r2
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	f040 8093 	bne.w	800cc78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d01d      	beq.n	800cb94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cb58:	2208      	movs	r2, #8
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	4413      	add	r3, r2
 800cb5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f003 0307 	and.w	r3, r3, #7
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d014      	beq.n	800cb94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f023 0307 	bic.w	r3, r3, #7
 800cb70:	3308      	adds	r3, #8
 800cb72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f003 0307 	and.w	r3, r3, #7
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d00a      	beq.n	800cb94 <pvPortMalloc+0x6c>
	__asm volatile
 800cb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb82:	f383 8811 	msr	BASEPRI, r3
 800cb86:	f3bf 8f6f 	isb	sy
 800cb8a:	f3bf 8f4f 	dsb	sy
 800cb8e:	617b      	str	r3, [r7, #20]
}
 800cb90:	bf00      	nop
 800cb92:	e7fe      	b.n	800cb92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d06e      	beq.n	800cc78 <pvPortMalloc+0x150>
 800cb9a:	4b45      	ldr	r3, [pc, #276]	; (800ccb0 <pvPortMalloc+0x188>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	687a      	ldr	r2, [r7, #4]
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d869      	bhi.n	800cc78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cba4:	4b43      	ldr	r3, [pc, #268]	; (800ccb4 <pvPortMalloc+0x18c>)
 800cba6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cba8:	4b42      	ldr	r3, [pc, #264]	; (800ccb4 <pvPortMalloc+0x18c>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cbae:	e004      	b.n	800cbba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	687a      	ldr	r2, [r7, #4]
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d903      	bls.n	800cbcc <pvPortMalloc+0xa4>
 800cbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d1f1      	bne.n	800cbb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cbcc:	4b36      	ldr	r3, [pc, #216]	; (800cca8 <pvPortMalloc+0x180>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d050      	beq.n	800cc78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cbd6:	6a3b      	ldr	r3, [r7, #32]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	2208      	movs	r2, #8
 800cbdc:	4413      	add	r3, r2
 800cbde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	6a3b      	ldr	r3, [r7, #32]
 800cbe6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbea:	685a      	ldr	r2, [r3, #4]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	1ad2      	subs	r2, r2, r3
 800cbf0:	2308      	movs	r3, #8
 800cbf2:	005b      	lsls	r3, r3, #1
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d91f      	bls.n	800cc38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cbf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	4413      	add	r3, r2
 800cbfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc00:	69bb      	ldr	r3, [r7, #24]
 800cc02:	f003 0307 	and.w	r3, r3, #7
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d00a      	beq.n	800cc20 <pvPortMalloc+0xf8>
	__asm volatile
 800cc0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc0e:	f383 8811 	msr	BASEPRI, r3
 800cc12:	f3bf 8f6f 	isb	sy
 800cc16:	f3bf 8f4f 	dsb	sy
 800cc1a:	613b      	str	r3, [r7, #16]
}
 800cc1c:	bf00      	nop
 800cc1e:	e7fe      	b.n	800cc1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc22:	685a      	ldr	r2, [r3, #4]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	1ad2      	subs	r2, r2, r3
 800cc28:	69bb      	ldr	r3, [r7, #24]
 800cc2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc2e:	687a      	ldr	r2, [r7, #4]
 800cc30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cc32:	69b8      	ldr	r0, [r7, #24]
 800cc34:	f000 f908 	bl	800ce48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cc38:	4b1d      	ldr	r3, [pc, #116]	; (800ccb0 <pvPortMalloc+0x188>)
 800cc3a:	681a      	ldr	r2, [r3, #0]
 800cc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3e:	685b      	ldr	r3, [r3, #4]
 800cc40:	1ad3      	subs	r3, r2, r3
 800cc42:	4a1b      	ldr	r2, [pc, #108]	; (800ccb0 <pvPortMalloc+0x188>)
 800cc44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cc46:	4b1a      	ldr	r3, [pc, #104]	; (800ccb0 <pvPortMalloc+0x188>)
 800cc48:	681a      	ldr	r2, [r3, #0]
 800cc4a:	4b1b      	ldr	r3, [pc, #108]	; (800ccb8 <pvPortMalloc+0x190>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d203      	bcs.n	800cc5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cc52:	4b17      	ldr	r3, [pc, #92]	; (800ccb0 <pvPortMalloc+0x188>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	4a18      	ldr	r2, [pc, #96]	; (800ccb8 <pvPortMalloc+0x190>)
 800cc58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5c:	685a      	ldr	r2, [r3, #4]
 800cc5e:	4b13      	ldr	r3, [pc, #76]	; (800ccac <pvPortMalloc+0x184>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	431a      	orrs	r2, r3
 800cc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cc6e:	4b13      	ldr	r3, [pc, #76]	; (800ccbc <pvPortMalloc+0x194>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	3301      	adds	r3, #1
 800cc74:	4a11      	ldr	r2, [pc, #68]	; (800ccbc <pvPortMalloc+0x194>)
 800cc76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cc78:	f7fe fd02 	bl	800b680 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc7c:	69fb      	ldr	r3, [r7, #28]
 800cc7e:	f003 0307 	and.w	r3, r3, #7
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d00a      	beq.n	800cc9c <pvPortMalloc+0x174>
	__asm volatile
 800cc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8a:	f383 8811 	msr	BASEPRI, r3
 800cc8e:	f3bf 8f6f 	isb	sy
 800cc92:	f3bf 8f4f 	dsb	sy
 800cc96:	60fb      	str	r3, [r7, #12]
}
 800cc98:	bf00      	nop
 800cc9a:	e7fe      	b.n	800cc9a <pvPortMalloc+0x172>
	return pvReturn;
 800cc9c:	69fb      	ldr	r3, [r7, #28]
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3728      	adds	r7, #40	; 0x28
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
 800cca6:	bf00      	nop
 800cca8:	2000498c 	.word	0x2000498c
 800ccac:	200049a0 	.word	0x200049a0
 800ccb0:	20004990 	.word	0x20004990
 800ccb4:	20004984 	.word	0x20004984
 800ccb8:	20004994 	.word	0x20004994
 800ccbc:	20004998 	.word	0x20004998

0800ccc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b086      	sub	sp, #24
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d04d      	beq.n	800cd6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ccd2:	2308      	movs	r3, #8
 800ccd4:	425b      	negs	r3, r3
 800ccd6:	697a      	ldr	r2, [r7, #20]
 800ccd8:	4413      	add	r3, r2
 800ccda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cce0:	693b      	ldr	r3, [r7, #16]
 800cce2:	685a      	ldr	r2, [r3, #4]
 800cce4:	4b24      	ldr	r3, [pc, #144]	; (800cd78 <vPortFree+0xb8>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	4013      	ands	r3, r2
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d10a      	bne.n	800cd04 <vPortFree+0x44>
	__asm volatile
 800ccee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf2:	f383 8811 	msr	BASEPRI, r3
 800ccf6:	f3bf 8f6f 	isb	sy
 800ccfa:	f3bf 8f4f 	dsb	sy
 800ccfe:	60fb      	str	r3, [r7, #12]
}
 800cd00:	bf00      	nop
 800cd02:	e7fe      	b.n	800cd02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d00a      	beq.n	800cd22 <vPortFree+0x62>
	__asm volatile
 800cd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd10:	f383 8811 	msr	BASEPRI, r3
 800cd14:	f3bf 8f6f 	isb	sy
 800cd18:	f3bf 8f4f 	dsb	sy
 800cd1c:	60bb      	str	r3, [r7, #8]
}
 800cd1e:	bf00      	nop
 800cd20:	e7fe      	b.n	800cd20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	685a      	ldr	r2, [r3, #4]
 800cd26:	4b14      	ldr	r3, [pc, #80]	; (800cd78 <vPortFree+0xb8>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	4013      	ands	r3, r2
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d01e      	beq.n	800cd6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d11a      	bne.n	800cd6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	685a      	ldr	r2, [r3, #4]
 800cd3c:	4b0e      	ldr	r3, [pc, #56]	; (800cd78 <vPortFree+0xb8>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	43db      	mvns	r3, r3
 800cd42:	401a      	ands	r2, r3
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cd48:	f7fe fc8c 	bl	800b664 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	685a      	ldr	r2, [r3, #4]
 800cd50:	4b0a      	ldr	r3, [pc, #40]	; (800cd7c <vPortFree+0xbc>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4413      	add	r3, r2
 800cd56:	4a09      	ldr	r2, [pc, #36]	; (800cd7c <vPortFree+0xbc>)
 800cd58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cd5a:	6938      	ldr	r0, [r7, #16]
 800cd5c:	f000 f874 	bl	800ce48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cd60:	4b07      	ldr	r3, [pc, #28]	; (800cd80 <vPortFree+0xc0>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	3301      	adds	r3, #1
 800cd66:	4a06      	ldr	r2, [pc, #24]	; (800cd80 <vPortFree+0xc0>)
 800cd68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cd6a:	f7fe fc89 	bl	800b680 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cd6e:	bf00      	nop
 800cd70:	3718      	adds	r7, #24
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	200049a0 	.word	0x200049a0
 800cd7c:	20004990 	.word	0x20004990
 800cd80:	2000499c 	.word	0x2000499c

0800cd84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cd84:	b480      	push	{r7}
 800cd86:	b085      	sub	sp, #20
 800cd88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cd8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cd8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cd90:	4b27      	ldr	r3, [pc, #156]	; (800ce30 <prvHeapInit+0xac>)
 800cd92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f003 0307 	and.w	r3, r3, #7
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d00c      	beq.n	800cdb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	3307      	adds	r3, #7
 800cda2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	f023 0307 	bic.w	r3, r3, #7
 800cdaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cdac:	68ba      	ldr	r2, [r7, #8]
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	1ad3      	subs	r3, r2, r3
 800cdb2:	4a1f      	ldr	r2, [pc, #124]	; (800ce30 <prvHeapInit+0xac>)
 800cdb4:	4413      	add	r3, r2
 800cdb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cdbc:	4a1d      	ldr	r2, [pc, #116]	; (800ce34 <prvHeapInit+0xb0>)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cdc2:	4b1c      	ldr	r3, [pc, #112]	; (800ce34 <prvHeapInit+0xb0>)
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	68ba      	ldr	r2, [r7, #8]
 800cdcc:	4413      	add	r3, r2
 800cdce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cdd0:	2208      	movs	r2, #8
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	1a9b      	subs	r3, r3, r2
 800cdd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f023 0307 	bic.w	r3, r3, #7
 800cdde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	4a15      	ldr	r2, [pc, #84]	; (800ce38 <prvHeapInit+0xb4>)
 800cde4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cde6:	4b14      	ldr	r3, [pc, #80]	; (800ce38 <prvHeapInit+0xb4>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	2200      	movs	r2, #0
 800cdec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cdee:	4b12      	ldr	r3, [pc, #72]	; (800ce38 <prvHeapInit+0xb4>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	68fa      	ldr	r2, [r7, #12]
 800cdfe:	1ad2      	subs	r2, r2, r3
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ce04:	4b0c      	ldr	r3, [pc, #48]	; (800ce38 <prvHeapInit+0xb4>)
 800ce06:	681a      	ldr	r2, [r3, #0]
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	4a0a      	ldr	r2, [pc, #40]	; (800ce3c <prvHeapInit+0xb8>)
 800ce12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	685b      	ldr	r3, [r3, #4]
 800ce18:	4a09      	ldr	r2, [pc, #36]	; (800ce40 <prvHeapInit+0xbc>)
 800ce1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ce1c:	4b09      	ldr	r3, [pc, #36]	; (800ce44 <prvHeapInit+0xc0>)
 800ce1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ce22:	601a      	str	r2, [r3, #0]
}
 800ce24:	bf00      	nop
 800ce26:	3714      	adds	r7, #20
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr
 800ce30:	20000d84 	.word	0x20000d84
 800ce34:	20004984 	.word	0x20004984
 800ce38:	2000498c 	.word	0x2000498c
 800ce3c:	20004994 	.word	0x20004994
 800ce40:	20004990 	.word	0x20004990
 800ce44:	200049a0 	.word	0x200049a0

0800ce48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b085      	sub	sp, #20
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ce50:	4b28      	ldr	r3, [pc, #160]	; (800cef4 <prvInsertBlockIntoFreeList+0xac>)
 800ce52:	60fb      	str	r3, [r7, #12]
 800ce54:	e002      	b.n	800ce5c <prvInsertBlockIntoFreeList+0x14>
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	60fb      	str	r3, [r7, #12]
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	687a      	ldr	r2, [r7, #4]
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d8f7      	bhi.n	800ce56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	685b      	ldr	r3, [r3, #4]
 800ce6e:	68ba      	ldr	r2, [r7, #8]
 800ce70:	4413      	add	r3, r2
 800ce72:	687a      	ldr	r2, [r7, #4]
 800ce74:	429a      	cmp	r2, r3
 800ce76:	d108      	bne.n	800ce8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	685a      	ldr	r2, [r3, #4]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	685b      	ldr	r3, [r3, #4]
 800ce80:	441a      	add	r2, r3
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	685b      	ldr	r3, [r3, #4]
 800ce92:	68ba      	ldr	r2, [r7, #8]
 800ce94:	441a      	add	r2, r3
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d118      	bne.n	800ced0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	4b15      	ldr	r3, [pc, #84]	; (800cef8 <prvInsertBlockIntoFreeList+0xb0>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	429a      	cmp	r2, r3
 800cea8:	d00d      	beq.n	800cec6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	685a      	ldr	r2, [r3, #4]
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	685b      	ldr	r3, [r3, #4]
 800ceb4:	441a      	add	r2, r3
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	681a      	ldr	r2, [r3, #0]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	601a      	str	r2, [r3, #0]
 800cec4:	e008      	b.n	800ced8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cec6:	4b0c      	ldr	r3, [pc, #48]	; (800cef8 <prvInsertBlockIntoFreeList+0xb0>)
 800cec8:	681a      	ldr	r2, [r3, #0]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	601a      	str	r2, [r3, #0]
 800cece:	e003      	b.n	800ced8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	681a      	ldr	r2, [r3, #0]
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ced8:	68fa      	ldr	r2, [r7, #12]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	429a      	cmp	r2, r3
 800cede:	d002      	beq.n	800cee6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	687a      	ldr	r2, [r7, #4]
 800cee4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cee6:	bf00      	nop
 800cee8:	3714      	adds	r7, #20
 800ceea:	46bd      	mov	sp, r7
 800ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef0:	4770      	bx	lr
 800cef2:	bf00      	nop
 800cef4:	20004984 	.word	0x20004984
 800cef8:	2000498c 	.word	0x2000498c

0800cefc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b082      	sub	sp, #8
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cf10:	4619      	mov	r1, r3
 800cf12:	4610      	mov	r0, r2
 800cf14:	f7fc fa11 	bl	800933a <USBD_LL_SetupStage>
}
 800cf18:	bf00      	nop
 800cf1a:	3708      	adds	r7, #8
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}

0800cf20 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b082      	sub	sp, #8
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	460b      	mov	r3, r1
 800cf2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800cf32:	78fa      	ldrb	r2, [r7, #3]
 800cf34:	6879      	ldr	r1, [r7, #4]
 800cf36:	4613      	mov	r3, r2
 800cf38:	00db      	lsls	r3, r3, #3
 800cf3a:	1a9b      	subs	r3, r3, r2
 800cf3c:	009b      	lsls	r3, r3, #2
 800cf3e:	440b      	add	r3, r1
 800cf40:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cf44:	681a      	ldr	r2, [r3, #0]
 800cf46:	78fb      	ldrb	r3, [r7, #3]
 800cf48:	4619      	mov	r1, r3
 800cf4a:	f7fc fa4b 	bl	80093e4 <USBD_LL_DataOutStage>
}
 800cf4e:	bf00      	nop
 800cf50:	3708      	adds	r7, #8
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}

0800cf56 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf56:	b580      	push	{r7, lr}
 800cf58:	b082      	sub	sp, #8
 800cf5a:	af00      	add	r7, sp, #0
 800cf5c:	6078      	str	r0, [r7, #4]
 800cf5e:	460b      	mov	r3, r1
 800cf60:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800cf68:	78fa      	ldrb	r2, [r7, #3]
 800cf6a:	6879      	ldr	r1, [r7, #4]
 800cf6c:	4613      	mov	r3, r2
 800cf6e:	00db      	lsls	r3, r3, #3
 800cf70:	1a9b      	subs	r3, r3, r2
 800cf72:	009b      	lsls	r3, r3, #2
 800cf74:	440b      	add	r3, r1
 800cf76:	3348      	adds	r3, #72	; 0x48
 800cf78:	681a      	ldr	r2, [r3, #0]
 800cf7a:	78fb      	ldrb	r3, [r7, #3]
 800cf7c:	4619      	mov	r1, r3
 800cf7e:	f7fc fa94 	bl	80094aa <USBD_LL_DataInStage>
}
 800cf82:	bf00      	nop
 800cf84:	3708      	adds	r7, #8
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}

0800cf8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf8a:	b580      	push	{r7, lr}
 800cf8c:	b082      	sub	sp, #8
 800cf8e:	af00      	add	r7, sp, #0
 800cf90:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f7fc fba8 	bl	80096ee <USBD_LL_SOF>
}
 800cf9e:	bf00      	nop
 800cfa0:	3708      	adds	r7, #8
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}

0800cfa6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfa6:	b580      	push	{r7, lr}
 800cfa8:	b084      	sub	sp, #16
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cfae:	2301      	movs	r3, #1
 800cfb0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	68db      	ldr	r3, [r3, #12]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d102      	bne.n	800cfc0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	73fb      	strb	r3, [r7, #15]
 800cfbe:	e008      	b.n	800cfd2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	68db      	ldr	r3, [r3, #12]
 800cfc4:	2b02      	cmp	r3, #2
 800cfc6:	d102      	bne.n	800cfce <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cfc8:	2301      	movs	r3, #1
 800cfca:	73fb      	strb	r3, [r7, #15]
 800cfcc:	e001      	b.n	800cfd2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cfce:	f7f5 f9b7 	bl	8002340 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cfd8:	7bfa      	ldrb	r2, [r7, #15]
 800cfda:	4611      	mov	r1, r2
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7fc fb48 	bl	8009672 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f7fc faf4 	bl	80095d6 <USBD_LL_Reset>
}
 800cfee:	bf00      	nop
 800cff0:	3710      	adds	r7, #16
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
	...

0800cff8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b082      	sub	sp, #8
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d006:	4618      	mov	r0, r3
 800d008:	f7fc fb43 	bl	8009692 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	687a      	ldr	r2, [r7, #4]
 800d018:	6812      	ldr	r2, [r2, #0]
 800d01a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d01e:	f043 0301 	orr.w	r3, r3, #1
 800d022:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6a1b      	ldr	r3, [r3, #32]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d005      	beq.n	800d038 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d02c:	4b04      	ldr	r3, [pc, #16]	; (800d040 <HAL_PCD_SuspendCallback+0x48>)
 800d02e:	691b      	ldr	r3, [r3, #16]
 800d030:	4a03      	ldr	r2, [pc, #12]	; (800d040 <HAL_PCD_SuspendCallback+0x48>)
 800d032:	f043 0306 	orr.w	r3, r3, #6
 800d036:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d038:	bf00      	nop
 800d03a:	3708      	adds	r7, #8
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}
 800d040:	e000ed00 	.word	0xe000ed00

0800d044 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b082      	sub	sp, #8
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d052:	4618      	mov	r0, r3
 800d054:	f7fc fb33 	bl	80096be <USBD_LL_Resume>
}
 800d058:	bf00      	nop
 800d05a:	3708      	adds	r7, #8
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}

0800d060 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b082      	sub	sp, #8
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
 800d068:	460b      	mov	r3, r1
 800d06a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d072:	78fa      	ldrb	r2, [r7, #3]
 800d074:	4611      	mov	r1, r2
 800d076:	4618      	mov	r0, r3
 800d078:	f7fc fb81 	bl	800977e <USBD_LL_IsoOUTIncomplete>
}
 800d07c:	bf00      	nop
 800d07e:	3708      	adds	r7, #8
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}

0800d084 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b082      	sub	sp, #8
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	460b      	mov	r3, r1
 800d08e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d096:	78fa      	ldrb	r2, [r7, #3]
 800d098:	4611      	mov	r1, r2
 800d09a:	4618      	mov	r0, r3
 800d09c:	f7fc fb49 	bl	8009732 <USBD_LL_IsoINIncomplete>
}
 800d0a0:	bf00      	nop
 800d0a2:	3708      	adds	r7, #8
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}

0800d0a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b082      	sub	sp, #8
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f7fc fb87 	bl	80097ca <USBD_LL_DevConnected>
}
 800d0bc:	bf00      	nop
 800d0be:	3708      	adds	r7, #8
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f7fc fb84 	bl	80097e0 <USBD_LL_DevDisconnected>
}
 800d0d8:	bf00      	nop
 800d0da:	3708      	adds	r7, #8
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}

0800d0e0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b084      	sub	sp, #16
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
 800d0e8:	4608      	mov	r0, r1
 800d0ea:	4611      	mov	r1, r2
 800d0ec:	461a      	mov	r2, r3
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	70fb      	strb	r3, [r7, #3]
 800d0f2:	460b      	mov	r3, r1
 800d0f4:	70bb      	strb	r3, [r7, #2]
 800d0f6:	4613      	mov	r3, r2
 800d0f8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0fe:	2300      	movs	r3, #0
 800d100:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d108:	78bb      	ldrb	r3, [r7, #2]
 800d10a:	883a      	ldrh	r2, [r7, #0]
 800d10c:	78f9      	ldrb	r1, [r7, #3]
 800d10e:	f7f8 f901 	bl	8005314 <HAL_PCD_EP_Open>
 800d112:	4603      	mov	r3, r0
 800d114:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d116:	7bfb      	ldrb	r3, [r7, #15]
 800d118:	4618      	mov	r0, r3
 800d11a:	f000 f8d3 	bl	800d2c4 <USBD_Get_USB_Status>
 800d11e:	4603      	mov	r3, r0
 800d120:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d122:	7bbb      	ldrb	r3, [r7, #14]
}
 800d124:	4618      	mov	r0, r3
 800d126:	3710      	adds	r7, #16
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b084      	sub	sp, #16
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	460b      	mov	r3, r1
 800d136:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d138:	2300      	movs	r3, #0
 800d13a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d13c:	2300      	movs	r3, #0
 800d13e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d146:	78fa      	ldrb	r2, [r7, #3]
 800d148:	4611      	mov	r1, r2
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7f8 f9df 	bl	800550e <HAL_PCD_EP_SetStall>
 800d150:	4603      	mov	r3, r0
 800d152:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d154:	7bfb      	ldrb	r3, [r7, #15]
 800d156:	4618      	mov	r0, r3
 800d158:	f000 f8b4 	bl	800d2c4 <USBD_Get_USB_Status>
 800d15c:	4603      	mov	r3, r0
 800d15e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d160:	7bbb      	ldrb	r3, [r7, #14]
}
 800d162:	4618      	mov	r0, r3
 800d164:	3710      	adds	r7, #16
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}

0800d16a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d16a:	b580      	push	{r7, lr}
 800d16c:	b084      	sub	sp, #16
 800d16e:	af00      	add	r7, sp, #0
 800d170:	6078      	str	r0, [r7, #4]
 800d172:	460b      	mov	r3, r1
 800d174:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d176:	2300      	movs	r3, #0
 800d178:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d17a:	2300      	movs	r3, #0
 800d17c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d184:	78fa      	ldrb	r2, [r7, #3]
 800d186:	4611      	mov	r1, r2
 800d188:	4618      	mov	r0, r3
 800d18a:	f7f8 fa24 	bl	80055d6 <HAL_PCD_EP_ClrStall>
 800d18e:	4603      	mov	r3, r0
 800d190:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d192:	7bfb      	ldrb	r3, [r7, #15]
 800d194:	4618      	mov	r0, r3
 800d196:	f000 f895 	bl	800d2c4 <USBD_Get_USB_Status>
 800d19a:	4603      	mov	r3, r0
 800d19c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d19e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3710      	adds	r7, #16
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b085      	sub	sp, #20
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	460b      	mov	r3, r1
 800d1b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d1ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d1bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	da0b      	bge.n	800d1dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d1c4:	78fb      	ldrb	r3, [r7, #3]
 800d1c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d1ca:	68f9      	ldr	r1, [r7, #12]
 800d1cc:	4613      	mov	r3, r2
 800d1ce:	00db      	lsls	r3, r3, #3
 800d1d0:	1a9b      	subs	r3, r3, r2
 800d1d2:	009b      	lsls	r3, r3, #2
 800d1d4:	440b      	add	r3, r1
 800d1d6:	333e      	adds	r3, #62	; 0x3e
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	e00b      	b.n	800d1f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d1dc:	78fb      	ldrb	r3, [r7, #3]
 800d1de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d1e2:	68f9      	ldr	r1, [r7, #12]
 800d1e4:	4613      	mov	r3, r2
 800d1e6:	00db      	lsls	r3, r3, #3
 800d1e8:	1a9b      	subs	r3, r3, r2
 800d1ea:	009b      	lsls	r3, r3, #2
 800d1ec:	440b      	add	r3, r1
 800d1ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d1f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3714      	adds	r7, #20
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fe:	4770      	bx	lr

0800d200 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b084      	sub	sp, #16
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	460b      	mov	r3, r1
 800d20a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d20c:	2300      	movs	r3, #0
 800d20e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d210:	2300      	movs	r3, #0
 800d212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d21a:	78fa      	ldrb	r2, [r7, #3]
 800d21c:	4611      	mov	r1, r2
 800d21e:	4618      	mov	r0, r3
 800d220:	f7f8 f853 	bl	80052ca <HAL_PCD_SetAddress>
 800d224:	4603      	mov	r3, r0
 800d226:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d228:	7bfb      	ldrb	r3, [r7, #15]
 800d22a:	4618      	mov	r0, r3
 800d22c:	f000 f84a 	bl	800d2c4 <USBD_Get_USB_Status>
 800d230:	4603      	mov	r3, r0
 800d232:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d234:	7bbb      	ldrb	r3, [r7, #14]
}
 800d236:	4618      	mov	r0, r3
 800d238:	3710      	adds	r7, #16
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}

0800d23e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d23e:	b580      	push	{r7, lr}
 800d240:	b086      	sub	sp, #24
 800d242:	af00      	add	r7, sp, #0
 800d244:	60f8      	str	r0, [r7, #12]
 800d246:	607a      	str	r2, [r7, #4]
 800d248:	603b      	str	r3, [r7, #0]
 800d24a:	460b      	mov	r3, r1
 800d24c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d24e:	2300      	movs	r3, #0
 800d250:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d252:	2300      	movs	r3, #0
 800d254:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d25c:	7af9      	ldrb	r1, [r7, #11]
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	687a      	ldr	r2, [r7, #4]
 800d262:	f7f8 f90a 	bl	800547a <HAL_PCD_EP_Transmit>
 800d266:	4603      	mov	r3, r0
 800d268:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d26a:	7dfb      	ldrb	r3, [r7, #23]
 800d26c:	4618      	mov	r0, r3
 800d26e:	f000 f829 	bl	800d2c4 <USBD_Get_USB_Status>
 800d272:	4603      	mov	r3, r0
 800d274:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d276:	7dbb      	ldrb	r3, [r7, #22]
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3718      	adds	r7, #24
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b086      	sub	sp, #24
 800d284:	af00      	add	r7, sp, #0
 800d286:	60f8      	str	r0, [r7, #12]
 800d288:	607a      	str	r2, [r7, #4]
 800d28a:	603b      	str	r3, [r7, #0]
 800d28c:	460b      	mov	r3, r1
 800d28e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d290:	2300      	movs	r3, #0
 800d292:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d294:	2300      	movs	r3, #0
 800d296:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d29e:	7af9      	ldrb	r1, [r7, #11]
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	687a      	ldr	r2, [r7, #4]
 800d2a4:	f7f8 f89e 	bl	80053e4 <HAL_PCD_EP_Receive>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2ac:	7dfb      	ldrb	r3, [r7, #23]
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f000 f808 	bl	800d2c4 <USBD_Get_USB_Status>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d2b8:	7dbb      	ldrb	r3, [r7, #22]
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3718      	adds	r7, #24
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
	...

0800d2c4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b085      	sub	sp, #20
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d2d2:	79fb      	ldrb	r3, [r7, #7]
 800d2d4:	2b03      	cmp	r3, #3
 800d2d6:	d817      	bhi.n	800d308 <USBD_Get_USB_Status+0x44>
 800d2d8:	a201      	add	r2, pc, #4	; (adr r2, 800d2e0 <USBD_Get_USB_Status+0x1c>)
 800d2da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2de:	bf00      	nop
 800d2e0:	0800d2f1 	.word	0x0800d2f1
 800d2e4:	0800d2f7 	.word	0x0800d2f7
 800d2e8:	0800d2fd 	.word	0x0800d2fd
 800d2ec:	0800d303 	.word	0x0800d303
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	73fb      	strb	r3, [r7, #15]
    break;
 800d2f4:	e00b      	b.n	800d30e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d2f6:	2303      	movs	r3, #3
 800d2f8:	73fb      	strb	r3, [r7, #15]
    break;
 800d2fa:	e008      	b.n	800d30e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	73fb      	strb	r3, [r7, #15]
    break;
 800d300:	e005      	b.n	800d30e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d302:	2303      	movs	r3, #3
 800d304:	73fb      	strb	r3, [r7, #15]
    break;
 800d306:	e002      	b.n	800d30e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d308:	2303      	movs	r3, #3
 800d30a:	73fb      	strb	r3, [r7, #15]
    break;
 800d30c:	bf00      	nop
  }
  return usb_status;
 800d30e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d310:	4618      	mov	r0, r3
 800d312:	3714      	adds	r7, #20
 800d314:	46bd      	mov	sp, r7
 800d316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31a:	4770      	bx	lr

0800d31c <__libc_init_array>:
 800d31c:	b570      	push	{r4, r5, r6, lr}
 800d31e:	4d0d      	ldr	r5, [pc, #52]	; (800d354 <__libc_init_array+0x38>)
 800d320:	4c0d      	ldr	r4, [pc, #52]	; (800d358 <__libc_init_array+0x3c>)
 800d322:	1b64      	subs	r4, r4, r5
 800d324:	10a4      	asrs	r4, r4, #2
 800d326:	2600      	movs	r6, #0
 800d328:	42a6      	cmp	r6, r4
 800d32a:	d109      	bne.n	800d340 <__libc_init_array+0x24>
 800d32c:	4d0b      	ldr	r5, [pc, #44]	; (800d35c <__libc_init_array+0x40>)
 800d32e:	4c0c      	ldr	r4, [pc, #48]	; (800d360 <__libc_init_array+0x44>)
 800d330:	f000 f82e 	bl	800d390 <_init>
 800d334:	1b64      	subs	r4, r4, r5
 800d336:	10a4      	asrs	r4, r4, #2
 800d338:	2600      	movs	r6, #0
 800d33a:	42a6      	cmp	r6, r4
 800d33c:	d105      	bne.n	800d34a <__libc_init_array+0x2e>
 800d33e:	bd70      	pop	{r4, r5, r6, pc}
 800d340:	f855 3b04 	ldr.w	r3, [r5], #4
 800d344:	4798      	blx	r3
 800d346:	3601      	adds	r6, #1
 800d348:	e7ee      	b.n	800d328 <__libc_init_array+0xc>
 800d34a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d34e:	4798      	blx	r3
 800d350:	3601      	adds	r6, #1
 800d352:	e7f2      	b.n	800d33a <__libc_init_array+0x1e>
 800d354:	0800d450 	.word	0x0800d450
 800d358:	0800d450 	.word	0x0800d450
 800d35c:	0800d450 	.word	0x0800d450
 800d360:	0800d454 	.word	0x0800d454

0800d364 <memcpy>:
 800d364:	440a      	add	r2, r1
 800d366:	4291      	cmp	r1, r2
 800d368:	f100 33ff 	add.w	r3, r0, #4294967295
 800d36c:	d100      	bne.n	800d370 <memcpy+0xc>
 800d36e:	4770      	bx	lr
 800d370:	b510      	push	{r4, lr}
 800d372:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d376:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d37a:	4291      	cmp	r1, r2
 800d37c:	d1f9      	bne.n	800d372 <memcpy+0xe>
 800d37e:	bd10      	pop	{r4, pc}

0800d380 <memset>:
 800d380:	4402      	add	r2, r0
 800d382:	4603      	mov	r3, r0
 800d384:	4293      	cmp	r3, r2
 800d386:	d100      	bne.n	800d38a <memset+0xa>
 800d388:	4770      	bx	lr
 800d38a:	f803 1b01 	strb.w	r1, [r3], #1
 800d38e:	e7f9      	b.n	800d384 <memset+0x4>

0800d390 <_init>:
 800d390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d392:	bf00      	nop
 800d394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d396:	bc08      	pop	{r3}
 800d398:	469e      	mov	lr, r3
 800d39a:	4770      	bx	lr

0800d39c <_fini>:
 800d39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d39e:	bf00      	nop
 800d3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3a2:	bc08      	pop	{r3}
 800d3a4:	469e      	mov	lr, r3
 800d3a6:	4770      	bx	lr
